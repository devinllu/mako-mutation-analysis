<?xml version="1.0" ?>
<testsuites failures="1257" errors="23" tests="3453" disabled="0" time="0.0">
	<testsuite name="mutmut" disabled="0" failures="1257" errors="23" skipped="0" time="0" tests="3453">
		<testcase name="Mutant #1" file="mako/parsetree.py" line="22">
			<system-out>        self.source = source</system-out>
		</testcase>
		<testcase name="Mutant #2" file="mako/parsetree.py" line="23">
			<system-out>        self.lineno = lineno</system-out>
		</testcase>
		<testcase name="Mutant #3" file="mako/parsetree.py" line="24">
			<system-out>        self.pos = pos</system-out>
		</testcase>
		<testcase name="Mutant #4" file="mako/parsetree.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -23,7 +23,7 @@
         self.source = source
         self.lineno = lineno
         self.pos = pos
-        self.filename = filename
+        self.filename = None
 
     @property
     def exception_kwargs(self):
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #5" file="mako/parsetree.py" line="27">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #6" file="mako/parsetree.py" line="30">
			<system-out>            &quot;source&quot;: self.source,</system-out>
		</testcase>
		<testcase name="Mutant #7" file="mako/parsetree.py" line="31">
			<system-out>            &quot;lineno&quot;: self.lineno,</system-out>
		</testcase>
		<testcase name="Mutant #8" file="mako/parsetree.py" line="32">
			<system-out>            &quot;pos&quot;: self.pos,</system-out>
		</testcase>
		<testcase name="Mutant #9" file="mako/parsetree.py" line="33">
			<system-out>            &quot;filename&quot;: self.filename,</system-out>
		</testcase>
		<testcase name="Mutant #10" file="mako/parsetree.py" line="44">
			<system-out>        method = getattr(visitor, &quot;visit&quot; + self.__class__.__name__, traverse)</system-out>
		</testcase>
		<testcase name="Mutant #11" file="mako/parsetree.py" line="44">
			<system-out>        method = getattr(visitor, &quot;visit&quot; + self.__class__.__name__, traverse)</system-out>
		</testcase>
		<testcase name="Mutant #12" file="mako/parsetree.py" line="44">
			<system-out>        method = getattr(visitor, &quot;visit&quot; + self.__class__.__name__, traverse)</system-out>
		</testcase>
		<testcase name="Mutant #13" file="mako/parsetree.py" line="45">
			<system-out>        method(self)</system-out>
		</testcase>
		<testcase name="Mutant #14" file="mako/parsetree.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -51,7 +51,7 @@
     &quot;&quot;&quot;a 'container' node that stores the overall collection of nodes.&quot;&quot;&quot;
 
     def __init__(self, filename):
-        super(TemplateNode, self).__init__(&quot;&quot;, 0, 0, filename)
+        super(TemplateNode, self).__init__(&quot;XXXX&quot;, 0, 0, filename)
         self.nodes = []
         self.page_attributes = {}
 
</failure>
			<system-out>        super(TemplateNode, self).__init__(&quot;&quot;, 0, 0, filename)</system-out>
		</testcase>
		<testcase name="Mutant #15" file="mako/parsetree.py" line="53">
			<system-out>        super(TemplateNode, self).__init__(&quot;&quot;, 0, 0, filename)</system-out>
		</testcase>
		<testcase name="Mutant #16" file="mako/parsetree.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -51,7 +51,7 @@
     &quot;&quot;&quot;a 'container' node that stores the overall collection of nodes.&quot;&quot;&quot;
 
     def __init__(self, filename):
-        super(TemplateNode, self).__init__(&quot;&quot;, 0, 0, filename)
+        super(TemplateNode, self).__init__(&quot;&quot;, 0, 1, filename)
         self.nodes = []
         self.page_attributes = {}
 
</failure>
			<system-out>        super(TemplateNode, self).__init__(&quot;&quot;, 0, 0, filename)</system-out>
		</testcase>
		<testcase name="Mutant #17" file="mako/parsetree.py" line="54">
			<system-out>        self.nodes = []</system-out>
		</testcase>
		<testcase name="Mutant #18" file="mako/parsetree.py" line="55">
			<system-out>        self.page_attributes = {}</system-out>
		</testcase>
		<testcase name="Mutant #19" file="mako/parsetree.py" line="61">
			<system-out>        return &quot;TemplateNode(%s, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #20" file="mako/parsetree.py" line="61">
			<system-out>        return &quot;TemplateNode(%s, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #21" file="mako/parsetree.py" line="79">
			<system-out>    has_loop_context = False</system-out>
		</testcase>
		<testcase name="Mutant #22" file="mako/parsetree.py" line="79">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -77,7 +77,7 @@
 
     &quot;&quot;&quot;
 
-    has_loop_context = False
+    has_loop_context = None
 
     def __init__(self, keyword, isend, text, **kwargs):
         super(ControlLine, self).__init__(**kwargs)
</failure>
			<system-out>    has_loop_context = False</system-out>
		</testcase>
		<testcase name="Mutant #23" file="mako/parsetree.py" line="83">
			<system-out>        self.text = text</system-out>
		</testcase>
		<testcase name="Mutant #24" file="mako/parsetree.py" line="84">
			<system-out>        self.keyword = keyword</system-out>
		</testcase>
		<testcase name="Mutant #25" file="mako/parsetree.py" line="85">
			<system-out>        self.isend = isend</system-out>
		</testcase>
		<testcase name="Mutant #26" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #27" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #28" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #29" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #30" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #31" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #32" file="mako/parsetree.py" line="86">
			<system-out>        self.is_primary = keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;, &quot;try&quot;, &quot;with&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #33" file="mako/parsetree.py" line="87">
			<system-out>        self.nodes = []</system-out>
		</testcase>
		<testcase name="Mutant #34" file="mako/parsetree.py" line="89">
			<system-out>            self._declared_identifiers = []</system-out>
		</testcase>
		<testcase name="Mutant #35" file="mako/parsetree.py" line="90">
			<system-out>            self._undeclared_identifiers = []</system-out>
		</testcase>
		<testcase name="Mutant #36" file="mako/parsetree.py" line="92">
			<system-out>            code = ast.PythonFragment(text, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #37" file="mako/parsetree.py" line="93">
			<system-out>            self._declared_identifiers = code.declared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #38" file="mako/parsetree.py" line="94">
			<system-out>            self._undeclared_identifiers = code.undeclared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #39" file="mako/parsetree.py" line="109">
			<system-out>        return keyword in {</system-out>
		</testcase>
		<testcase name="Mutant #40" file="mako/parsetree.py" line="110">
			<system-out>            &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #41" file="mako/parsetree.py" line="110">
			<system-out>            &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #42" file="mako/parsetree.py" line="110">
			<system-out>            &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #43" file="mako/parsetree.py" line="111">
			<system-out>            &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #44" file="mako/parsetree.py" line="111">
			<system-out>            &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #45" file="mako/parsetree.py" line="111">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -109,7 +109,7 @@
 
         return keyword in {
             &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),
-            &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),
+            &quot;try&quot;: set([&quot;except&quot;, &quot;XXfinallyXX&quot;]),
             &quot;for&quot;: set([&quot;else&quot;]),
         }.get(self.keyword, [])
 
</failure>
			<system-out>            &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #46" file="mako/parsetree.py" line="112">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -110,7 +110,7 @@
         return keyword in {
             &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),
             &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),
-            &quot;for&quot;: set([&quot;else&quot;]),
+            &quot;XXforXX&quot;: set([&quot;else&quot;]),
         }.get(self.keyword, [])
 
     def __repr__(self):
</failure>
			<system-out>            &quot;for&quot;: set([&quot;else&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #47" file="mako/parsetree.py" line="112">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -110,7 +110,7 @@
         return keyword in {
             &quot;if&quot;: set([&quot;else&quot;, &quot;elif&quot;]),
             &quot;try&quot;: set([&quot;except&quot;, &quot;finally&quot;]),
-            &quot;for&quot;: set([&quot;else&quot;]),
+            &quot;for&quot;: set([&quot;XXelseXX&quot;]),
         }.get(self.keyword, [])
 
     def __repr__(self):
</failure>
			<system-out>            &quot;for&quot;: set([&quot;else&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #48" file="mako/parsetree.py" line="116">
			<system-out>        return &quot;ControlLine(%r, %r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #49" file="mako/parsetree.py" line="116">
			<system-out>        return &quot;ControlLine(%r, %r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #50" file="mako/parsetree.py" line="130">
			<system-out>        self.content = content</system-out>
		</testcase>
		<testcase name="Mutant #51" file="mako/parsetree.py" line="133">
			<system-out>        return &quot;Text(%r, %r)&quot; % (self.content, (self.lineno, self.pos))</system-out>
		</testcase>
		<testcase name="Mutant #52" file="mako/parsetree.py" line="133">
			<system-out>        return &quot;Text(%r, %r)&quot; % (self.content, (self.lineno, self.pos))</system-out>
		</testcase>
		<testcase name="Mutant #53" file="mako/parsetree.py" line="156">
			<system-out>        self.text = text</system-out>
		</testcase>
		<testcase name="Mutant #54" file="mako/parsetree.py" line="157">
			<system-out>        self.ismodule = ismodule</system-out>
		</testcase>
		<testcase name="Mutant #55" file="mako/parsetree.py" line="158">
			<system-out>        self.code = ast.PythonCode(text, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #56" file="mako/parsetree.py" line="167">
			<system-out>        return &quot;Code(%r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #57" file="mako/parsetree.py" line="167">
			<system-out>        return &quot;Code(%r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #58" file="mako/parsetree.py" line="184">
			<system-out>        self.text = text</system-out>
		</testcase>
		<testcase name="Mutant #59" file="mako/parsetree.py" line="187">
			<system-out>        return &quot;Comment(%r, %r)&quot; % (self.text, (self.lineno, self.pos))</system-out>
		</testcase>
		<testcase name="Mutant #60" file="mako/parsetree.py" line="187">
			<system-out>        return &quot;Comment(%r, %r)&quot; % (self.text, (self.lineno, self.pos))</system-out>
		</testcase>
		<testcase name="Mutant #61" file="mako/parsetree.py" line="200">
			<system-out>        self.text = text</system-out>
		</testcase>
		<testcase name="Mutant #62" file="mako/parsetree.py" line="201">
			<system-out>        self.escapes = escapes</system-out>
		</testcase>
		<testcase name="Mutant #63" file="mako/parsetree.py" line="202">
			<system-out>        self.escapes_code = ast.ArgumentList(escapes, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #64" file="mako/parsetree.py" line="203">
			<system-out>        self.code = ast.PythonCode(text, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #65" file="mako/parsetree.py" line="217">
			<system-out>        return &quot;Expression(%r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #66" file="mako/parsetree.py" line="217">
			<system-out>        return &quot;Expression(%r, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #67" file="mako/parsetree.py" line="229">
			<system-out>    _classmap = {}</system-out>
		</testcase>
		<testcase name="Mutant #68" file="mako/parsetree.py" line="232">
			<system-out>        if getattr(cls, &quot;__keyword__&quot;, None) is not None:</system-out>
		</testcase>
		<testcase name="Mutant #69" file="mako/parsetree.py" line="232">
			<system-out>        if getattr(cls, &quot;__keyword__&quot;, None) is not None:</system-out>
		</testcase>
		<testcase name="Mutant #70" file="mako/parsetree.py" line="233">
			<system-out>            cls._classmap[cls.__keyword__] = cls</system-out>
		</testcase>
		<testcase name="Mutant #71" file="mako/parsetree.py" line="237">
			<system-out>        if &quot;:&quot; in keyword:</system-out>
		</testcase>
		<testcase name="Mutant #72" file="mako/parsetree.py" line="237">
			<system-out>        if &quot;:&quot; in keyword:</system-out>
		</testcase>
		<testcase name="Mutant #73" file="mako/parsetree.py" line="238">
			<system-out>            ns, defname = keyword.split(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #74" file="mako/parsetree.py" line="238">
			<system-out>            ns, defname = keyword.split(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #75" file="mako/parsetree.py" line="244">
			<system-out>            cls = _TagMeta._classmap[keyword]</system-out>
		</testcase>
		<testcase name="Mutant #76" file="mako/parsetree.py" line="247">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -245,7 +245,7 @@
             cls = _TagMeta._classmap[keyword]
         except KeyError:
             raise exceptions.CompileException(
-                &quot;No such tag: '%s'&quot; % keyword,
+                &quot;XXNo such tag: '%s'XX&quot; % keyword,
                 source=kwargs[&quot;source&quot;],
                 lineno=kwargs[&quot;lineno&quot;],
                 pos=kwargs[&quot;pos&quot;],
</failure>
			<system-out>                &quot;No such tag: '%s'&quot; % keyword,</system-out>
		</testcase>
		<testcase name="Mutant #77" file="mako/parsetree.py" line="247">
			<system-out>                &quot;No such tag: '%s'&quot; % keyword,</system-out>
		</testcase>
		<testcase name="Mutant #78" file="mako/parsetree.py" line="248">
			<system-out>                source=kwargs[&quot;source&quot;],</system-out>
		</testcase>
		<testcase name="Mutant #79" file="mako/parsetree.py" line="249">
			<system-out>                lineno=kwargs[&quot;lineno&quot;],</system-out>
		</testcase>
		<testcase name="Mutant #80" file="mako/parsetree.py" line="250">
			<system-out>                pos=kwargs[&quot;pos&quot;],</system-out>
		</testcase>
		<testcase name="Mutant #81" file="mako/parsetree.py" line="251">
			<system-out>                filename=kwargs[&quot;filename&quot;],</system-out>
		</testcase>
		<testcase name="Mutant #82" file="mako/parsetree.py" line="269">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -267,7 +267,7 @@
 
     &quot;&quot;&quot;
 
-    __keyword__ = None
+    __keyword__ = &quot;&quot;
 
     def __init__(
         self,
</failure>
			<system-out>    __keyword__ = None</system-out>
		</testcase>
		<testcase name="Mutant #83" file="mako/parsetree.py" line="300">
			<system-out>        self.keyword = keyword</system-out>
		</testcase>
		<testcase name="Mutant #84" file="mako/parsetree.py" line="301">
			<system-out>        self.attributes = attributes</system-out>
		</testcase>
		<testcase name="Mutant #85" file="mako/parsetree.py" line="303">
			<system-out>        missing = [r for r in required if r not in self.parsed_attributes]</system-out>
		</testcase>
		<testcase name="Mutant #86" file="mako/parsetree.py" line="303">
			<system-out>        missing = [r for r in required if r not in self.parsed_attributes]</system-out>
		</testcase>
		<testcase name="Mutant #87" file="mako/parsetree.py" line="306">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -304,7 +304,7 @@
         missing = [r for r in required if r not in self.parsed_attributes]
         if len(missing):
             raise exceptions.CompileException(
-                &quot;Missing attribute(s): %s&quot;
+                &quot;XXMissing attribute(s): %sXX&quot;
                 % &quot;,&quot;.join([repr(m) for m in missing]),
                 **self.exception_kwargs
             )
</failure>
			<system-out>                &quot;Missing attribute(s): %s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #88" file="mako/parsetree.py" line="307">
			<system-out>                % &quot;,&quot;.join([repr(m) for m in missing]),</system-out>
		</testcase>
		<testcase name="Mutant #89" file="mako/parsetree.py" line="307">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -305,7 +305,7 @@
         if len(missing):
             raise exceptions.CompileException(
                 &quot;Missing attribute(s): %s&quot;
-                % &quot;,&quot;.join([repr(m) for m in missing]),
+                % &quot;XX,XX&quot;.join([repr(m) for m in missing]),
                 **self.exception_kwargs
             )
         self.parent = None
</failure>
			<system-out>                % &quot;,&quot;.join([repr(m) for m in missing]),</system-out>
		</testcase>
		<testcase name="Mutant #90" file="mako/parsetree.py" line="310">
			<system-out>        self.parent = None</system-out>
		</testcase>
		<testcase name="Mutant #91" file="mako/parsetree.py" line="311">
			<system-out>        self.nodes = []</system-out>
		</testcase>
		<testcase name="Mutant #92" file="mako/parsetree.py" line="314">
			<system-out>        return self.parent is None</system-out>
		</testcase>
		<testcase name="Mutant #93" file="mako/parsetree.py" line="320">
			<system-out>        undeclared_identifiers = set()</system-out>
		</testcase>
		<testcase name="Mutant #94" file="mako/parsetree.py" line="321">
			<system-out>        self.parsed_attributes = {}</system-out>
		</testcase>
		<testcase name="Mutant #95" file="mako/parsetree.py" line="323">
			<system-out>            if key in expressions:</system-out>
		</testcase>
		<testcase name="Mutant #96" file="mako/parsetree.py" line="324">
			<system-out>                expr = []</system-out>
		</testcase>
		<testcase name="Mutant #97" file="mako/parsetree.py" line="325">
			<system-out>                for x in re.compile(r&quot;(\${.+?})&quot;, re.S).split(</system-out>
		</testcase>
		<testcase name="Mutant #98" file="mako/parsetree.py" line="328">
			<system-out>                    m = re.compile(r&quot;^\${(.+?)}$&quot;, re.S).match(x)</system-out>
		</testcase>
		<testcase name="Mutant #99" file="mako/parsetree.py" line="328">
			<system-out>                    m = re.compile(r&quot;^\${(.+?)}$&quot;, re.S).match(x)</system-out>
		</testcase>
		<testcase name="Mutant #100" file="mako/parsetree.py" line="331">
			<system-out>                            m.group(1).rstrip(), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #101" file="mako/parsetree.py" line="332">
			<system-out>                        )</system-out>
		</testcase>
		<testcase name="Mutant #102" file="mako/parsetree.py" line="339">
			<system-out>                        )</system-out>
		</testcase>
		<testcase name="Mutant #103" file="mako/parsetree.py" line="340">
			<system-out>                        expr.append(&quot;(%s)&quot; % m.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #104" file="mako/parsetree.py" line="340">
			<system-out>                        expr.append(&quot;(%s)&quot; % m.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #105" file="mako/parsetree.py" line="340">
			<system-out>                        expr.append(&quot;(%s)&quot; % m.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #106" file="mako/parsetree.py" line="344">
			<system-out>                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #107" file="mako/parsetree.py" line="344">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -342,7 +342,7 @@
                     else:
                         if x:
                             expr.append(repr(x))
-                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;&quot;)
+                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;XXXX&quot;)
             elif key in nonexpressions:
                 if re.search(r&quot;\${.+?}&quot;, self.attributes[key]):
                     raise exceptions.CompileException(
</failure>
			<system-out>                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #108" file="mako/parsetree.py" line="344">
			<system-out>                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #109" file="mako/parsetree.py" line="344">
			<system-out>                self.parsed_attributes[key] = &quot; + &quot;.join(expr) or repr(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #110" file="mako/parsetree.py" line="345">
			<system-out>            elif key in nonexpressions:</system-out>
		</testcase>
		<testcase name="Mutant #111" file="mako/parsetree.py" line="346">
			<system-out>                if re.search(r&quot;\${.+?}&quot;, self.attributes[key]):</system-out>
		</testcase>
		<testcase name="Mutant #112" file="mako/parsetree.py" line="348">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -346,7 +346,7 @@
             elif key in nonexpressions:
                 if re.search(r&quot;\${.+?}&quot;, self.attributes[key]):
                     raise exceptions.CompileException(
-                        &quot;Attibute '%s' in tag '%s' does not allow embedded &quot;
+                        &quot;XXAttibute '%s' in tag '%s' does not allow embedded XX&quot;
                         &quot;expressions&quot; % (key, self.keyword),
                         **self.exception_kwargs
                     )
</failure>
			<system-out>                        &quot;Attibute '%s' in tag '%s' does not allow embedded &quot;</system-out>
		</testcase>
		<testcase name="Mutant #113" file="mako/parsetree.py" line="349">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -347,7 +347,7 @@
                 if re.search(r&quot;\${.+?}&quot;, self.attributes[key]):
                     raise exceptions.CompileException(
                         &quot;Attibute '%s' in tag '%s' does not allow embedded &quot;
-                        &quot;expressions&quot; % (key, self.keyword),
+                        &quot;XXexpressionsXX&quot; % (key, self.keyword),
                         **self.exception_kwargs
                     )
                 self.parsed_attributes[key] = repr(self.attributes[key])
</failure>
			<system-out>                        &quot;expressions&quot; % (key, self.keyword),</system-out>
		</testcase>
		<testcase name="Mutant #114" file="mako/parsetree.py" line="349">
			<system-out>                        &quot;expressions&quot; % (key, self.keyword),</system-out>
		</testcase>
		<testcase name="Mutant #115" file="mako/parsetree.py" line="352">
			<system-out>                self.parsed_attributes[key] = repr(self.attributes[key])</system-out>
		</testcase>
		<testcase name="Mutant #116" file="mako/parsetree.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -353,7 +353,7 @@
                 self.parsed_attributes[key] = repr(self.attributes[key])
             else:
                 raise exceptions.CompileException(
-                    &quot;Invalid attribute for tag '%s': '%s'&quot;
+                    &quot;XXInvalid attribute for tag '%s': '%s'XX&quot;
                     % (self.keyword, key),
                     **self.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Invalid attribute for tag '%s': '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #117" file="mako/parsetree.py" line="356">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -354,7 +354,7 @@
             else:
                 raise exceptions.CompileException(
                     &quot;Invalid attribute for tag '%s': '%s'&quot;
-                    % (self.keyword, key),
+                    / (self.keyword, key),
                     **self.exception_kwargs
                 )
         self.expression_undeclared_identifiers = undeclared_identifiers
</failure>
			<system-out>                    % (self.keyword, key),</system-out>
		</testcase>
		<testcase name="Mutant #118" file="mako/parsetree.py" line="359">
			<system-out>        self.expression_undeclared_identifiers = undeclared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #119" file="mako/parsetree.py" line="368">
			<system-out>        return &quot;%s(%r, %s, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #120" file="mako/parsetree.py" line="368">
			<system-out>        return &quot;%s(%r, %s, %r, %r)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #121" file="mako/parsetree.py" line="378">
			<system-out>    __keyword__ = &quot;include&quot;</system-out>
		</testcase>
		<testcase name="Mutant #122" file="mako/parsetree.py" line="378">
			<system-out>    __keyword__ = &quot;include&quot;</system-out>
		</testcase>
		<testcase name="Mutant #123" file="mako/parsetree.py" line="384">
			<system-out>            (&quot;file&quot;, &quot;import&quot;, &quot;args&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #124" file="mako/parsetree.py" line="384">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -382,7 +382,7 @@
         super(IncludeTag, self).__init__(
             keyword,
             attributes,
-            (&quot;file&quot;, &quot;import&quot;, &quot;args&quot;),
+            (&quot;file&quot;, &quot;XXimportXX&quot;, &quot;args&quot;),
             (),
             (&quot;file&quot;,),
             **kwargs
</failure>
			<system-out>            (&quot;file&quot;, &quot;import&quot;, &quot;args&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #125" file="mako/parsetree.py" line="384">
			<system-out>            (&quot;file&quot;, &quot;import&quot;, &quot;args&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #126" file="mako/parsetree.py" line="386">
			<system-out>            (&quot;file&quot;,),</system-out>
		</testcase>
		<testcase name="Mutant #127" file="mako/parsetree.py" line="390">
			<system-out>            &quot;__DUMMY(%s)&quot; % attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #128" file="mako/parsetree.py" line="390">
			<system-out>            &quot;__DUMMY(%s)&quot; % attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #129" file="mako/parsetree.py" line="390">
			<system-out>            &quot;__DUMMY(%s)&quot; % attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #130" file="mako/parsetree.py" line="390">
			<system-out>            &quot;__DUMMY(%s)&quot; % attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #131" file="mako/parsetree.py" line="391">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #132" file="mako/parsetree.py" line="398">
			<system-out>            set([&quot;__DUMMY&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #133" file="mako/parsetree.py" line="399">
			<system-out>        ).difference(self.page_args.declared_identifiers)</system-out>
		</testcase>
		<testcase name="Mutant #134" file="mako/parsetree.py" line="406">
			<system-out>    __keyword__ = &quot;namespace&quot;</system-out>
		</testcase>
		<testcase name="Mutant #135" file="mako/parsetree.py" line="406">
			<system-out>    __keyword__ = &quot;namespace&quot;</system-out>
		</testcase>
		<testcase name="Mutant #136" file="mako/parsetree.py" line="412">
			<system-out>            (&quot;file&quot;,),</system-out>
		</testcase>
		<testcase name="Mutant #137" file="mako/parsetree.py" line="413">
			<system-out>            (&quot;name&quot;, &quot;inheritable&quot;, &quot;import&quot;, &quot;module&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #138" file="mako/parsetree.py" line="413">
			<system-out>            (&quot;name&quot;, &quot;inheritable&quot;, &quot;import&quot;, &quot;module&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #139" file="mako/parsetree.py" line="413">
			<system-out>            (&quot;name&quot;, &quot;inheritable&quot;, &quot;import&quot;, &quot;module&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #140" file="mako/parsetree.py" line="413">
			<system-out>            (&quot;name&quot;, &quot;inheritable&quot;, &quot;import&quot;, &quot;module&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #141" file="mako/parsetree.py" line="418">
			<system-out>        self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))</system-out>
		</testcase>
		<testcase name="Mutant #142" file="mako/parsetree.py" line="418">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -416,7 +416,7 @@
             **kwargs
         )
 
-        self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))
+        self.name = attributes.get(&quot;name&quot;, &quot;XX__anon_%sXX&quot; % hex(abs(id(self))))
         if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:
             raise exceptions.CompileException(
                 &quot;'name' and/or 'import' attributes are required &quot;
</failure>
			<system-out>        self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))</system-out>
		</testcase>
		<testcase name="Mutant #143" file="mako/parsetree.py" line="418">
			<system-out>        self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))</system-out>
		</testcase>
		<testcase name="Mutant #144" file="mako/parsetree.py" line="418">
			<system-out>        self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))</system-out>
		</testcase>
		<testcase name="Mutant #145" file="mako/parsetree.py" line="419">
			<system-out>        if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #146" file="mako/parsetree.py" line="419">
			<system-out>        if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #147" file="mako/parsetree.py" line="419">
			<system-out>        if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #148" file="mako/parsetree.py" line="419">
			<system-out>        if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #149" file="mako/parsetree.py" line="419">
			<system-out>        if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #150" file="mako/parsetree.py" line="421">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -419,7 +419,7 @@
         self.name = attributes.get(&quot;name&quot;, &quot;__anon_%s&quot; % hex(abs(id(self))))
         if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:
             raise exceptions.CompileException(
-                &quot;'name' and/or 'import' attributes are required &quot;
+                &quot;XX'name' and/or 'import' attributes are required XX&quot;
                 &quot;for &lt;%namespace&gt;&quot;,
                 **self.exception_kwargs
             )
</failure>
			<system-out>                &quot;'name' and/or 'import' attributes are required &quot;</system-out>
		</testcase>
		<testcase name="Mutant #151" file="mako/parsetree.py" line="422">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -420,7 +420,7 @@
         if &quot;name&quot; not in attributes and &quot;import&quot; not in attributes:
             raise exceptions.CompileException(
                 &quot;'name' and/or 'import' attributes are required &quot;
-                &quot;for &lt;%namespace&gt;&quot;,
+                &quot;XXfor &lt;%namespace&gt;XX&quot;,
                 **self.exception_kwargs
             )
         if &quot;file&quot; in attributes and &quot;module&quot; in attributes:
</failure>
			<system-out>                &quot;for &lt;%namespace&gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #152" file="mako/parsetree.py" line="425">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -423,7 +423,7 @@
                 &quot;for &lt;%namespace&gt;&quot;,
                 **self.exception_kwargs
             )
-        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:
+        if &quot;XXfileXX&quot; in attributes and &quot;module&quot; in attributes:
             raise exceptions.CompileException(
                 &quot;&lt;%namespace&gt; may only have one of 'file' or 'module'&quot;,
                 **self.exception_kwargs
</failure>
			<system-out>        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #153" file="mako/parsetree.py" line="425">
			<system-out>        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #154" file="mako/parsetree.py" line="425">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -423,7 +423,7 @@
                 &quot;for &lt;%namespace&gt;&quot;,
                 **self.exception_kwargs
             )
-        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:
+        if &quot;file&quot; in attributes and &quot;XXmoduleXX&quot; in attributes:
             raise exceptions.CompileException(
                 &quot;&lt;%namespace&gt; may only have one of 'file' or 'module'&quot;,
                 **self.exception_kwargs
</failure>
			<system-out>        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #155" file="mako/parsetree.py" line="425">
			<system-out>        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #156" file="mako/parsetree.py" line="425">
			<system-out>        if &quot;file&quot; in attributes and &quot;module&quot; in attributes:</system-out>
		</testcase>
		<testcase name="Mutant #157" file="mako/parsetree.py" line="427">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -425,7 +425,7 @@
             )
         if &quot;file&quot; in attributes and &quot;module&quot; in attributes:
             raise exceptions.CompileException(
-                &quot;&lt;%namespace&gt; may only have one of 'file' or 'module'&quot;,
+                &quot;XX&lt;%namespace&gt; may only have one of 'file' or 'module'XX&quot;,
                 **self.exception_kwargs
             )
 
</failure>
			<system-out>                &quot;&lt;%namespace&gt; may only have one of 'file' or 'module'&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #158" file="mako/parsetree.py" line="436">
			<system-out>    __keyword__ = &quot;text&quot;</system-out>
		</testcase>
		<testcase name="Mutant #159" file="mako/parsetree.py" line="436">
			<system-out>    __keyword__ = &quot;text&quot;</system-out>
		</testcase>
		<testcase name="Mutant #160" file="mako/parsetree.py" line="440">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -438,7 +438,7 @@
 
     def __init__(self, keyword, attributes, **kwargs):
         super(TextTag, self).__init__(
-            keyword, attributes, (), (&quot;filter&quot;), (), **kwargs
+            keyword, attributes, (), (&quot;XXfilterXX&quot;), (), **kwargs
         )
         self.filter_args = ast.ArgumentList(
             attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs
</failure>
			<system-out>            keyword, attributes, (), (&quot;filter&quot;), (), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #161" file="mako/parsetree.py" line="443">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #162" file="mako/parsetree.py" line="443">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #163" file="mako/parsetree.py" line="444">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #164" file="mako/parsetree.py" line="453">
			<system-out>    __keyword__ = &quot;def&quot;</system-out>
		</testcase>
		<testcase name="Mutant #165" file="mako/parsetree.py" line="453">
			<system-out>    __keyword__ = &quot;def&quot;</system-out>
		</testcase>
		<testcase name="Mutant #166" file="mako/parsetree.py" line="456">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #167" file="mako/parsetree.py" line="456">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #168" file="mako/parsetree.py" line="456">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #169" file="mako/parsetree.py" line="457">
			<system-out>            c for c in attributes if c.startswith(&quot;cache_&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #170" file="mako/parsetree.py" line="458">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #171" file="mako/parsetree.py" line="464">
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #172" file="mako/parsetree.py" line="464">
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #173" file="mako/parsetree.py" line="464">
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #174" file="mako/parsetree.py" line="465">
			<system-out>            (&quot;name&quot;,),</system-out>
		</testcase>
		<testcase name="Mutant #175" file="mako/parsetree.py" line="468">
			<system-out>        name = attributes[&quot;name&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #176" file="mako/parsetree.py" line="468">
			<system-out>        name = attributes[&quot;name&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #177" file="mako/parsetree.py" line="469">
			<system-out>        if re.match(r&quot;^[\w_]+$&quot;, name):</system-out>
		</testcase>
		<testcase name="Mutant #178" file="mako/parsetree.py" line="471">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -469,7 +469,7 @@
         name = attributes[&quot;name&quot;]
         if re.match(r&quot;^[\w_]+$&quot;, name):
             raise exceptions.CompileException(
-                &quot;Missing parenthesis in %def&quot;, **self.exception_kwargs
+                &quot;XXMissing parenthesis in %defXX&quot;, **self.exception_kwargs
             )
         self.function_decl = ast.FunctionDecl(
             &quot;def &quot; + name + &quot;:pass&quot;, **self.exception_kwargs
</failure>
			<system-out>                &quot;Missing parenthesis in %def&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #179" file="mako/parsetree.py" line="474">
			<system-out>            &quot;def &quot; + name + &quot;:pass&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #180" file="mako/parsetree.py" line="474">
			<system-out>            &quot;def &quot; + name + &quot;:pass&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #181" file="mako/parsetree.py" line="474">
			<system-out>            &quot;def &quot; + name + &quot;:pass&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #182" file="mako/parsetree.py" line="474">
			<system-out>            &quot;def &quot; + name + &quot;:pass&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #183" file="mako/parsetree.py" line="475">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #184" file="mako/parsetree.py" line="476">
			<system-out>        self.name = self.function_decl.funcname</system-out>
		</testcase>
		<testcase name="Mutant #185" file="mako/parsetree.py" line="477">
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #186" file="mako/parsetree.py" line="477">
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #187" file="mako/parsetree.py" line="477">
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #188" file="mako/parsetree.py" line="479">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #189" file="mako/parsetree.py" line="479">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #190" file="mako/parsetree.py" line="480">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #191" file="mako/parsetree.py" line="482">
			<system-out>    is_anonymous = False</system-out>
		</testcase>
		<testcase name="Mutant #192" file="mako/parsetree.py" line="482">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -480,7 +480,7 @@
             attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs
         )
 
-    is_anonymous = False
+    is_anonymous = None
     is_block = False
 
     @property
</failure>
			<system-out>    is_anonymous = False</system-out>
		</testcase>
		<testcase name="Mutant #193" file="mako/parsetree.py" line="483">
			<system-out>    is_block = False</system-out>
		</testcase>
		<testcase name="Mutant #194" file="mako/parsetree.py" line="483">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -481,7 +481,7 @@
         )
 
     is_anonymous = False
-    is_block = False
+    is_block = None
 
     @property
     def funcname(self):
</failure>
			<system-out>    is_block = False</system-out>
		</testcase>
		<testcase name="Mutant #195" file="mako/parsetree.py" line="485">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #196" file="mako/parsetree.py" line="496">
			<system-out>        res = []</system-out>
		</testcase>
		<testcase name="Mutant #197" file="mako/parsetree.py" line="498">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -496,7 +496,7 @@
     def undeclared_identifiers(self):
         res = []
         for c in self.function_decl.defaults:
-            res += list(
+            res = list(
                 ast.PythonCode(
                     c, **self.exception_kwargs
                 ).undeclared_identifiers
</failure>
			<system-out>            res += list(</system-out>
		</testcase>
		<testcase name="Mutant #198" file="mako/parsetree.py" line="498">
			<system-out>            res += list(</system-out>
		</testcase>
		<testcase name="Mutant #199" file="mako/parsetree.py" line="516">
			<system-out>    __keyword__ = &quot;block&quot;</system-out>
		</testcase>
		<testcase name="Mutant #200" file="mako/parsetree.py" line="516">
			<system-out>    __keyword__ = &quot;block&quot;</system-out>
		</testcase>
		<testcase name="Mutant #201" file="mako/parsetree.py" line="519">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -517,7 +517,7 @@
     __keyword__ = &quot;block&quot;
 
     def __init__(self, keyword, attributes, **kwargs):
-        expressions = [&quot;buffered&quot;, &quot;cached&quot;, &quot;args&quot;] + [
+        expressions = [&quot;XXbufferedXX&quot;, &quot;cached&quot;, &quot;args&quot;] + [
             c for c in attributes if c.startswith(&quot;cache_&quot;)
         ]
 
</failure>
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;, &quot;args&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #202" file="mako/parsetree.py" line="519">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;, &quot;args&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #203" file="mako/parsetree.py" line="519">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;, &quot;args&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #204" file="mako/parsetree.py" line="519">
			<system-out>        expressions = [&quot;buffered&quot;, &quot;cached&quot;, &quot;args&quot;] + [</system-out>
		</testcase>
		<testcase name="Mutant #205" file="mako/parsetree.py" line="520">
			<system-out>            c for c in attributes if c.startswith(&quot;cache_&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #206" file="mako/parsetree.py" line="521">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #207" file="mako/parsetree.py" line="527">
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #208" file="mako/parsetree.py" line="527">
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #209" file="mako/parsetree.py" line="527">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -525,7 +525,7 @@
             keyword,
             attributes,
             expressions,
-            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),
+            (&quot;name&quot;, &quot;filter&quot;, &quot;XXdecoratorXX&quot;),
             (),
             **kwargs
         )
</failure>
			<system-out>            (&quot;name&quot;, &quot;filter&quot;, &quot;decorator&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #210" file="mako/parsetree.py" line="531">
			<system-out>        name = attributes.get(&quot;name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #211" file="mako/parsetree.py" line="531">
			<system-out>        name = attributes.get(&quot;name&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #212" file="mako/parsetree.py" line="532">
			<system-out>        if name and not re.match(r&quot;^[\w_]+$&quot;, name):</system-out>
		</testcase>
		<testcase name="Mutant #213" file="mako/parsetree.py" line="532">
			<system-out>        if name and not re.match(r&quot;^[\w_]+$&quot;, name):</system-out>
		</testcase>
		<testcase name="Mutant #214" file="mako/parsetree.py" line="532">
			<system-out>        if name and not re.match(r&quot;^[\w_]+$&quot;, name):</system-out>
		</testcase>
		<testcase name="Mutant #215" file="mako/parsetree.py" line="534">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -532,7 +532,7 @@
         name = attributes.get(&quot;name&quot;)
         if name and not re.match(r&quot;^[\w_]+$&quot;, name):
             raise exceptions.CompileException(
-                &quot;%block may not specify an argument signature&quot;,
+                &quot;XX%block may not specify an argument signatureXX&quot;,
                 **self.exception_kwargs
             )
         if not name and attributes.get(&quot;args&quot;, None):
</failure>
			<system-out>                &quot;%block may not specify an argument signature&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #216" file="mako/parsetree.py" line="537">
			<system-out>        if not name and attributes.get(&quot;args&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #217" file="mako/parsetree.py" line="537">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -535,7 +535,7 @@
                 &quot;%block may not specify an argument signature&quot;,
                 **self.exception_kwargs
             )
-        if not name and attributes.get(&quot;args&quot;, None):
+        if not name and attributes.get(&quot;XXargsXX&quot;, None):
             raise exceptions.CompileException(
                 &quot;Only named %blocks may specify args&quot;, **self.exception_kwargs
             )
</failure>
			<system-out>        if not name and attributes.get(&quot;args&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #218" file="mako/parsetree.py" line="537">
			<system-out>        if not name and attributes.get(&quot;args&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #219" file="mako/parsetree.py" line="539">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -537,7 +537,7 @@
             )
         if not name and attributes.get(&quot;args&quot;, None):
             raise exceptions.CompileException(
-                &quot;Only named %blocks may specify args&quot;, **self.exception_kwargs
+                &quot;XXOnly named %blocks may specify argsXX&quot;, **self.exception_kwargs
             )
         self.body_decl = ast.FunctionArgs(
             attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs
</failure>
			<system-out>                &quot;Only named %blocks may specify args&quot;, **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #220" file="mako/parsetree.py" line="542">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #221" file="mako/parsetree.py" line="542">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #222" file="mako/parsetree.py" line="543">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #223" file="mako/parsetree.py" line="545">
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #224" file="mako/parsetree.py" line="546">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -544,7 +544,7 @@
         )
 
         self.name = name
-        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)
+        self.decorator = attributes.get(&quot;XXdecoratorXX&quot;, &quot;&quot;)
         self.filter_args = ast.ArgumentList(
             attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs
         )
</failure>
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #225" file="mako/parsetree.py" line="546">
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #226" file="mako/parsetree.py" line="546">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -544,7 +544,7 @@
         )
 
         self.name = name
-        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)
+        self.decorator = None
         self.filter_args = ast.ArgumentList(
             attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs
         )
</failure>
			<system-out>        self.decorator = attributes.get(&quot;decorator&quot;, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #227" file="mako/parsetree.py" line="548">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #228" file="mako/parsetree.py" line="548">
			<system-out>            attributes.get(&quot;filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #229" file="mako/parsetree.py" line="549">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #230" file="mako/parsetree.py" line="551">
			<system-out>    is_block = True</system-out>
		</testcase>
		<testcase name="Mutant #231" file="mako/parsetree.py" line="551">
			<system-out>    is_block = True</system-out>
		</testcase>
		<testcase name="Mutant #232" file="mako/parsetree.py" line="553">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #233" file="mako/parsetree.py" line="555">
			<system-out>        return self.name is None</system-out>
		</testcase>
		<testcase name="Mutant #234" file="mako/parsetree.py" line="557">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #235" file="mako/parsetree.py" line="559">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -557,7 +557,7 @@
 
     @property
     def funcname(self):
-        return self.name or &quot;__M_anon_%d&quot; % (self.lineno,)
+        return self.name or &quot;XX__M_anon_%dXX&quot; % (self.lineno,)
 
     def get_argument_expressions(self, **kw):
         return self.body_decl.get_argument_expressions(**kw)
</failure>
			<system-out>        return self.name or &quot;__M_anon_%d&quot; % (self.lineno,)</system-out>
		</testcase>
		<testcase name="Mutant #236" file="mako/parsetree.py" line="559">
			<system-out>        return self.name or &quot;__M_anon_%d&quot; % (self.lineno,)</system-out>
		</testcase>
		<testcase name="Mutant #237" file="mako/parsetree.py" line="559">
			<system-out>        return self.name or &quot;__M_anon_%d&quot; % (self.lineno,)</system-out>
		</testcase>
		<testcase name="Mutant #238" file="mako/parsetree.py" line="576">
			<system-out>    __keyword__ = &quot;call&quot;</system-out>
		</testcase>
		<testcase name="Mutant #239" file="mako/parsetree.py" line="576">
			<system-out>    __keyword__ = &quot;call&quot;</system-out>
		</testcase>
		<testcase name="Mutant #240" file="mako/parsetree.py" line="580">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -578,7 +578,7 @@
 
     def __init__(self, keyword, attributes, **kwargs):
         super(CallTag, self).__init__(
-            keyword, attributes, (&quot;args&quot;), (&quot;expr&quot;,), (&quot;expr&quot;,), **kwargs
+            keyword, attributes, (&quot;XXargsXX&quot;), (&quot;expr&quot;,), (&quot;expr&quot;,), **kwargs
         )
         self.expression = attributes[&quot;expr&quot;]
         self.code = ast.PythonCode(self.expression, **self.exception_kwargs)
</failure>
			<system-out>            keyword, attributes, (&quot;args&quot;), (&quot;expr&quot;,), (&quot;expr&quot;,), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #241" file="mako/parsetree.py" line="580">
			<system-out>            keyword, attributes, (&quot;args&quot;), (&quot;expr&quot;,), (&quot;expr&quot;,), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #242" file="mako/parsetree.py" line="580">
			<system-out>            keyword, attributes, (&quot;args&quot;), (&quot;expr&quot;,), (&quot;expr&quot;,), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #243" file="mako/parsetree.py" line="582">
			<system-out>        self.expression = attributes[&quot;expr&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #244" file="mako/parsetree.py" line="582">
			<system-out>        self.expression = attributes[&quot;expr&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #245" file="mako/parsetree.py" line="583">
			<system-out>        self.code = ast.PythonCode(self.expression, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #246" file="mako/parsetree.py" line="585">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #247" file="mako/parsetree.py" line="585">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #248" file="mako/parsetree.py" line="586">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #249" file="mako/parsetree.py" line="600">
			<system-out>            namespace + &quot;:&quot; + defname,</system-out>
		</testcase>
		<testcase name="Mutant #250" file="mako/parsetree.py" line="600">
			<system-out>            namespace + &quot;:&quot; + defname,</system-out>
		</testcase>
		<testcase name="Mutant #251" file="mako/parsetree.py" line="600">
			<system-out>            namespace + &quot;:&quot; + defname,</system-out>
		</testcase>
		<testcase name="Mutant #252" file="mako/parsetree.py" line="602">
			<system-out>            tuple(attributes.keys()) + (&quot;args&quot;,),</system-out>
		</testcase>
		<testcase name="Mutant #253" file="mako/parsetree.py" line="602">
			<failure type="failure" message="bad_survived">--- mako/parsetree.py
+++ mako/parsetree.py
@@ -600,7 +600,7 @@
         super(CallNamespaceTag, self).__init__(
             namespace + &quot;:&quot; + defname,
             attributes,
-            tuple(attributes.keys()) + (&quot;args&quot;,),
+            tuple(attributes.keys()) + (&quot;XXargsXX&quot;,),
             (),
             (),
             **kwargs
</failure>
			<system-out>            tuple(attributes.keys()) + (&quot;args&quot;,),</system-out>
		</testcase>
		<testcase name="Mutant #254" file="mako/parsetree.py" line="608">
			<system-out>        self.expression = &quot;%s.%s(%s)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #255" file="mako/parsetree.py" line="608">
			<system-out>        self.expression = &quot;%s.%s(%s)&quot; % (</system-out>
		</testcase>
		<testcase name="Mutant #256" file="mako/parsetree.py" line="611">
			<system-out>            &quot;,&quot;.join(</system-out>
		</testcase>
		<testcase name="Mutant #257" file="mako/parsetree.py" line="613">
			<system-out>                    &quot;%s=%s&quot; % (k, v)</system-out>
		</testcase>
		<testcase name="Mutant #258" file="mako/parsetree.py" line="613">
			<system-out>                    &quot;%s=%s&quot; % (k, v)</system-out>
		</testcase>
		<testcase name="Mutant #259" file="mako/parsetree.py" line="615">
			<system-out>                    if k != &quot;args&quot;</system-out>
		</testcase>
		<testcase name="Mutant #260" file="mako/parsetree.py" line="615">
			<system-out>                    if k != &quot;args&quot;</system-out>
		</testcase>
		<testcase name="Mutant #261" file="mako/parsetree.py" line="618">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #262" file="mako/parsetree.py" line="619">
			<system-out>        self.code = ast.PythonCode(self.expression, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #263" file="mako/parsetree.py" line="621">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #264" file="mako/parsetree.py" line="621">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #265" file="mako/parsetree.py" line="622">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #266" file="mako/parsetree.py" line="634">
			<system-out>    __keyword__ = &quot;inherit&quot;</system-out>
		</testcase>
		<testcase name="Mutant #267" file="mako/parsetree.py" line="634">
			<system-out>    __keyword__ = &quot;inherit&quot;</system-out>
		</testcase>
		<testcase name="Mutant #268" file="mako/parsetree.py" line="638">
			<system-out>            keyword, attributes, (&quot;file&quot;,), (), (&quot;file&quot;,), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #269" file="mako/parsetree.py" line="638">
			<system-out>            keyword, attributes, (&quot;file&quot;,), (), (&quot;file&quot;,), **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #270" file="mako/parsetree.py" line="643">
			<system-out>    __keyword__ = &quot;page&quot;</system-out>
		</testcase>
		<testcase name="Mutant #271" file="mako/parsetree.py" line="643">
			<system-out>    __keyword__ = &quot;page&quot;</system-out>
		</testcase>
		<testcase name="Mutant #272" file="mako/parsetree.py" line="647">
			<system-out>            &quot;cached&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #273" file="mako/parsetree.py" line="648">
			<system-out>            &quot;args&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #274" file="mako/parsetree.py" line="649">
			<system-out>            &quot;expression_filter&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #275" file="mako/parsetree.py" line="650">
			<system-out>            &quot;enable_loop&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #276" file="mako/parsetree.py" line="651">
			<system-out>        ] + [c for c in attributes if c.startswith(&quot;cache_&quot;)]</system-out>
		</testcase>
		<testcase name="Mutant #277" file="mako/parsetree.py" line="651">
			<system-out>        ] + [c for c in attributes if c.startswith(&quot;cache_&quot;)]</system-out>
		</testcase>
		<testcase name="Mutant #278" file="mako/parsetree.py" line="651">
			<system-out>        ] + [c for c in attributes if c.startswith(&quot;cache_&quot;)]</system-out>
		</testcase>
		<testcase name="Mutant #279" file="mako/parsetree.py" line="657">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #280" file="mako/parsetree.py" line="657">
			<system-out>            attributes.get(&quot;args&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #281" file="mako/parsetree.py" line="658">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #282" file="mako/parsetree.py" line="660">
			<system-out>            attributes.get(&quot;expression_filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #283" file="mako/parsetree.py" line="660">
			<system-out>            attributes.get(&quot;expression_filter&quot;, &quot;&quot;), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #284" file="mako/parsetree.py" line="661">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #285" file="mako/util.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -17,7 +17,7 @@
 
 
 def update_wrapper(decorated, fn):
-    decorated.__wrapped__ = fn
+    decorated.__wrapped__ = None
     decorated.__name__ = fn.__name__
     return decorated
 
</failure>
			<system-out>    decorated.__wrapped__ = fn</system-out>
		</testcase>
		<testcase name="Mutant #286" file="mako/util.py" line="20">
			<system-out>    decorated.__name__ = fn.__name__</system-out>
		</testcase>
		<testcase name="Mutant #287" file="mako/util.py" line="26">
			<system-out>        self.group = group</system-out>
		</testcase>
		<testcase name="Mutant #288" file="mako/util.py" line="27">
			<system-out>        self.impls = {}</system-out>
		</testcase>
		<testcase name="Mutant #289" file="mako/util.py" line="30">
			<system-out>        if name in self.impls:</system-out>
		</testcase>
		<testcase name="Mutant #290" file="mako/util.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -34,7 +34,7 @@
             import pkg_resources
 
             for impl in pkg_resources.iter_entry_points(self.group, name):
-                self.impls[name] = impl.load
+                self.impls[name] = None
                 return impl.load()
             else:
                 from mako import exceptions
</failure>
			<system-out>                self.impls[name] = impl.load</system-out>
		</testcase>
		<testcase name="Mutant #291" file="mako/util.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -40,7 +40,7 @@
                 from mako import exceptions
 
                 raise exceptions.RuntimeException(
-                    &quot;Can't load plugin %s %s&quot; % (self.group, name)
+                    &quot;XXCan't load plugin %s %sXX&quot; % (self.group, name)
                 )
 
     def register(self, name, modulepath, objname):
</failure>
			<system-out>                    &quot;Can't load plugin %s %s&quot; % (self.group, name)</system-out>
		</testcase>
		<testcase name="Mutant #292" file="mako/util.py" line="42">
			<system-out>                    &quot;Can't load plugin %s %s&quot; % (self.group, name)</system-out>
		</testcase>
		<testcase name="Mutant #293" file="mako/util.py" line="47">
			<system-out>            mod = __import__(modulepath)</system-out>
		</testcase>
		<testcase name="Mutant #294" file="mako/util.py" line="48">
			<system-out>            for token in modulepath.split(&quot;.&quot;)[1:]:</system-out>
		</testcase>
		<testcase name="Mutant #295" file="mako/util.py" line="48">
			<system-out>            for token in modulepath.split(&quot;.&quot;)[1:]:</system-out>
		</testcase>
		<testcase name="Mutant #296" file="mako/util.py" line="49">
			<system-out>                mod = getattr(mod, token)</system-out>
		</testcase>
		<testcase name="Mutant #297" file="mako/util.py" line="52">
			<system-out>        self.impls[name] = load</system-out>
		</testcase>
		<testcase name="Mutant #298" file="mako/util.py" line="58">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -56,7 +56,7 @@
 def verify_directory(dir_):
     &quot;&quot;&quot;create and/or verify a filesystem directory.&quot;&quot;&quot;
 
-    tries = 0
+    tries = 1
 
     while not os.path.exists(dir_):
         try:
</failure>
			<system-out>    tries = 0</system-out>
		</testcase>
		<testcase name="Mutant #299" file="mako/util.py" line="58">
			<system-out>    tries = 0</system-out>
		</testcase>
		<testcase name="Mutant #300" file="mako/util.py" line="60">
			<system-out>    while not os.path.exists(dir_):</system-out>
		</testcase>
		<testcase name="Mutant #301" file="mako/util.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -60,7 +60,7 @@
 
     while not os.path.exists(dir_):
         try:
-            tries += 1
+            tries = 1
             os.makedirs(dir_, compat.octal(&quot;0775&quot;))
         except:
             if tries &gt; 5:
</failure>
			<system-out>            tries += 1</system-out>
		</testcase>
		<testcase name="Mutant #302" file="mako/util.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -60,7 +60,7 @@
 
     while not os.path.exists(dir_):
         try:
-            tries += 1
+            tries -= 1
             os.makedirs(dir_, compat.octal(&quot;0775&quot;))
         except:
             if tries &gt; 5:
</failure>
			<system-out>            tries += 1</system-out>
		</testcase>
		<testcase name="Mutant #303" file="mako/util.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -60,7 +60,7 @@
 
     while not os.path.exists(dir_):
         try:
-            tries += 1
+            tries += 2
             os.makedirs(dir_, compat.octal(&quot;0775&quot;))
         except:
             if tries &gt; 5:
</failure>
			<system-out>            tries += 1</system-out>
		</testcase>
		<testcase name="Mutant #304" file="mako/util.py" line="63">
			<system-out>            os.makedirs(dir_, compat.octal(&quot;0775&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #305" file="mako/util.py" line="65">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -63,7 +63,7 @@
             tries += 1
             os.makedirs(dir_, compat.octal(&quot;0775&quot;))
         except:
-            if tries &gt; 5:
+            if tries &gt;= 5:
                 raise
 
 
</failure>
			<system-out>            if tries &gt; 5:</system-out>
		</testcase>
		<testcase name="Mutant #306" file="mako/util.py" line="65">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -63,7 +63,7 @@
             tries += 1
             os.makedirs(dir_, compat.octal(&quot;0775&quot;))
         except:
-            if tries &gt; 5:
+            if tries &gt; 6:
                 raise
 
 
</failure>
			<system-out>            if tries &gt; 5:</system-out>
		</testcase>
		<testcase name="Mutant #307" file="mako/util.py" line="70">
			<system-out>    if x is None:</system-out>
		</testcase>
		<testcase name="Mutant #308" file="mako/util.py" line="72">
			<system-out>    if not isinstance(x, (list, tuple)):</system-out>
		</testcase>
		<testcase name="Mutant #309" file="mako/util.py" line="83">
			<system-out>        self.fget = fget</system-out>
		</testcase>
		<testcase name="Mutant #310" file="mako/util.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -82,7 +82,7 @@
 
     def __init__(self, fget, doc=None):
         self.fget = fget
-        self.__doc__ = doc or fget.__doc__
+        self.__doc__ = doc and fget.__doc__
         self.__name__ = fget.__name__
 
     def __get__(self, obj, cls):
</failure>
			<system-out>        self.__doc__ = doc or fget.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #311" file="mako/util.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -82,7 +82,7 @@
 
     def __init__(self, fget, doc=None):
         self.fget = fget
-        self.__doc__ = doc or fget.__doc__
+        self.__doc__ = None
         self.__name__ = fget.__name__
 
     def __get__(self, obj, cls):
</failure>
			<system-out>        self.__doc__ = doc or fget.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #312" file="mako/util.py" line="85">
			<system-out>        self.__name__ = fget.__name__</system-out>
		</testcase>
		<testcase name="Mutant #313" file="mako/util.py" line="88">
			<system-out>        if obj is None:</system-out>
		</testcase>
		<testcase name="Mutant #314" file="mako/util.py" line="90">
			<system-out>        obj.__dict__[self.__name__] = result = self.fget(obj)</system-out>
		</testcase>
		<testcase name="Mutant #315" file="mako/util.py" line="105">
			<system-out>        self.fget = fget</system-out>
		</testcase>
		<testcase name="Mutant #316" file="mako/util.py" line="106">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -104,7 +104,7 @@
 
     def __init__(self, fget, doc=None):
         self.fget = fget
-        self.__doc__ = doc or fget.__doc__
+        self.__doc__ = doc and fget.__doc__
         self.__name__ = fget.__name__
 
     def __get__(self, obj, cls):
</failure>
			<system-out>        self.__doc__ = doc or fget.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #317" file="mako/util.py" line="106">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -104,7 +104,7 @@
 
     def __init__(self, fget, doc=None):
         self.fget = fget
-        self.__doc__ = doc or fget.__doc__
+        self.__doc__ = None
         self.__name__ = fget.__name__
 
     def __get__(self, obj, cls):
</failure>
			<system-out>        self.__doc__ = doc or fget.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #318" file="mako/util.py" line="107">
			<system-out>        self.__name__ = fget.__name__</system-out>
		</testcase>
		<testcase name="Mutant #319" file="mako/util.py" line="110">
			<system-out>        if obj is None:</system-out>
		</testcase>
		<testcase name="Mutant #320" file="mako/util.py" line="114">
			<system-out>            result = self.fget(obj, *args, **kw)</system-out>
		</testcase>
		<testcase name="Mutant #321" file="mako/util.py" line="119">
			<system-out>            memo.__name__ = self.__name__</system-out>
		</testcase>
		<testcase name="Mutant #322" file="mako/util.py" line="120">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -118,7 +118,7 @@
                 return result
 
             memo.__name__ = self.__name__
-            memo.__doc__ = self.__doc__
+            memo.__doc__ = None
             obj.__dict__[self.__name__] = memo
             return result
 
</failure>
			<system-out>            memo.__doc__ = self.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #323" file="mako/util.py" line="121">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -119,7 +119,7 @@
 
             memo.__name__ = self.__name__
             memo.__doc__ = self.__doc__
-            obj.__dict__[self.__name__] = memo
+            obj.__dict__[self.__name__] = None
             return result
 
         oneshot.__name__ = self.__name__
</failure>
			<system-out>            obj.__dict__[self.__name__] = memo</system-out>
		</testcase>
		<testcase name="Mutant #324" file="mako/util.py" line="124">
			<system-out>        oneshot.__name__ = self.__name__</system-out>
		</testcase>
		<testcase name="Mutant #325" file="mako/util.py" line="125">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -123,7 +123,7 @@
             return result
 
         oneshot.__name__ = self.__name__
-        oneshot.__doc__ = self.__doc__
+        oneshot.__doc__ = None
         return oneshot
 
 
</failure>
			<system-out>        oneshot.__doc__ = self.__doc__</system-out>
		</testcase>
		<testcase name="Mutant #326" file="mako/util.py" line="137">
			<system-out>        x = SetLikeDict(**self)</system-out>
		</testcase>
		<testcase name="Mutant #327" file="mako/util.py" line="147">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -145,7 +145,7 @@
     &quot;&quot;&quot;a very rudimentary buffer that is faster than StringIO,
     but doesn't crash on unicode data like cStringIO.&quot;&quot;&quot;
 
-    def __init__(self, encoding=None, errors=&quot;strict&quot;, as_unicode=False):
+    def __init__(self, encoding=None, errors=&quot;XXstrictXX&quot;, as_unicode=False):
         self.data = collections.deque()
         self.encoding = encoding
         if as_unicode:
</failure>
			<system-out>    def __init__(self, encoding=None, errors=&quot;strict&quot;, as_unicode=False):</system-out>
		</testcase>
		<testcase name="Mutant #328" file="mako/util.py" line="147">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -145,7 +145,7 @@
     &quot;&quot;&quot;a very rudimentary buffer that is faster than StringIO,
     but doesn't crash on unicode data like cStringIO.&quot;&quot;&quot;
 
-    def __init__(self, encoding=None, errors=&quot;strict&quot;, as_unicode=False):
+    def __init__(self, encoding=None, errors=&quot;strict&quot;, as_unicode=True):
         self.data = collections.deque()
         self.encoding = encoding
         if as_unicode:
</failure>
			<system-out>    def __init__(self, encoding=None, errors=&quot;strict&quot;, as_unicode=False):</system-out>
		</testcase>
		<testcase name="Mutant #329" file="mako/util.py" line="148">
			<system-out>        self.data = collections.deque()</system-out>
		</testcase>
		<testcase name="Mutant #330" file="mako/util.py" line="149">
			<system-out>        self.encoding = encoding</system-out>
		</testcase>
		<testcase name="Mutant #331" file="mako/util.py" line="151">
			<system-out>            self.delim = compat.u(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #332" file="mako/util.py" line="151">
			<system-out>            self.delim = compat.u(&quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #333" file="mako/util.py" line="153">
			<system-out>            self.delim = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #334" file="mako/util.py" line="153">
			<system-out>            self.delim = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #335" file="mako/util.py" line="154">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -152,7 +152,7 @@
             self.delim = compat.u(&quot;&quot;)
         else:
             self.delim = &quot;&quot;
-        self.as_unicode = as_unicode
+        self.as_unicode = None
         self.errors = errors
         self.write = self.data.append
 
</failure>
			<system-out>        self.as_unicode = as_unicode</system-out>
		</testcase>
		<testcase name="Mutant #336" file="mako/util.py" line="155">
			<system-out>        self.errors = errors</system-out>
		</testcase>
		<testcase name="Mutant #337" file="mako/util.py" line="156">
			<system-out>        self.write = self.data.append</system-out>
		</testcase>
		<testcase name="Mutant #338" file="mako/util.py" line="159">
			<system-out>        self.data = collections.deque()</system-out>
		</testcase>
		<testcase name="Mutant #339" file="mako/util.py" line="160">
			<system-out>        self.write = self.data.append</system-out>
		</testcase>
		<testcase name="Mutant #340" file="mako/util.py" line="183">
			<error type="timeout" message="bad_timeout">--- mako/util.py
+++ mako/util.py
@@ -181,7 +181,7 @@
 
     class _Item(object):
         def __init__(self, key, value):
-            self.key = key
+            self.key = None
             self.value = value
             self.timestamp = timeit.default_timer()
 
</error>
			<system-out>            self.key = key</system-out>
		</testcase>
		<testcase name="Mutant #341" file="mako/util.py" line="184">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -182,7 +182,7 @@
     class _Item(object):
         def __init__(self, key, value):
             self.key = key
-            self.value = value
+            self.value = None
             self.timestamp = timeit.default_timer()
 
         def __repr__(self):
</failure>
			<system-out>            self.value = value</system-out>
		</testcase>
		<testcase name="Mutant #342" file="mako/util.py" line="185">
			<system-out>            self.timestamp = timeit.default_timer()</system-out>
		</testcase>
		<testcase name="Mutant #343" file="mako/util.py" line="190">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -188,7 +188,7 @@
         def __repr__(self):
             return repr(self.value)
 
-    def __init__(self, capacity, threshold=0.5):
+    def __init__(self, capacity, threshold=1.5):
         self.capacity = capacity
         self.threshold = threshold
 
</failure>
			<system-out>    def __init__(self, capacity, threshold=0.5):</system-out>
		</testcase>
		<testcase name="Mutant #344" file="mako/util.py" line="191">
			<system-out>        self.capacity = capacity</system-out>
		</testcase>
		<testcase name="Mutant #345" file="mako/util.py" line="192">
			<system-out>        self.threshold = threshold</system-out>
		</testcase>
		<testcase name="Mutant #346" file="mako/util.py" line="195">
			<system-out>        item = dict.__getitem__(self, key)</system-out>
		</testcase>
		<testcase name="Mutant #347" file="mako/util.py" line="196">
			<system-out>        item.timestamp = timeit.default_timer()</system-out>
		</testcase>
		<testcase name="Mutant #348" file="mako/util.py" line="203">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -201,7 +201,7 @@
         return [i.value for i in dict.values(self)]
 
     def setdefault(self, key, value):
-        if key in self:
+        if key not in self:
             return self[key]
         else:
             self[key] = value
</failure>
			<system-out>        if key in self:</system-out>
		</testcase>
		<testcase name="Mutant #349" file="mako/util.py" line="206">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -204,7 +204,7 @@
         if key in self:
             return self[key]
         else:
-            self[key] = value
+            self[key] = None
             return value
 
     def __setitem__(self, key, value):
</failure>
			<system-out>            self[key] = value</system-out>
		</testcase>
		<testcase name="Mutant #350" file="mako/util.py" line="210">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -208,7 +208,7 @@
             return value
 
     def __setitem__(self, key, value):
-        item = dict.get(self, key)
+        item = None
         if item is None:
             item = self._Item(key, value)
             dict.__setitem__(self, key, item)
</failure>
			<system-out>        item = dict.get(self, key)</system-out>
		</testcase>
		<testcase name="Mutant #351" file="mako/util.py" line="211">
			<system-out>        if item is None:</system-out>
		</testcase>
		<testcase name="Mutant #352" file="mako/util.py" line="212">
			<system-out>            item = self._Item(key, value)</system-out>
		</testcase>
		<testcase name="Mutant #353" file="mako/util.py" line="215">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -213,7 +213,7 @@
             item = self._Item(key, value)
             dict.__setitem__(self, key, item)
         else:
-            item.value = value
+            item.value = None
         self._manage_size()
 
     def _manage_size(self):
</failure>
			<system-out>            item.value = value</system-out>
		</testcase>
		<testcase name="Mutant #354" file="mako/util.py" line="219">
			<system-out>        while len(self) &gt; self.capacity + self.capacity * self.threshold:</system-out>
		</testcase>
		<testcase name="Mutant #355" file="mako/util.py" line="219">
			<error type="timeout" message="bad_timeout">--- mako/util.py
+++ mako/util.py
@@ -217,7 +217,7 @@
         self._manage_size()
 
     def _manage_size(self):
-        while len(self) &gt; self.capacity + self.capacity * self.threshold:
+        while len(self) &gt; self.capacity - self.capacity * self.threshold:
             bytime = sorted(
                 dict.values(self),
                 key=operator.attrgetter(&quot;timestamp&quot;),
</error>
			<system-out>        while len(self) &gt; self.capacity + self.capacity * self.threshold:</system-out>
		</testcase>
		<testcase name="Mutant #356" file="mako/util.py" line="219">
			<system-out>        while len(self) &gt; self.capacity + self.capacity * self.threshold:</system-out>
		</testcase>
		<testcase name="Mutant #357" file="mako/util.py" line="222">
			<system-out>                key=operator.attrgetter(&quot;timestamp&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #358" file="mako/util.py" line="223">
			<system-out>                reverse=True,</system-out>
		</testcase>
		<testcase name="Mutant #359" file="mako/util.py" line="224">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #360" file="mako/util.py" line="231">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -229,7 +229,7 @@
                 except KeyError:
                     # if we couldn't find a key, most likely some other thread
                     # broke in on us. loop around and try again
-                    break
+                    continue
 
 
 # Regexp to match python magic encoding line
</failure>
			<system-out>                    break</system-out>
		</testcase>
		<testcase name="Mutant #361" file="mako/util.py" line="236">
			<system-out>    r&quot;[ \t\f]* \# .* coding[=:][ \t]*([-\w.]+)&quot;, re.VERBOSE</system-out>
		</testcase>
		<testcase name="Mutant #362" file="mako/util.py" line="237">
			<system-out>)</system-out>
		</testcase>
		<testcase name="Mutant #363" file="mako/util.py" line="250">
			<system-out>    pos = fp.tell()</system-out>
		</testcase>
		<testcase name="Mutant #364" file="mako/util.py" line="251">
			<system-out>    fp.seek(0)</system-out>
		</testcase>
		<testcase name="Mutant #365" file="mako/util.py" line="253">
			<system-out>        line1 = fp.readline()</system-out>
		</testcase>
		<testcase name="Mutant #366" file="mako/util.py" line="254">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -252,7 +252,7 @@
     fp.seek(0)
     try:
         line1 = fp.readline()
-        has_bom = line1.startswith(codecs.BOM_UTF8)
+        has_bom = None
         if has_bom:
             line1 = line1[len(codecs.BOM_UTF8) :]
 
</failure>
			<system-out>        has_bom = line1.startswith(codecs.BOM_UTF8)</system-out>
		</testcase>
		<testcase name="Mutant #367" file="mako/util.py" line="256">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -254,7 +254,7 @@
         line1 = fp.readline()
         has_bom = line1.startswith(codecs.BOM_UTF8)
         if has_bom:
-            line1 = line1[len(codecs.BOM_UTF8) :]
+            line1 = None
 
         m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))
         if not m:
</failure>
			<system-out>            line1 = line1[len(codecs.BOM_UTF8) :]</system-out>
		</testcase>
		<testcase name="Mutant #368" file="mako/util.py" line="258">
			<system-out>        m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #369" file="mako/util.py" line="258">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -256,7 +256,7 @@
         if has_bom:
             line1 = line1[len(codecs.BOM_UTF8) :]
 
-        m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))
+        m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;XXignoreXX&quot;))
         if not m:
             try:
                 parse(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))
</failure>
			<system-out>        m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #370" file="mako/util.py" line="258">
			<system-out>        m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #371" file="mako/util.py" line="259">
			<system-out>        if not m:</system-out>
		</testcase>
		<testcase name="Mutant #372" file="mako/util.py" line="261">
			<system-out>                parse(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #373" file="mako/util.py" line="261">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -259,7 +259,7 @@
         m = _PYTHON_MAGIC_COMMENT_re.match(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))
         if not m:
             try:
-                parse(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))
+                parse(line1.decode(&quot;ascii&quot;, &quot;XXignoreXX&quot;))
             except (ImportError, SyntaxError):
                 # Either it's a real syntax error, in which case the source
                 # is not valid python source, or line2 is a continuation of
</failure>
			<system-out>                parse(line1.decode(&quot;ascii&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #374" file="mako/util.py" line="269">
			<system-out>                line2 = fp.readline()</system-out>
		</testcase>
		<testcase name="Mutant #375" file="mako/util.py" line="271">
			<system-out>                    line2.decode(&quot;ascii&quot;, &quot;ignore&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #376" file="mako/util.py" line="271">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -269,7 +269,7 @@
             else:
                 line2 = fp.readline()
                 m = _PYTHON_MAGIC_COMMENT_re.match(
-                    line2.decode(&quot;ascii&quot;, &quot;ignore&quot;)
+                    line2.decode(&quot;ascii&quot;, &quot;XXignoreXX&quot;)
                 )
 
         if has_bom:
</failure>
			<system-out>                    line2.decode(&quot;ascii&quot;, &quot;ignore&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #377" file="mako/util.py" line="272">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -268,9 +268,7 @@
                 pass
             else:
                 line2 = fp.readline()
-                m = _PYTHON_MAGIC_COMMENT_re.match(
-                    line2.decode(&quot;ascii&quot;, &quot;ignore&quot;)
-                )
+                m = None
 
         if has_bom:
             if m:
</failure>
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #378" file="mako/util.py" line="277">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -275,7 +275,7 @@
         if has_bom:
             if m:
                 raise SyntaxError(
-                    &quot;python refuses to compile code with both a UTF8&quot;
+                    &quot;XXpython refuses to compile code with both a UTF8XX&quot;
                     &quot; byte-order-mark and a magic encoding comment&quot;
                 )
             return &quot;utf_8&quot;
</failure>
			<system-out>                    &quot;python refuses to compile code with both a UTF8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #379" file="mako/util.py" line="278">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -276,7 +276,7 @@
             if m:
                 raise SyntaxError(
                     &quot;python refuses to compile code with both a UTF8&quot;
-                    &quot; byte-order-mark and a magic encoding comment&quot;
+                    &quot;XX byte-order-mark and a magic encoding commentXX&quot;
                 )
             return &quot;utf_8&quot;
         elif m:
</failure>
			<system-out>                    &quot; byte-order-mark and a magic encoding comment&quot;</system-out>
		</testcase>
		<testcase name="Mutant #380" file="mako/util.py" line="280">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -278,7 +278,7 @@
                     &quot;python refuses to compile code with both a UTF8&quot;
                     &quot; byte-order-mark and a magic encoding comment&quot;
                 )
-            return &quot;utf_8&quot;
+            return &quot;XXutf_8XX&quot;
         elif m:
             return m.group(1)
         else:
</failure>
			<system-out>            return &quot;utf_8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #381" file="mako/util.py" line="282">
			<system-out>            return m.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #382" file="mako/util.py" line="295">
			<system-out>    keys = list(d.keys())</system-out>
		</testcase>
		<testcase name="Mutant #383" file="mako/util.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -295,7 +295,7 @@
     &quot;&quot;&quot;
     keys = list(d.keys())
     keys.sort()
-    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
+    return &quot;XX{XX&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
 
 
 def restore__ast(_ast):
</failure>
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #384" file="mako/util.py" line="297">
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #385" file="mako/util.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -295,7 +295,7 @@
     &quot;&quot;&quot;
     keys = list(d.keys())
     keys.sort()
-    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
+    return &quot;{&quot; + &quot;XX, XX&quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
 
 
 def restore__ast(_ast):
</failure>
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #386" file="mako/util.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -295,7 +295,7 @@
     &quot;&quot;&quot;
     keys = list(d.keys())
     keys.sort()
-    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
+    return &quot;{&quot; + &quot;, &quot;.join([&quot;XX%r: %rXX&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
 
 
 def restore__ast(_ast):
</failure>
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #387" file="mako/util.py" line="297">
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #388" file="mako/util.py" line="297">
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #389" file="mako/util.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -295,7 +295,7 @@
     &quot;&quot;&quot;
     keys = list(d.keys())
     keys.sort()
-    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;
+    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;XX}XX&quot;
 
 
 def restore__ast(_ast):
</failure>
			<system-out>    return &quot;{&quot; + &quot;, &quot;.join([&quot;%r: %r&quot; % (k, d[k]) for k in keys]) + &quot;}&quot;</system-out>
		</testcase>
		<testcase name="Mutant #390" file="mako/util.py" line="304">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -302,7 +302,7 @@
     &quot;&quot;&quot;Attempt to restore the required classes to the _ast module if it
     appears to be missing them
     &quot;&quot;&quot;
-    if hasattr(_ast, &quot;AST&quot;):
+    if hasattr(_ast, &quot;XXASTXX&quot;):
         return
     _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
     m = compile(
</failure>
			<system-out>    if hasattr(_ast, &quot;AST&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #391" file="mako/util.py" line="306">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -304,7 +304,7 @@
     &quot;&quot;&quot;
     if hasattr(_ast, &quot;AST&quot;):
         return
-    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
+    _ast.PyCF_ONLY_AST = 3 &lt;&lt; 9
     m = compile(
         &quot;&quot;&quot;\
 def foo(): pass
</failure>
			<system-out>    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9</system-out>
		</testcase>
		<testcase name="Mutant #392" file="mako/util.py" line="306">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -304,7 +304,7 @@
     &quot;&quot;&quot;
     if hasattr(_ast, &quot;AST&quot;):
         return
-    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
+    _ast.PyCF_ONLY_AST = 2 &gt;&gt; 9
     m = compile(
         &quot;&quot;&quot;\
 def foo(): pass
</failure>
			<system-out>    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9</system-out>
		</testcase>
		<testcase name="Mutant #393" file="mako/util.py" line="306">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -304,7 +304,7 @@
     &quot;&quot;&quot;
     if hasattr(_ast, &quot;AST&quot;):
         return
-    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
+    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 10
     m = compile(
         &quot;&quot;&quot;\
 def foo(): pass
</failure>
			<system-out>    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9</system-out>
		</testcase>
		<testcase name="Mutant #394" file="mako/util.py" line="306">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -304,7 +304,7 @@
     &quot;&quot;&quot;
     if hasattr(_ast, &quot;AST&quot;):
         return
-    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
+    _ast.PyCF_ONLY_AST = None
     m = compile(
         &quot;&quot;&quot;\
 def foo(): pass
</failure>
			<system-out>    _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9</system-out>
		</testcase>
		<testcase name="Mutant #395" file="mako/util.py" line="322">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -320,7 +320,7 @@
 (mako is baz == baz) is not baz != mako
 mako &gt; baz &lt; mako &gt;= baz &lt;= mako
 mako in baz not in mako&quot;&quot;&quot;,
-        &quot;&lt;unknown&gt;&quot;,
+        &quot;XX&lt;unknown&gt;XX&quot;,
         &quot;exec&quot;,
         _ast.PyCF_ONLY_AST,
     )
</failure>
			<system-out>        &quot;&lt;unknown&gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #396" file="mako/util.py" line="323">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -321,7 +321,7 @@
 mako &gt; baz &lt; mako &gt;= baz &lt;= mako
 mako in baz not in mako&quot;&quot;&quot;,
         &quot;&lt;unknown&gt;&quot;,
-        &quot;exec&quot;,
+        &quot;XXexecXX&quot;,
         _ast.PyCF_ONLY_AST,
     )
     _ast.Module = type(m)
</failure>
			<system-out>        &quot;exec&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #397" file="mako/util.py" line="325">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -305,25 +305,7 @@
     if hasattr(_ast, &quot;AST&quot;):
         return
     _ast.PyCF_ONLY_AST = 2 &lt;&lt; 9
-    m = compile(
-        &quot;&quot;&quot;\
-def foo(): pass
-class Bar(object): pass
-if False: pass
-baz = 'mako'
-1 + 2 - 3 * 4 / 5
-6 // 7 % 8 &lt;&lt; 9 &gt;&gt; 10
-11 &amp; 12 ^ 13 | 14
-15 and 16 or 17
--baz + (not +18) - ~17
-baz and 'foo' or 'bar'
-(mako is baz == baz) is not baz != mako
-mako &gt; baz &lt; mako &gt;= baz &lt;= mako
-mako in baz not in mako&quot;&quot;&quot;,
-        &quot;&lt;unknown&gt;&quot;,
-        &quot;exec&quot;,
-        _ast.PyCF_ONLY_AST,
-    )
+    m = None
     _ast.Module = type(m)
 
     for cls in _ast.Module.__mro__:
</failure>
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #398" file="mako/util.py" line="326">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -324,7 +324,7 @@
         &quot;exec&quot;,
         _ast.PyCF_ONLY_AST,
     )
-    _ast.Module = type(m)
+    _ast.Module = None
 
     for cls in _ast.Module.__mro__:
         if cls.__name__ == &quot;mod&quot;:
</failure>
			<system-out>    _ast.Module = type(m)</system-out>
		</testcase>
		<testcase name="Mutant #399" file="mako/util.py" line="329">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -327,7 +327,7 @@
     _ast.Module = type(m)
 
     for cls in _ast.Module.__mro__:
-        if cls.__name__ == &quot;mod&quot;:
+        if cls.__name__ != &quot;mod&quot;:
             _ast.mod = cls
         elif cls.__name__ == &quot;AST&quot;:
             _ast.AST = cls
</failure>
			<system-out>        if cls.__name__ == &quot;mod&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #400" file="mako/util.py" line="329">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -327,7 +327,7 @@
     _ast.Module = type(m)
 
     for cls in _ast.Module.__mro__:
-        if cls.__name__ == &quot;mod&quot;:
+        if cls.__name__ == &quot;XXmodXX&quot;:
             _ast.mod = cls
         elif cls.__name__ == &quot;AST&quot;:
             _ast.AST = cls
</failure>
			<system-out>        if cls.__name__ == &quot;mod&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #401" file="mako/util.py" line="330">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -328,7 +328,7 @@
 
     for cls in _ast.Module.__mro__:
         if cls.__name__ == &quot;mod&quot;:
-            _ast.mod = cls
+            _ast.mod = None
         elif cls.__name__ == &quot;AST&quot;:
             _ast.AST = cls
 
</failure>
			<system-out>            _ast.mod = cls</system-out>
		</testcase>
		<testcase name="Mutant #402" file="mako/util.py" line="331">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -329,7 +329,7 @@
     for cls in _ast.Module.__mro__:
         if cls.__name__ == &quot;mod&quot;:
             _ast.mod = cls
-        elif cls.__name__ == &quot;AST&quot;:
+        elif cls.__name__ != &quot;AST&quot;:
             _ast.AST = cls
 
     _ast.FunctionDef = type(m.body[0])
</failure>
			<system-out>        elif cls.__name__ == &quot;AST&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #403" file="mako/util.py" line="331">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -329,7 +329,7 @@
     for cls in _ast.Module.__mro__:
         if cls.__name__ == &quot;mod&quot;:
             _ast.mod = cls
-        elif cls.__name__ == &quot;AST&quot;:
+        elif cls.__name__ == &quot;XXASTXX&quot;:
             _ast.AST = cls
 
     _ast.FunctionDef = type(m.body[0])
</failure>
			<system-out>        elif cls.__name__ == &quot;AST&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #404" file="mako/util.py" line="332">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -330,7 +330,7 @@
         if cls.__name__ == &quot;mod&quot;:
             _ast.mod = cls
         elif cls.__name__ == &quot;AST&quot;:
-            _ast.AST = cls
+            _ast.AST = None
 
     _ast.FunctionDef = type(m.body[0])
     _ast.ClassDef = type(m.body[1])
</failure>
			<system-out>            _ast.AST = cls</system-out>
		</testcase>
		<testcase name="Mutant #405" file="mako/util.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -332,7 +332,7 @@
         elif cls.__name__ == &quot;AST&quot;:
             _ast.AST = cls
 
-    _ast.FunctionDef = type(m.body[0])
+    _ast.FunctionDef = type(m.body[1])
     _ast.ClassDef = type(m.body[1])
     _ast.If = type(m.body[2])
 
</failure>
			<system-out>    _ast.FunctionDef = type(m.body[0])</system-out>
		</testcase>
		<testcase name="Mutant #406" file="mako/util.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -332,7 +332,7 @@
         elif cls.__name__ == &quot;AST&quot;:
             _ast.AST = cls
 
-    _ast.FunctionDef = type(m.body[0])
+    _ast.FunctionDef = None
     _ast.ClassDef = type(m.body[1])
     _ast.If = type(m.body[2])
 
</failure>
			<system-out>    _ast.FunctionDef = type(m.body[0])</system-out>
		</testcase>
		<testcase name="Mutant #407" file="mako/util.py" line="335">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -333,7 +333,7 @@
             _ast.AST = cls
 
     _ast.FunctionDef = type(m.body[0])
-    _ast.ClassDef = type(m.body[1])
+    _ast.ClassDef = type(m.body[2])
     _ast.If = type(m.body[2])
 
     _ast.Name = type(m.body[3].targets[0])
</failure>
			<system-out>    _ast.ClassDef = type(m.body[1])</system-out>
		</testcase>
		<testcase name="Mutant #408" file="mako/util.py" line="335">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -333,7 +333,7 @@
             _ast.AST = cls
 
     _ast.FunctionDef = type(m.body[0])
-    _ast.ClassDef = type(m.body[1])
+    _ast.ClassDef = None
     _ast.If = type(m.body[2])
 
     _ast.Name = type(m.body[3].targets[0])
</failure>
			<system-out>    _ast.ClassDef = type(m.body[1])</system-out>
		</testcase>
		<testcase name="Mutant #409" file="mako/util.py" line="336">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -334,7 +334,7 @@
 
     _ast.FunctionDef = type(m.body[0])
     _ast.ClassDef = type(m.body[1])
-    _ast.If = type(m.body[2])
+    _ast.If = type(m.body[3])
 
     _ast.Name = type(m.body[3].targets[0])
     _ast.Store = type(m.body[3].targets[0].ctx)
</failure>
			<system-out>    _ast.If = type(m.body[2])</system-out>
		</testcase>
		<testcase name="Mutant #410" file="mako/util.py" line="336">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -334,7 +334,7 @@
 
     _ast.FunctionDef = type(m.body[0])
     _ast.ClassDef = type(m.body[1])
-    _ast.If = type(m.body[2])
+    _ast.If = None
 
     _ast.Name = type(m.body[3].targets[0])
     _ast.Store = type(m.body[3].targets[0].ctx)
</failure>
			<system-out>    _ast.If = type(m.body[2])</system-out>
		</testcase>
		<testcase name="Mutant #411" file="mako/util.py" line="338">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -336,7 +336,7 @@
     _ast.ClassDef = type(m.body[1])
     _ast.If = type(m.body[2])
 
-    _ast.Name = type(m.body[3].targets[0])
+    _ast.Name = type(m.body[4].targets[0])
     _ast.Store = type(m.body[3].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
</failure>
			<system-out>    _ast.Name = type(m.body[3].targets[0])</system-out>
		</testcase>
		<testcase name="Mutant #412" file="mako/util.py" line="338">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -336,7 +336,7 @@
     _ast.ClassDef = type(m.body[1])
     _ast.If = type(m.body[2])
 
-    _ast.Name = type(m.body[3].targets[0])
+    _ast.Name = type(m.body[3].targets[1])
     _ast.Store = type(m.body[3].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
</failure>
			<system-out>    _ast.Name = type(m.body[3].targets[0])</system-out>
		</testcase>
		<testcase name="Mutant #413" file="mako/util.py" line="338">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -336,7 +336,7 @@
     _ast.ClassDef = type(m.body[1])
     _ast.If = type(m.body[2])
 
-    _ast.Name = type(m.body[3].targets[0])
+    _ast.Name = None
     _ast.Store = type(m.body[3].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
</failure>
			<system-out>    _ast.Name = type(m.body[3].targets[0])</system-out>
		</testcase>
		<testcase name="Mutant #414" file="mako/util.py" line="339">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -337,7 +337,7 @@
     _ast.If = type(m.body[2])
 
     _ast.Name = type(m.body[3].targets[0])
-    _ast.Store = type(m.body[3].targets[0].ctx)
+    _ast.Store = type(m.body[4].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
     _ast.Sub = type(m.body[4].value.op)
</failure>
			<system-out>    _ast.Store = type(m.body[3].targets[0].ctx)</system-out>
		</testcase>
		<testcase name="Mutant #415" file="mako/util.py" line="339">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -337,7 +337,7 @@
     _ast.If = type(m.body[2])
 
     _ast.Name = type(m.body[3].targets[0])
-    _ast.Store = type(m.body[3].targets[0].ctx)
+    _ast.Store = type(m.body[3].targets[1].ctx)
     _ast.Str = type(m.body[3].value)
 
     _ast.Sub = type(m.body[4].value.op)
</failure>
			<system-out>    _ast.Store = type(m.body[3].targets[0].ctx)</system-out>
		</testcase>
		<testcase name="Mutant #416" file="mako/util.py" line="339">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -337,7 +337,7 @@
     _ast.If = type(m.body[2])
 
     _ast.Name = type(m.body[3].targets[0])
-    _ast.Store = type(m.body[3].targets[0].ctx)
+    _ast.Store = None
     _ast.Str = type(m.body[3].value)
 
     _ast.Sub = type(m.body[4].value.op)
</failure>
			<system-out>    _ast.Store = type(m.body[3].targets[0].ctx)</system-out>
		</testcase>
		<testcase name="Mutant #417" file="mako/util.py" line="340">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -338,7 +338,7 @@
 
     _ast.Name = type(m.body[3].targets[0])
     _ast.Store = type(m.body[3].targets[0].ctx)
-    _ast.Str = type(m.body[3].value)
+    _ast.Str = type(m.body[4].value)
 
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
</failure>
			<system-out>    _ast.Str = type(m.body[3].value)</system-out>
		</testcase>
		<testcase name="Mutant #418" file="mako/util.py" line="340">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -338,7 +338,7 @@
 
     _ast.Name = type(m.body[3].targets[0])
     _ast.Store = type(m.body[3].targets[0].ctx)
-    _ast.Str = type(m.body[3].value)
+    _ast.Str = None
 
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
</failure>
			<system-out>    _ast.Str = type(m.body[3].value)</system-out>
		</testcase>
		<testcase name="Mutant #419" file="mako/util.py" line="342">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -340,7 +340,7 @@
     _ast.Store = type(m.body[3].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
-    _ast.Sub = type(m.body[4].value.op)
+    _ast.Sub = type(m.body[5].value.op)
     _ast.Add = type(m.body[4].value.left.op)
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
</failure>
			<system-out>    _ast.Sub = type(m.body[4].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #420" file="mako/util.py" line="342">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -340,7 +340,7 @@
     _ast.Store = type(m.body[3].targets[0].ctx)
     _ast.Str = type(m.body[3].value)
 
-    _ast.Sub = type(m.body[4].value.op)
+    _ast.Sub = None
     _ast.Add = type(m.body[4].value.left.op)
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
</failure>
			<system-out>    _ast.Sub = type(m.body[4].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #421" file="mako/util.py" line="343">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -341,7 +341,7 @@
     _ast.Str = type(m.body[3].value)
 
     _ast.Sub = type(m.body[4].value.op)
-    _ast.Add = type(m.body[4].value.left.op)
+    _ast.Add = type(m.body[5].value.left.op)
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
 
</failure>
			<system-out>    _ast.Add = type(m.body[4].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #422" file="mako/util.py" line="343">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -341,7 +341,7 @@
     _ast.Str = type(m.body[3].value)
 
     _ast.Sub = type(m.body[4].value.op)
-    _ast.Add = type(m.body[4].value.left.op)
+    _ast.Add = None
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
 
</failure>
			<system-out>    _ast.Add = type(m.body[4].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #423" file="mako/util.py" line="344">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -342,7 +342,7 @@
 
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
-    _ast.Div = type(m.body[4].value.right.op)
+    _ast.Div = type(m.body[5].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
 
     _ast.RShift = type(m.body[5].value.op)
</failure>
			<system-out>    _ast.Div = type(m.body[4].value.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #424" file="mako/util.py" line="344">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -342,7 +342,7 @@
 
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
-    _ast.Div = type(m.body[4].value.right.op)
+    _ast.Div = None
     _ast.Mult = type(m.body[4].value.right.left.op)
 
     _ast.RShift = type(m.body[5].value.op)
</failure>
			<system-out>    _ast.Div = type(m.body[4].value.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #425" file="mako/util.py" line="345">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -343,7 +343,7 @@
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
     _ast.Div = type(m.body[4].value.right.op)
-    _ast.Mult = type(m.body[4].value.right.left.op)
+    _ast.Mult = type(m.body[5].value.right.left.op)
 
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
</failure>
			<system-out>    _ast.Mult = type(m.body[4].value.right.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #426" file="mako/util.py" line="345">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -343,7 +343,7 @@
     _ast.Sub = type(m.body[4].value.op)
     _ast.Add = type(m.body[4].value.left.op)
     _ast.Div = type(m.body[4].value.right.op)
-    _ast.Mult = type(m.body[4].value.right.left.op)
+    _ast.Mult = None
 
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
</failure>
			<system-out>    _ast.Mult = type(m.body[4].value.right.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #427" file="mako/util.py" line="347">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -345,7 +345,7 @@
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
 
-    _ast.RShift = type(m.body[5].value.op)
+    _ast.RShift = type(m.body[6].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
</failure>
			<system-out>    _ast.RShift = type(m.body[5].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #428" file="mako/util.py" line="347">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -345,7 +345,7 @@
     _ast.Div = type(m.body[4].value.right.op)
     _ast.Mult = type(m.body[4].value.right.left.op)
 
-    _ast.RShift = type(m.body[5].value.op)
+    _ast.RShift = None
     _ast.LShift = type(m.body[5].value.left.op)
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
</failure>
			<system-out>    _ast.RShift = type(m.body[5].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #429" file="mako/util.py" line="348">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -346,7 +346,7 @@
     _ast.Mult = type(m.body[4].value.right.left.op)
 
     _ast.RShift = type(m.body[5].value.op)
-    _ast.LShift = type(m.body[5].value.left.op)
+    _ast.LShift = type(m.body[6].value.left.op)
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
</failure>
			<system-out>    _ast.LShift = type(m.body[5].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #430" file="mako/util.py" line="348">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -346,7 +346,7 @@
     _ast.Mult = type(m.body[4].value.right.left.op)
 
     _ast.RShift = type(m.body[5].value.op)
-    _ast.LShift = type(m.body[5].value.left.op)
+    _ast.LShift = None
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
</failure>
			<system-out>    _ast.LShift = type(m.body[5].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #431" file="mako/util.py" line="349">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -347,7 +347,7 @@
 
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
-    _ast.Mod = type(m.body[5].value.left.left.op)
+    _ast.Mod = type(m.body[6].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
     _ast.BitOr = type(m.body[6].value.op)
</failure>
			<system-out>    _ast.Mod = type(m.body[5].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #432" file="mako/util.py" line="349">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -347,7 +347,7 @@
 
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
-    _ast.Mod = type(m.body[5].value.left.left.op)
+    _ast.Mod = None
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
     _ast.BitOr = type(m.body[6].value.op)
</failure>
			<system-out>    _ast.Mod = type(m.body[5].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #433" file="mako/util.py" line="350">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -348,7 +348,7 @@
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
     _ast.Mod = type(m.body[5].value.left.left.op)
-    _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
+    _ast.FloorDiv = type(m.body[6].value.left.left.left.op)
 
     _ast.BitOr = type(m.body[6].value.op)
     _ast.BitXor = type(m.body[6].value.left.op)
</failure>
			<system-out>    _ast.FloorDiv = type(m.body[5].value.left.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #434" file="mako/util.py" line="350">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -348,7 +348,7 @@
     _ast.RShift = type(m.body[5].value.op)
     _ast.LShift = type(m.body[5].value.left.op)
     _ast.Mod = type(m.body[5].value.left.left.op)
-    _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
+    _ast.FloorDiv = None
 
     _ast.BitOr = type(m.body[6].value.op)
     _ast.BitXor = type(m.body[6].value.left.op)
</failure>
			<system-out>    _ast.FloorDiv = type(m.body[5].value.left.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #435" file="mako/util.py" line="352">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -350,7 +350,7 @@
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
-    _ast.BitOr = type(m.body[6].value.op)
+    _ast.BitOr = type(m.body[7].value.op)
     _ast.BitXor = type(m.body[6].value.left.op)
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
</failure>
			<system-out>    _ast.BitOr = type(m.body[6].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #436" file="mako/util.py" line="352">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -350,7 +350,7 @@
     _ast.Mod = type(m.body[5].value.left.left.op)
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
-    _ast.BitOr = type(m.body[6].value.op)
+    _ast.BitOr = None
     _ast.BitXor = type(m.body[6].value.left.op)
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
</failure>
			<system-out>    _ast.BitOr = type(m.body[6].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #437" file="mako/util.py" line="353">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -351,7 +351,7 @@
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
     _ast.BitOr = type(m.body[6].value.op)
-    _ast.BitXor = type(m.body[6].value.left.op)
+    _ast.BitXor = type(m.body[7].value.left.op)
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
</failure>
			<system-out>    _ast.BitXor = type(m.body[6].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #438" file="mako/util.py" line="353">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -351,7 +351,7 @@
     _ast.FloorDiv = type(m.body[5].value.left.left.left.op)
 
     _ast.BitOr = type(m.body[6].value.op)
-    _ast.BitXor = type(m.body[6].value.left.op)
+    _ast.BitXor = None
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
</failure>
			<system-out>    _ast.BitXor = type(m.body[6].value.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #439" file="mako/util.py" line="354">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -352,7 +352,7 @@
 
     _ast.BitOr = type(m.body[6].value.op)
     _ast.BitXor = type(m.body[6].value.left.op)
-    _ast.BitAnd = type(m.body[6].value.left.left.op)
+    _ast.BitAnd = type(m.body[7].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
     _ast.And = type(m.body[7].value.values[0].op)
</failure>
			<system-out>    _ast.BitAnd = type(m.body[6].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #440" file="mako/util.py" line="354">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -352,7 +352,7 @@
 
     _ast.BitOr = type(m.body[6].value.op)
     _ast.BitXor = type(m.body[6].value.left.op)
-    _ast.BitAnd = type(m.body[6].value.left.left.op)
+    _ast.BitAnd = None
 
     _ast.Or = type(m.body[7].value.op)
     _ast.And = type(m.body[7].value.values[0].op)
</failure>
			<system-out>    _ast.BitAnd = type(m.body[6].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #441" file="mako/util.py" line="356">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -354,7 +354,7 @@
     _ast.BitXor = type(m.body[6].value.left.op)
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
-    _ast.Or = type(m.body[7].value.op)
+    _ast.Or = type(m.body[8].value.op)
     _ast.And = type(m.body[7].value.values[0].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
</failure>
			<system-out>    _ast.Or = type(m.body[7].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #442" file="mako/util.py" line="356">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -354,7 +354,7 @@
     _ast.BitXor = type(m.body[6].value.left.op)
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
-    _ast.Or = type(m.body[7].value.op)
+    _ast.Or = None
     _ast.And = type(m.body[7].value.values[0].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
</failure>
			<system-out>    _ast.Or = type(m.body[7].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #443" file="mako/util.py" line="357">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -355,7 +355,7 @@
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
-    _ast.And = type(m.body[7].value.values[0].op)
+    _ast.And = type(m.body[8].value.values[0].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
</failure>
			<system-out>    _ast.And = type(m.body[7].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #444" file="mako/util.py" line="357">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -355,7 +355,7 @@
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
-    _ast.And = type(m.body[7].value.values[0].op)
+    _ast.And = type(m.body[7].value.values[1].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
</failure>
			<system-out>    _ast.And = type(m.body[7].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #445" file="mako/util.py" line="357">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -355,7 +355,7 @@
     _ast.BitAnd = type(m.body[6].value.left.left.op)
 
     _ast.Or = type(m.body[7].value.op)
-    _ast.And = type(m.body[7].value.values[0].op)
+    _ast.And = None
 
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
</failure>
			<system-out>    _ast.And = type(m.body[7].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #446" file="mako/util.py" line="359">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -357,7 +357,7 @@
     _ast.Or = type(m.body[7].value.op)
     _ast.And = type(m.body[7].value.values[0].op)
 
-    _ast.Invert = type(m.body[8].value.right.op)
+    _ast.Invert = type(m.body[9].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
</failure>
			<system-out>    _ast.Invert = type(m.body[8].value.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #447" file="mako/util.py" line="359">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -357,7 +357,7 @@
     _ast.Or = type(m.body[7].value.op)
     _ast.And = type(m.body[7].value.values[0].op)
 
-    _ast.Invert = type(m.body[8].value.right.op)
+    _ast.Invert = None
     _ast.Not = type(m.body[8].value.left.right.op)
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
</failure>
			<system-out>    _ast.Invert = type(m.body[8].value.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #448" file="mako/util.py" line="360">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -358,7 +358,7 @@
     _ast.And = type(m.body[7].value.values[0].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
-    _ast.Not = type(m.body[8].value.left.right.op)
+    _ast.Not = type(m.body[9].value.left.right.op)
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
 
</failure>
			<system-out>    _ast.Not = type(m.body[8].value.left.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #449" file="mako/util.py" line="360">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -358,7 +358,7 @@
     _ast.And = type(m.body[7].value.values[0].op)
 
     _ast.Invert = type(m.body[8].value.right.op)
-    _ast.Not = type(m.body[8].value.left.right.op)
+    _ast.Not = None
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
 
</failure>
			<system-out>    _ast.Not = type(m.body[8].value.left.right.op)</system-out>
		</testcase>
		<testcase name="Mutant #450" file="mako/util.py" line="361">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -359,7 +359,7 @@
 
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
-    _ast.UAdd = type(m.body[8].value.left.right.operand.op)
+    _ast.UAdd = type(m.body[9].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
</failure>
			<system-out>    _ast.UAdd = type(m.body[8].value.left.right.operand.op)</system-out>
		</testcase>
		<testcase name="Mutant #451" file="mako/util.py" line="361">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -359,7 +359,7 @@
 
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
-    _ast.UAdd = type(m.body[8].value.left.right.operand.op)
+    _ast.UAdd = None
     _ast.USub = type(m.body[8].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
</failure>
			<system-out>    _ast.UAdd = type(m.body[8].value.left.right.operand.op)</system-out>
		</testcase>
		<testcase name="Mutant #452" file="mako/util.py" line="362">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -360,7 +360,7 @@
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
-    _ast.USub = type(m.body[8].value.left.left.op)
+    _ast.USub = type(m.body[9].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
</failure>
			<system-out>    _ast.USub = type(m.body[8].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #453" file="mako/util.py" line="362">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -360,7 +360,7 @@
     _ast.Invert = type(m.body[8].value.right.op)
     _ast.Not = type(m.body[8].value.left.right.op)
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
-    _ast.USub = type(m.body[8].value.left.left.op)
+    _ast.USub = None
 
     _ast.Or = type(m.body[9].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
</failure>
			<system-out>    _ast.USub = type(m.body[8].value.left.left.op)</system-out>
		</testcase>
		<testcase name="Mutant #454" file="mako/util.py" line="364">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -362,7 +362,7 @@
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
 
-    _ast.Or = type(m.body[9].value.op)
+    _ast.Or = type(m.body[10].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
</failure>
			<system-out>    _ast.Or = type(m.body[9].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #455" file="mako/util.py" line="364">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -362,7 +362,7 @@
     _ast.UAdd = type(m.body[8].value.left.right.operand.op)
     _ast.USub = type(m.body[8].value.left.left.op)
 
-    _ast.Or = type(m.body[9].value.op)
+    _ast.Or = None
     _ast.And = type(m.body[9].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
</failure>
			<system-out>    _ast.Or = type(m.body[9].value.op)</system-out>
		</testcase>
		<testcase name="Mutant #456" file="mako/util.py" line="365">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -363,7 +363,7 @@
     _ast.USub = type(m.body[8].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
-    _ast.And = type(m.body[9].value.values[0].op)
+    _ast.And = type(m.body[10].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
</failure>
			<system-out>    _ast.And = type(m.body[9].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #457" file="mako/util.py" line="365">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -363,7 +363,7 @@
     _ast.USub = type(m.body[8].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
-    _ast.And = type(m.body[9].value.values[0].op)
+    _ast.And = type(m.body[9].value.values[1].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
</failure>
			<system-out>    _ast.And = type(m.body[9].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #458" file="mako/util.py" line="365">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -363,7 +363,7 @@
     _ast.USub = type(m.body[8].value.left.left.op)
 
     _ast.Or = type(m.body[9].value.op)
-    _ast.And = type(m.body[9].value.values[0].op)
+    _ast.And = None
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
</failure>
			<system-out>    _ast.And = type(m.body[9].value.values[0].op)</system-out>
		</testcase>
		<testcase name="Mutant #459" file="mako/util.py" line="367">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -365,7 +365,7 @@
     _ast.Or = type(m.body[9].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
 
-    _ast.IsNot = type(m.body[10].value.ops[0])
+    _ast.IsNot = type(m.body[11].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
</failure>
			<system-out>    _ast.IsNot = type(m.body[10].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #460" file="mako/util.py" line="367">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -365,7 +365,7 @@
     _ast.Or = type(m.body[9].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
 
-    _ast.IsNot = type(m.body[10].value.ops[0])
+    _ast.IsNot = type(m.body[10].value.ops[1])
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
</failure>
			<system-out>    _ast.IsNot = type(m.body[10].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #461" file="mako/util.py" line="367">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -365,7 +365,7 @@
     _ast.Or = type(m.body[9].value.op)
     _ast.And = type(m.body[9].value.values[0].op)
 
-    _ast.IsNot = type(m.body[10].value.ops[0])
+    _ast.IsNot = None
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
</failure>
			<system-out>    _ast.IsNot = type(m.body[10].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #462" file="mako/util.py" line="368">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -366,7 +366,7 @@
     _ast.And = type(m.body[9].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
-    _ast.NotEq = type(m.body[10].value.ops[1])
+    _ast.NotEq = type(m.body[11].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
</failure>
			<system-out>    _ast.NotEq = type(m.body[10].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #463" file="mako/util.py" line="368">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -366,7 +366,7 @@
     _ast.And = type(m.body[9].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
-    _ast.NotEq = type(m.body[10].value.ops[1])
+    _ast.NotEq = type(m.body[10].value.ops[2])
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
</failure>
			<system-out>    _ast.NotEq = type(m.body[10].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #464" file="mako/util.py" line="368">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -366,7 +366,7 @@
     _ast.And = type(m.body[9].value.values[0].op)
 
     _ast.IsNot = type(m.body[10].value.ops[0])
-    _ast.NotEq = type(m.body[10].value.ops[1])
+    _ast.NotEq = None
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
</failure>
			<system-out>    _ast.NotEq = type(m.body[10].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #465" file="mako/util.py" line="369">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -367,7 +367,7 @@
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
-    _ast.Is = type(m.body[10].value.left.ops[0])
+    _ast.Is = type(m.body[11].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
</failure>
			<system-out>    _ast.Is = type(m.body[10].value.left.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #466" file="mako/util.py" line="369">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -367,7 +367,7 @@
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
-    _ast.Is = type(m.body[10].value.left.ops[0])
+    _ast.Is = type(m.body[10].value.left.ops[1])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
</failure>
			<system-out>    _ast.Is = type(m.body[10].value.left.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #467" file="mako/util.py" line="369">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -367,7 +367,7 @@
 
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
-    _ast.Is = type(m.body[10].value.left.ops[0])
+    _ast.Is = None
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
</failure>
			<system-out>    _ast.Is = type(m.body[10].value.left.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #468" file="mako/util.py" line="370">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -368,7 +368,7 @@
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
-    _ast.Eq = type(m.body[10].value.left.ops[1])
+    _ast.Eq = type(m.body[11].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
</failure>
			<system-out>    _ast.Eq = type(m.body[10].value.left.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #469" file="mako/util.py" line="370">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -368,7 +368,7 @@
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
-    _ast.Eq = type(m.body[10].value.left.ops[1])
+    _ast.Eq = type(m.body[10].value.left.ops[2])
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
</failure>
			<system-out>    _ast.Eq = type(m.body[10].value.left.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #470" file="mako/util.py" line="370">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -368,7 +368,7 @@
     _ast.IsNot = type(m.body[10].value.ops[0])
     _ast.NotEq = type(m.body[10].value.ops[1])
     _ast.Is = type(m.body[10].value.left.ops[0])
-    _ast.Eq = type(m.body[10].value.left.ops[1])
+    _ast.Eq = None
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
</failure>
			<system-out>    _ast.Eq = type(m.body[10].value.left.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #471" file="mako/util.py" line="372">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -370,7 +370,7 @@
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
-    _ast.Gt = type(m.body[11].value.ops[0])
+    _ast.Gt = type(m.body[12].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
</failure>
			<system-out>    _ast.Gt = type(m.body[11].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #472" file="mako/util.py" line="372">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -370,7 +370,7 @@
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
-    _ast.Gt = type(m.body[11].value.ops[0])
+    _ast.Gt = type(m.body[11].value.ops[1])
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
</failure>
			<system-out>    _ast.Gt = type(m.body[11].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #473" file="mako/util.py" line="372">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -370,7 +370,7 @@
     _ast.Is = type(m.body[10].value.left.ops[0])
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
-    _ast.Gt = type(m.body[11].value.ops[0])
+    _ast.Gt = None
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
</failure>
			<system-out>    _ast.Gt = type(m.body[11].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #474" file="mako/util.py" line="373">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -371,7 +371,7 @@
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
-    _ast.Lt = type(m.body[11].value.ops[1])
+    _ast.Lt = type(m.body[12].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
</failure>
			<system-out>    _ast.Lt = type(m.body[11].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #475" file="mako/util.py" line="373">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -371,7 +371,7 @@
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
-    _ast.Lt = type(m.body[11].value.ops[1])
+    _ast.Lt = type(m.body[11].value.ops[2])
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
</failure>
			<system-out>    _ast.Lt = type(m.body[11].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #476" file="mako/util.py" line="373">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -371,7 +371,7 @@
     _ast.Eq = type(m.body[10].value.left.ops[1])
 
     _ast.Gt = type(m.body[11].value.ops[0])
-    _ast.Lt = type(m.body[11].value.ops[1])
+    _ast.Lt = None
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
</failure>
			<system-out>    _ast.Lt = type(m.body[11].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #477" file="mako/util.py" line="374">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -372,7 +372,7 @@
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
-    _ast.GtE = type(m.body[11].value.ops[2])
+    _ast.GtE = type(m.body[12].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
</failure>
			<system-out>    _ast.GtE = type(m.body[11].value.ops[2])</system-out>
		</testcase>
		<testcase name="Mutant #478" file="mako/util.py" line="374">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -372,7 +372,7 @@
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
-    _ast.GtE = type(m.body[11].value.ops[2])
+    _ast.GtE = type(m.body[11].value.ops[3])
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
</failure>
			<system-out>    _ast.GtE = type(m.body[11].value.ops[2])</system-out>
		</testcase>
		<testcase name="Mutant #479" file="mako/util.py" line="374">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -372,7 +372,7 @@
 
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
-    _ast.GtE = type(m.body[11].value.ops[2])
+    _ast.GtE = None
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
</failure>
			<system-out>    _ast.GtE = type(m.body[11].value.ops[2])</system-out>
		</testcase>
		<testcase name="Mutant #480" file="mako/util.py" line="375">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -373,7 +373,7 @@
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
-    _ast.LtE = type(m.body[11].value.ops[3])
+    _ast.LtE = type(m.body[12].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
     _ast.NotIn = type(m.body[12].value.ops[1])
</failure>
			<system-out>    _ast.LtE = type(m.body[11].value.ops[3])</system-out>
		</testcase>
		<testcase name="Mutant #481" file="mako/util.py" line="375">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -373,7 +373,7 @@
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
-    _ast.LtE = type(m.body[11].value.ops[3])
+    _ast.LtE = type(m.body[11].value.ops[4])
 
     _ast.In = type(m.body[12].value.ops[0])
     _ast.NotIn = type(m.body[12].value.ops[1])
</failure>
			<system-out>    _ast.LtE = type(m.body[11].value.ops[3])</system-out>
		</testcase>
		<testcase name="Mutant #482" file="mako/util.py" line="375">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -373,7 +373,7 @@
     _ast.Gt = type(m.body[11].value.ops[0])
     _ast.Lt = type(m.body[11].value.ops[1])
     _ast.GtE = type(m.body[11].value.ops[2])
-    _ast.LtE = type(m.body[11].value.ops[3])
+    _ast.LtE = None
 
     _ast.In = type(m.body[12].value.ops[0])
     _ast.NotIn = type(m.body[12].value.ops[1])
</failure>
			<system-out>    _ast.LtE = type(m.body[11].value.ops[3])</system-out>
		</testcase>
		<testcase name="Mutant #483" file="mako/util.py" line="377">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -375,7 +375,7 @@
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
-    _ast.In = type(m.body[12].value.ops[0])
+    _ast.In = type(m.body[13].value.ops[0])
     _ast.NotIn = type(m.body[12].value.ops[1])
 
 
</failure>
			<system-out>    _ast.In = type(m.body[12].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #484" file="mako/util.py" line="377">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -375,7 +375,7 @@
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
-    _ast.In = type(m.body[12].value.ops[0])
+    _ast.In = type(m.body[12].value.ops[1])
     _ast.NotIn = type(m.body[12].value.ops[1])
 
 
</failure>
			<system-out>    _ast.In = type(m.body[12].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #485" file="mako/util.py" line="377">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -375,7 +375,7 @@
     _ast.GtE = type(m.body[11].value.ops[2])
     _ast.LtE = type(m.body[11].value.ops[3])
 
-    _ast.In = type(m.body[12].value.ops[0])
+    _ast.In = None
     _ast.NotIn = type(m.body[12].value.ops[1])
 
 
</failure>
			<system-out>    _ast.In = type(m.body[12].value.ops[0])</system-out>
		</testcase>
		<testcase name="Mutant #486" file="mako/util.py" line="378">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -376,7 +376,7 @@
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
-    _ast.NotIn = type(m.body[12].value.ops[1])
+    _ast.NotIn = type(m.body[13].value.ops[1])
 
 
 def read_file(path, mode=&quot;rb&quot;):
</failure>
			<system-out>    _ast.NotIn = type(m.body[12].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #487" file="mako/util.py" line="378">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -376,7 +376,7 @@
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
-    _ast.NotIn = type(m.body[12].value.ops[1])
+    _ast.NotIn = type(m.body[12].value.ops[2])
 
 
 def read_file(path, mode=&quot;rb&quot;):
</failure>
			<system-out>    _ast.NotIn = type(m.body[12].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #488" file="mako/util.py" line="378">
			<failure type="failure" message="bad_survived">--- mako/util.py
+++ mako/util.py
@@ -376,7 +376,7 @@
     _ast.LtE = type(m.body[11].value.ops[3])
 
     _ast.In = type(m.body[12].value.ops[0])
-    _ast.NotIn = type(m.body[12].value.ops[1])
+    _ast.NotIn = None
 
 
 def read_file(path, mode=&quot;rb&quot;):
</failure>
			<system-out>    _ast.NotIn = type(m.body[12].value.ops[1])</system-out>
		</testcase>
		<testcase name="Mutant #489" file="mako/util.py" line="381">
			<system-out>def read_file(path, mode=&quot;rb&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #490" file="mako/util.py" line="382">
			<system-out>    fp = open(path, mode)</system-out>
		</testcase>
		<testcase name="Mutant #491" file="mako/util.py" line="384">
			<system-out>        data = fp.read()</system-out>
		</testcase>
		<testcase name="Mutant #492" file="mako/util.py" line="391">
			<system-out>    fp = open(path, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #493" file="mako/util.py" line="391">
			<system-out>    fp = open(path, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #494" file="mako/util.py" line="393">
			<system-out>        encoding = parse_encoding(fp)</system-out>
		</testcase>
		<testcase name="Mutant #495" file="mako/util.py" line="394">
			<system-out>        data = fp.read()</system-out>
		</testcase>
		<testcase name="Mutant #496" file="mako/util.py" line="396">
			<system-out>            data = data.decode(encoding)</system-out>
		</testcase>
		<testcase name="Mutant #497" file="mako/cmd.py" line="17">
			<system-out>    if &quot;=&quot; not in var:</system-out>
		</testcase>
		<testcase name="Mutant #498" file="mako/cmd.py" line="17">
			<system-out>    if &quot;=&quot; not in var:</system-out>
		</testcase>
		<testcase name="Mutant #499" file="mako/cmd.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -16,7 +16,7 @@
 
 def varsplit(var):
     if &quot;=&quot; not in var:
-        return (var, &quot;&quot;)
+        return (var, &quot;XXXX&quot;)
     return var.split(&quot;=&quot;, 1)
 
 
</failure>
			<system-out>        return (var, &quot;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #500" file="mako/cmd.py" line="19">
			<system-out>    return var.split(&quot;=&quot;, 1)</system-out>
		</testcase>
		<testcase name="Mutant #501" file="mako/cmd.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -17,7 +17,7 @@
 def varsplit(var):
     if &quot;=&quot; not in var:
         return (var, &quot;&quot;)
-    return var.split(&quot;=&quot;, 1)
+    return var.split(&quot;=&quot;, 2)
 
 
 def _exit():
</failure>
			<system-out>    return var.split(&quot;=&quot;, 1)</system-out>
		</testcase>
		<testcase name="Mutant #502" file="mako/cmd.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -22,7 +22,7 @@
 
 def _exit():
     sys.stderr.write(exceptions.text_error_template().render())
-    sys.exit(1)
+    sys.exit(2)
 
 
 def cmdline(argv=None):
</failure>
			<system-out>    sys.exit(1)</system-out>
		</testcase>
		<testcase name="Mutant #503" file="mako/cmd.py" line="29">
			<system-out>    parser = ArgumentParser()</system-out>
		</testcase>
		<testcase name="Mutant #504" file="mako/cmd.py" line="31">
			<system-out>        &quot;--var&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #505" file="mako/cmd.py" line="33">
			<system-out>        action=&quot;append&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #506" file="mako/cmd.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -32,7 +32,7 @@
         &quot;--var&quot;,
         default=[],
         action=&quot;append&quot;,
-        help=&quot;variable (can be used multiple times, use name=value)&quot;,
+        help=&quot;XXvariable (can be used multiple times, use name=value)XX&quot;,
     )
     parser.add_argument(
         &quot;--template-dir&quot;,
</failure>
			<system-out>        help=&quot;variable (can be used multiple times, use name=value)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #507" file="mako/cmd.py" line="37">
			<system-out>        &quot;--template-dir&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #508" file="mako/cmd.py" line="39">
			<system-out>        action=&quot;append&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #509" file="mako/cmd.py" line="40">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -38,7 +38,7 @@
         &quot;--template-dir&quot;,
         default=[],
         action=&quot;append&quot;,
-        help=&quot;Directory to use for template lookup (multiple &quot;
+        help=&quot;XXDirectory to use for template lookup (multiple XX&quot;
         &quot;directories may be provided). If not given then if the &quot;
         &quot;template is read from stdin, the value defaults to be &quot;
         &quot;the current directory, otherwise it defaults to be the &quot;
</failure>
			<system-out>        help=&quot;Directory to use for template lookup (multiple &quot;</system-out>
		</testcase>
		<testcase name="Mutant #510" file="mako/cmd.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -39,7 +39,7 @@
         default=[],
         action=&quot;append&quot;,
         help=&quot;Directory to use for template lookup (multiple &quot;
-        &quot;directories may be provided). If not given then if the &quot;
+        &quot;XXdirectories may be provided). If not given then if the XX&quot;
         &quot;template is read from stdin, the value defaults to be &quot;
         &quot;the current directory, otherwise it defaults to be the &quot;
         &quot;parent directory of the file provided.&quot;,
</failure>
			<system-out>        &quot;directories may be provided). If not given then if the &quot;</system-out>
		</testcase>
		<testcase name="Mutant #511" file="mako/cmd.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -40,7 +40,7 @@
         action=&quot;append&quot;,
         help=&quot;Directory to use for template lookup (multiple &quot;
         &quot;directories may be provided). If not given then if the &quot;
-        &quot;template is read from stdin, the value defaults to be &quot;
+        &quot;XXtemplate is read from stdin, the value defaults to be XX&quot;
         &quot;the current directory, otherwise it defaults to be the &quot;
         &quot;parent directory of the file provided.&quot;,
     )
</failure>
			<system-out>        &quot;template is read from stdin, the value defaults to be &quot;</system-out>
		</testcase>
		<testcase name="Mutant #512" file="mako/cmd.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -41,7 +41,7 @@
         help=&quot;Directory to use for template lookup (multiple &quot;
         &quot;directories may be provided). If not given then if the &quot;
         &quot;template is read from stdin, the value defaults to be &quot;
-        &quot;the current directory, otherwise it defaults to be the &quot;
+        &quot;XXthe current directory, otherwise it defaults to be the XX&quot;
         &quot;parent directory of the file provided.&quot;,
     )
     parser.add_argument(
</failure>
			<system-out>        &quot;the current directory, otherwise it defaults to be the &quot;</system-out>
		</testcase>
		<testcase name="Mutant #513" file="mako/cmd.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -42,7 +42,7 @@
         &quot;directories may be provided). If not given then if the &quot;
         &quot;template is read from stdin, the value defaults to be &quot;
         &quot;the current directory, otherwise it defaults to be the &quot;
-        &quot;parent directory of the file provided.&quot;,
+        &quot;XXparent directory of the file provided.XX&quot;,
     )
     parser.add_argument(
         &quot;--output-encoding&quot;, default=None, help=&quot;force output encoding&quot;
</failure>
			<system-out>        &quot;parent directory of the file provided.&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #514" file="mako/cmd.py" line="47">
			<system-out>        &quot;--output-encoding&quot;, default=None, help=&quot;force output encoding&quot;</system-out>
		</testcase>
		<testcase name="Mutant #515" file="mako/cmd.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -45,7 +45,7 @@
         &quot;parent directory of the file provided.&quot;,
     )
     parser.add_argument(
-        &quot;--output-encoding&quot;, default=None, help=&quot;force output encoding&quot;
+        &quot;--output-encoding&quot;, default=None, help=&quot;XXforce output encodingXX&quot;
     )
     parser.add_argument(
         &quot;--output-file&quot;,
</failure>
			<system-out>        &quot;--output-encoding&quot;, default=None, help=&quot;force output encoding&quot;</system-out>
		</testcase>
		<testcase name="Mutant #516" file="mako/cmd.py" line="50">
			<system-out>        &quot;--output-file&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #517" file="mako/cmd.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -50,7 +50,7 @@
     parser.add_argument(
         &quot;--output-file&quot;,
         default=None,
-        help=&quot;Write to file upon successful render instead of stdout&quot;,
+        help=&quot;XXWrite to file upon successful render instead of stdoutXX&quot;,
     )
     parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;-&quot;)
 
</failure>
			<system-out>        help=&quot;Write to file upon successful render instead of stdout&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #518" file="mako/cmd.py" line="54">
			<system-out>    parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;-&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #519" file="mako/cmd.py" line="54">
			<system-out>    parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;-&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #520" file="mako/cmd.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -52,7 +52,7 @@
         default=None,
         help=&quot;Write to file upon successful render instead of stdout&quot;,
     )
-    parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;-&quot;)
+    parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;XX-XX&quot;)
 
     options = parser.parse_args(argv)
 
</failure>
			<system-out>    parser.add_argument(&quot;input&quot;, nargs=&quot;?&quot;, default=&quot;-&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #521" file="mako/cmd.py" line="56">
			<system-out>    options = parser.parse_args(argv)</system-out>
		</testcase>
		<testcase name="Mutant #522" file="mako/cmd.py" line="58">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -56,7 +56,7 @@
 
     options = parser.parse_args(argv)
 
-    output_encoding = options.output_encoding
+    output_encoding = None
     output_file = options.output_file
 
     if options.input == &quot;-&quot;:
</failure>
			<system-out>    output_encoding = options.output_encoding</system-out>
		</testcase>
		<testcase name="Mutant #523" file="mako/cmd.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -57,7 +57,7 @@
     options = parser.parse_args(argv)
 
     output_encoding = options.output_encoding
-    output_file = options.output_file
+    output_file = None
 
     if options.input == &quot;-&quot;:
         lookup_dirs = options.template_dir or [&quot;.&quot;]
</failure>
			<system-out>    output_file = options.output_file</system-out>
		</testcase>
		<testcase name="Mutant #524" file="mako/cmd.py" line="61">
			<error type="timeout" message="bad_timeout">--- mako/cmd.py
+++ mako/cmd.py
@@ -59,7 +59,7 @@
     output_encoding = options.output_encoding
     output_file = options.output_file
 
-    if options.input == &quot;-&quot;:
+    if options.input != &quot;-&quot;:
         lookup_dirs = options.template_dir or [&quot;.&quot;]
         lookup = TemplateLookup(lookup_dirs)
         try:
</error>
			<system-out>    if options.input == &quot;-&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #525" file="mako/cmd.py" line="61">
			<system-out>    if options.input == &quot;-&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #526" file="mako/cmd.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -60,7 +60,7 @@
     output_file = options.output_file
 
     if options.input == &quot;-&quot;:
-        lookup_dirs = options.template_dir or [&quot;.&quot;]
+        lookup_dirs = options.template_dir or [&quot;XX.XX&quot;]
         lookup = TemplateLookup(lookup_dirs)
         try:
             template = Template(
</failure>
			<system-out>        lookup_dirs = options.template_dir or [&quot;.&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #527" file="mako/cmd.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -60,7 +60,7 @@
     output_file = options.output_file
 
     if options.input == &quot;-&quot;:
-        lookup_dirs = options.template_dir or [&quot;.&quot;]
+        lookup_dirs = options.template_dir and [&quot;.&quot;]
         lookup = TemplateLookup(lookup_dirs)
         try:
             template = Template(
</failure>
			<system-out>        lookup_dirs = options.template_dir or [&quot;.&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #528" file="mako/cmd.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -60,7 +60,7 @@
     output_file = options.output_file
 
     if options.input == &quot;-&quot;:
-        lookup_dirs = options.template_dir or [&quot;.&quot;]
+        lookup_dirs = None
         lookup = TemplateLookup(lookup_dirs)
         try:
             template = Template(
</failure>
			<system-out>        lookup_dirs = options.template_dir or [&quot;.&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #529" file="mako/cmd.py" line="63">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -61,7 +61,7 @@
 
     if options.input == &quot;-&quot;:
         lookup_dirs = options.template_dir or [&quot;.&quot;]
-        lookup = TemplateLookup(lookup_dirs)
+        lookup = None
         try:
             template = Template(
                 sys.stdin.read(),
</failure>
			<system-out>        lookup = TemplateLookup(lookup_dirs)</system-out>
		</testcase>
		<testcase name="Mutant #530" file="mako/cmd.py" line="69">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #531" file="mako/cmd.py" line="73">
			<system-out>        filename = options.input</system-out>
		</testcase>
		<testcase name="Mutant #532" file="mako/cmd.py" line="74">
			<system-out>        if not isfile(filename):</system-out>
		</testcase>
		<testcase name="Mutant #533" file="mako/cmd.py" line="75">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -73,7 +73,7 @@
     else:
         filename = options.input
         if not isfile(filename):
-            raise SystemExit(&quot;error: can't find %s&quot; % filename)
+            raise SystemExit(&quot;XXerror: can't find %sXX&quot; % filename)
         lookup_dirs = options.template_dir or [dirname(filename)]
         lookup = TemplateLookup(lookup_dirs)
         try:
</failure>
			<system-out>            raise SystemExit(&quot;error: can't find %s&quot; % filename)</system-out>
		</testcase>
		<testcase name="Mutant #534" file="mako/cmd.py" line="75">
			<system-out>            raise SystemExit(&quot;error: can't find %s&quot; % filename)</system-out>
		</testcase>
		<testcase name="Mutant #535" file="mako/cmd.py" line="76">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -74,7 +74,7 @@
         filename = options.input
         if not isfile(filename):
             raise SystemExit(&quot;error: can't find %s&quot; % filename)
-        lookup_dirs = options.template_dir or [dirname(filename)]
+        lookup_dirs = options.template_dir and [dirname(filename)]
         lookup = TemplateLookup(lookup_dirs)
         try:
             template = Template(
</failure>
			<system-out>        lookup_dirs = options.template_dir or [dirname(filename)]</system-out>
		</testcase>
		<testcase name="Mutant #536" file="mako/cmd.py" line="76">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -74,7 +74,7 @@
         filename = options.input
         if not isfile(filename):
             raise SystemExit(&quot;error: can't find %s&quot; % filename)
-        lookup_dirs = options.template_dir or [dirname(filename)]
+        lookup_dirs = None
         lookup = TemplateLookup(lookup_dirs)
         try:
             template = Template(
</failure>
			<system-out>        lookup_dirs = options.template_dir or [dirname(filename)]</system-out>
		</testcase>
		<testcase name="Mutant #537" file="mako/cmd.py" line="77">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -75,7 +75,7 @@
         if not isfile(filename):
             raise SystemExit(&quot;error: can't find %s&quot; % filename)
         lookup_dirs = options.template_dir or [dirname(filename)]
-        lookup = TemplateLookup(lookup_dirs)
+        lookup = None
         try:
             template = Template(
                 filename=filename,
</failure>
			<system-out>        lookup = TemplateLookup(lookup_dirs)</system-out>
		</testcase>
		<testcase name="Mutant #538" file="mako/cmd.py" line="83">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #539" file="mako/cmd.py" line="87">
			<system-out>    kw = dict([varsplit(var) for var in options.var])</system-out>
		</testcase>
		<testcase name="Mutant #540" file="mako/cmd.py" line="89">
			<system-out>        rendered = template.render(**kw)</system-out>
		</testcase>
		<testcase name="Mutant #541" file="mako/cmd.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -92,7 +92,7 @@
         _exit()
     else:
         if output_file:
-            io.open(output_file, &quot;wt&quot;, encoding=output_encoding).write(
+            io.open(output_file, &quot;XXwtXX&quot;, encoding=output_encoding).write(
                 rendered
             )
         else:
</failure>
			<system-out>            io.open(output_file, &quot;wt&quot;, encoding=output_encoding).write(</system-out>
		</testcase>
		<testcase name="Mutant #542" file="mako/cmd.py" line="101">
			<error type="timeout" message="bad_timeout">--- mako/cmd.py
+++ mako/cmd.py
@@ -99,6 +99,6 @@
             sys.stdout.write(rendered)
 
 
-if __name__ == &quot;__main__&quot;:
+if __name__ != &quot;__main__&quot;:
     cmdline()
 
</error>
			<system-out>if __name__ == &quot;__main__&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #543" file="mako/cmd.py" line="101">
			<failure type="failure" message="bad_survived">--- mako/cmd.py
+++ mako/cmd.py
@@ -99,6 +99,6 @@
             sys.stdout.write(rendered)
 
 
-if __name__ == &quot;__main__&quot;:
+if __name__ == &quot;XX__main__XX&quot;:
     cmdline()
 
</failure>
			<system-out>if __name__ == &quot;__main__&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #544" file="mako/_ast_util.py" line="51">
			<system-out>BOOLOP_SYMBOLS = {And: &quot;and&quot;, Or: &quot;or&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #545" file="mako/_ast_util.py" line="51">
			<system-out>BOOLOP_SYMBOLS = {And: &quot;and&quot;, Or: &quot;or&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #546" file="mako/_ast_util.py" line="51">
			<system-out>BOOLOP_SYMBOLS = {And: &quot;and&quot;, Or: &quot;or&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #547" file="mako/_ast_util.py" line="54">
			<system-out>    Add: &quot;+&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #548" file="mako/_ast_util.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -53,7 +53,7 @@
 
 BINOP_SYMBOLS = {
     Add: &quot;+&quot;,
-    Sub: &quot;-&quot;,
+    Sub: &quot;XX-XX&quot;,
     Mult: &quot;*&quot;,
     Div: &quot;/&quot;,
     FloorDiv: &quot;//&quot;,
</failure>
			<system-out>    Sub: &quot;-&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #549" file="mako/_ast_util.py" line="56">
			<system-out>    Mult: &quot;*&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #550" file="mako/_ast_util.py" line="57">
			<system-out>    Div: &quot;/&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #551" file="mako/_ast_util.py" line="58">
			<system-out>    FloorDiv: &quot;//&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #552" file="mako/_ast_util.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -57,7 +57,7 @@
     Mult: &quot;*&quot;,
     Div: &quot;/&quot;,
     FloorDiv: &quot;//&quot;,
-    Mod: &quot;%&quot;,
+    Mod: &quot;XX%XX&quot;,
     LShift: &quot;&lt;&lt;&quot;,
     RShift: &quot;&gt;&gt;&quot;,
     BitOr: &quot;|&quot;,
</failure>
			<system-out>    Mod: &quot;%&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #553" file="mako/_ast_util.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -58,7 +58,7 @@
     Div: &quot;/&quot;,
     FloorDiv: &quot;//&quot;,
     Mod: &quot;%&quot;,
-    LShift: &quot;&lt;&lt;&quot;,
+    LShift: &quot;XX&lt;&lt;XX&quot;,
     RShift: &quot;&gt;&gt;&quot;,
     BitOr: &quot;|&quot;,
     BitAnd: &quot;&amp;&quot;,
</failure>
			<system-out>    LShift: &quot;&lt;&lt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #554" file="mako/_ast_util.py" line="61">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -59,7 +59,7 @@
     FloorDiv: &quot;//&quot;,
     Mod: &quot;%&quot;,
     LShift: &quot;&lt;&lt;&quot;,
-    RShift: &quot;&gt;&gt;&quot;,
+    RShift: &quot;XX&gt;&gt;XX&quot;,
     BitOr: &quot;|&quot;,
     BitAnd: &quot;&amp;&quot;,
     BitXor: &quot;^&quot;,
</failure>
			<system-out>    RShift: &quot;&gt;&gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #555" file="mako/_ast_util.py" line="62">
			<system-out>    BitOr: &quot;|&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #556" file="mako/_ast_util.py" line="63">
			<system-out>    BitAnd: &quot;&amp;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #557" file="mako/_ast_util.py" line="64">
			<system-out>    BitXor: &quot;^&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #558" file="mako/_ast_util.py" line="65">
			<system-out>}</system-out>
		</testcase>
		<testcase name="Mutant #559" file="mako/_ast_util.py" line="68">
			<system-out>    Eq: &quot;==&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #560" file="mako/_ast_util.py" line="69">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -67,7 +67,7 @@
 
 CMPOP_SYMBOLS = {
     Eq: &quot;==&quot;,
-    Gt: &quot;&gt;&quot;,
+    Gt: &quot;XX&gt;XX&quot;,
     GtE: &quot;&gt;=&quot;,
     In: &quot;in&quot;,
     Is: &quot;is&quot;,
</failure>
			<system-out>    Gt: &quot;&gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #561" file="mako/_ast_util.py" line="70">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -68,7 +68,7 @@
 CMPOP_SYMBOLS = {
     Eq: &quot;==&quot;,
     Gt: &quot;&gt;&quot;,
-    GtE: &quot;&gt;=&quot;,
+    GtE: &quot;XX&gt;=XX&quot;,
     In: &quot;in&quot;,
     Is: &quot;is&quot;,
     IsNot: &quot;is not&quot;,
</failure>
			<system-out>    GtE: &quot;&gt;=&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #562" file="mako/_ast_util.py" line="71">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -69,7 +69,7 @@
     Eq: &quot;==&quot;,
     Gt: &quot;&gt;&quot;,
     GtE: &quot;&gt;=&quot;,
-    In: &quot;in&quot;,
+    In: &quot;XXinXX&quot;,
     Is: &quot;is&quot;,
     IsNot: &quot;is not&quot;,
     Lt: &quot;&lt;&quot;,
</failure>
			<system-out>    In: &quot;in&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #563" file="mako/_ast_util.py" line="72">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -70,7 +70,7 @@
     Gt: &quot;&gt;&quot;,
     GtE: &quot;&gt;=&quot;,
     In: &quot;in&quot;,
-    Is: &quot;is&quot;,
+    Is: &quot;XXisXX&quot;,
     IsNot: &quot;is not&quot;,
     Lt: &quot;&lt;&quot;,
     LtE: &quot;&lt;=&quot;,
</failure>
			<system-out>    Is: &quot;is&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #564" file="mako/_ast_util.py" line="73">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -71,7 +71,7 @@
     GtE: &quot;&gt;=&quot;,
     In: &quot;in&quot;,
     Is: &quot;is&quot;,
-    IsNot: &quot;is not&quot;,
+    IsNot: &quot;XXis notXX&quot;,
     Lt: &quot;&lt;&quot;,
     LtE: &quot;&lt;=&quot;,
     NotEq: &quot;!=&quot;,
</failure>
			<system-out>    IsNot: &quot;is not&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #565" file="mako/_ast_util.py" line="74">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -72,7 +72,7 @@
     In: &quot;in&quot;,
     Is: &quot;is&quot;,
     IsNot: &quot;is not&quot;,
-    Lt: &quot;&lt;&quot;,
+    Lt: &quot;XX&lt;XX&quot;,
     LtE: &quot;&lt;=&quot;,
     NotEq: &quot;!=&quot;,
     NotIn: &quot;not in&quot;,
</failure>
			<system-out>    Lt: &quot;&lt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #566" file="mako/_ast_util.py" line="75">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -73,7 +73,7 @@
     Is: &quot;is&quot;,
     IsNot: &quot;is not&quot;,
     Lt: &quot;&lt;&quot;,
-    LtE: &quot;&lt;=&quot;,
+    LtE: &quot;XX&lt;=XX&quot;,
     NotEq: &quot;!=&quot;,
     NotIn: &quot;not in&quot;,
 }
</failure>
			<system-out>    LtE: &quot;&lt;=&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #567" file="mako/_ast_util.py" line="76">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -74,7 +74,7 @@
     IsNot: &quot;is not&quot;,
     Lt: &quot;&lt;&quot;,
     LtE: &quot;&lt;=&quot;,
-    NotEq: &quot;!=&quot;,
+    NotEq: &quot;XX!=XX&quot;,
     NotIn: &quot;not in&quot;,
 }
 
</failure>
			<system-out>    NotEq: &quot;!=&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #568" file="mako/_ast_util.py" line="77">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -75,7 +75,7 @@
     Lt: &quot;&lt;&quot;,
     LtE: &quot;&lt;=&quot;,
     NotEq: &quot;!=&quot;,
-    NotIn: &quot;not in&quot;,
+    NotIn: &quot;XXnot inXX&quot;,
 }
 
 UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}
</failure>
			<system-out>    NotIn: &quot;not in&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #569" file="mako/_ast_util.py" line="78">
			<system-out>}</system-out>
		</testcase>
		<testcase name="Mutant #570" file="mako/_ast_util.py" line="80">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -78,7 +78,7 @@
     NotIn: &quot;not in&quot;,
 }
 
-UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}
+UNARYOP_SYMBOLS = {Invert: &quot;XX~XX&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}
 
 ALL_SYMBOLS = {}
 ALL_SYMBOLS.update(BOOLOP_SYMBOLS)
</failure>
			<system-out>UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #571" file="mako/_ast_util.py" line="80">
			<system-out>UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #572" file="mako/_ast_util.py" line="80">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -78,7 +78,7 @@
     NotIn: &quot;not in&quot;,
 }
 
-UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}
+UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;XX+XX&quot;, USub: &quot;-&quot;}
 
 ALL_SYMBOLS = {}
 ALL_SYMBOLS.update(BOOLOP_SYMBOLS)
</failure>
			<system-out>UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #573" file="mako/_ast_util.py" line="80">
			<system-out>UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #574" file="mako/_ast_util.py" line="80">
			<system-out>UNARYOP_SYMBOLS = {Invert: &quot;~&quot;, Not: &quot;not&quot;, UAdd: &quot;+&quot;, USub: &quot;-&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #575" file="mako/_ast_util.py" line="82">
			<system-out>ALL_SYMBOLS = {}</system-out>
		</testcase>
		<testcase name="Mutant #576" file="mako/_ast_util.py" line="89">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -87,7 +87,7 @@
 ALL_SYMBOLS.update(UNARYOP_SYMBOLS)
 
 
-def parse(expr, filename=&quot;&lt;unknown&gt;&quot;, mode=&quot;exec&quot;):
+def parse(expr, filename=&quot;XX&lt;unknown&gt;XX&quot;, mode=&quot;exec&quot;):
     &quot;&quot;&quot;Parse an expression into an AST node.&quot;&quot;&quot;
     return compile(expr, filename, mode, PyCF_ONLY_AST)
 
</failure>
			<system-out>def parse(expr, filename=&quot;&lt;unknown&gt;&quot;, mode=&quot;exec&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #577" file="mako/_ast_util.py" line="89">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -87,7 +87,7 @@
 ALL_SYMBOLS.update(UNARYOP_SYMBOLS)
 
 
-def parse(expr, filename=&quot;&lt;unknown&gt;&quot;, mode=&quot;exec&quot;):
+def parse(expr, filename=&quot;&lt;unknown&gt;&quot;, mode=&quot;XXexecXX&quot;):
     &quot;&quot;&quot;Parse an expression into an AST node.&quot;&quot;&quot;
     return compile(expr, filename, mode, PyCF_ONLY_AST)
 
</failure>
			<system-out>def parse(expr, filename=&quot;&lt;unknown&gt;&quot;, mode=&quot;exec&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #578" file="mako/_ast_util.py" line="97">
			<system-out>    if not hasattr(node, &quot;_fields&quot;) or not node._fields:</system-out>
		</testcase>
		<testcase name="Mutant #579" file="mako/_ast_util.py" line="97">
			<system-out>    if not hasattr(node, &quot;_fields&quot;) or not node._fields:</system-out>
		</testcase>
		<testcase name="Mutant #580" file="mako/_ast_util.py" line="97">
			<system-out>    if not hasattr(node, &quot;_fields&quot;) or not node._fields:</system-out>
		</testcase>
		<testcase name="Mutant #581" file="mako/_ast_util.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -95,7 +95,7 @@
 def iter_fields(node):
     &quot;&quot;&quot;Iterate over all fields of a node, only yielding existing fields.&quot;&quot;&quot;
     # CPython 2.5 compat
-    if not hasattr(node, &quot;_fields&quot;) or not node._fields:
+    if not hasattr(node, &quot;_fields&quot;) and not node._fields:
         return
     for field in node._fields:
         try:
</failure>
			<system-out>    if not hasattr(node, &quot;_fields&quot;) or not node._fields:</system-out>
		</testcase>
		<testcase name="Mutant #582" file="mako/_ast_util.py" line="130">
			<system-out>        method = &quot;visit_&quot; + node.__class__.__name__</system-out>
		</testcase>
		<testcase name="Mutant #583" file="mako/_ast_util.py" line="130">
			<system-out>        method = &quot;visit_&quot; + node.__class__.__name__</system-out>
		</testcase>
		<testcase name="Mutant #584" file="mako/_ast_util.py" line="130">
			<system-out>        method = &quot;visit_&quot; + node.__class__.__name__</system-out>
		</testcase>
		<testcase name="Mutant #585" file="mako/_ast_util.py" line="135">
			<system-out>        f = self.get_visitor(node)</system-out>
		</testcase>
		<testcase name="Mutant #586" file="mako/_ast_util.py" line="136">
			<system-out>        if f is not None:</system-out>
		</testcase>
		<testcase name="Mutant #587" file="mako/_ast_util.py" line="189">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -187,7 +187,7 @@
 
     def generic_visit(self, node):
         for field, old_value in iter_fields(node):
-            old_value = getattr(node, field, None)
+            old_value = None
             if isinstance(old_value, list):
                 new_values = []
                 for value in old_value:
</failure>
			<system-out>            old_value = getattr(node, field, None)</system-out>
		</testcase>
		<testcase name="Mutant #588" file="mako/_ast_util.py" line="191">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -189,7 +189,7 @@
         for field, old_value in iter_fields(node):
             old_value = getattr(node, field, None)
             if isinstance(old_value, list):
-                new_values = []
+                new_values = None
                 for value in old_value:
                     if isinstance(value, AST):
                         value = self.visit(value)
</failure>
			<system-out>                new_values = []</system-out>
		</testcase>
		<testcase name="Mutant #589" file="mako/_ast_util.py" line="194">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -192,7 +192,7 @@
                 new_values = []
                 for value in old_value:
                     if isinstance(value, AST):
-                        value = self.visit(value)
+                        value = None
                         if value is None:
                             continue
                         elif not isinstance(value, AST):
</failure>
			<system-out>                        value = self.visit(value)</system-out>
		</testcase>
		<testcase name="Mutant #590" file="mako/_ast_util.py" line="195">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -193,7 +193,7 @@
                 for value in old_value:
                     if isinstance(value, AST):
                         value = self.visit(value)
-                        if value is None:
+                        if value is not None:
                             continue
                         elif not isinstance(value, AST):
                             new_values.extend(value)
</failure>
			<system-out>                        if value is None:</system-out>
		</testcase>
		<testcase name="Mutant #591" file="mako/_ast_util.py" line="196">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -194,7 +194,7 @@
                     if isinstance(value, AST):
                         value = self.visit(value)
                         if value is None:
-                            continue
+                            break
                         elif not isinstance(value, AST):
                             new_values.extend(value)
                             continue
</failure>
			<system-out>                            continue</system-out>
		</testcase>
		<testcase name="Mutant #592" file="mako/_ast_util.py" line="197">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -195,7 +195,7 @@
                         value = self.visit(value)
                         if value is None:
                             continue
-                        elif not isinstance(value, AST):
+                        elif  isinstance(value, AST):
                             new_values.extend(value)
                             continue
                     new_values.append(value)
</failure>
			<system-out>                        elif not isinstance(value, AST):</system-out>
		</testcase>
		<testcase name="Mutant #593" file="mako/_ast_util.py" line="199">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -197,7 +197,7 @@
                             continue
                         elif not isinstance(value, AST):
                             new_values.extend(value)
-                            continue
+                            break
                     new_values.append(value)
                 old_value[:] = new_values
             elif isinstance(old_value, AST):
</failure>
			<system-out>                            continue</system-out>
		</testcase>
		<testcase name="Mutant #594" file="mako/_ast_util.py" line="201">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -199,7 +199,7 @@
                             new_values.extend(value)
                             continue
                     new_values.append(value)
-                old_value[:] = new_values
+                old_value[:] = None
             elif isinstance(old_value, AST):
                 new_node = self.visit(old_value)
                 if new_node is None:
</failure>
			<system-out>                old_value[:] = new_values</system-out>
		</testcase>
		<testcase name="Mutant #595" file="mako/_ast_util.py" line="203">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -201,7 +201,7 @@
                     new_values.append(value)
                 old_value[:] = new_values
             elif isinstance(old_value, AST):
-                new_node = self.visit(old_value)
+                new_node = None
                 if new_node is None:
                     delattr(node, field)
                 else:
</failure>
			<system-out>                new_node = self.visit(old_value)</system-out>
		</testcase>
		<testcase name="Mutant #596" file="mako/_ast_util.py" line="204">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -202,7 +202,7 @@
                 old_value[:] = new_values
             elif isinstance(old_value, AST):
                 new_node = self.visit(old_value)
-                if new_node is None:
+                if new_node is not None:
                     delattr(node, field)
                 else:
                     setattr(node, field, new_node)
</failure>
			<system-out>                if new_node is None:</system-out>
		</testcase>
		<testcase name="Mutant #597" file="mako/_ast_util.py" line="220">
			<system-out>        self.result = []</system-out>
		</testcase>
		<testcase name="Mutant #598" file="mako/_ast_util.py" line="221">
			<system-out>        self.indent_with = indent_with</system-out>
		</testcase>
		<testcase name="Mutant #599" file="mako/_ast_util.py" line="222">
			<system-out>        self.indentation = 0</system-out>
		</testcase>
		<testcase name="Mutant #600" file="mako/_ast_util.py" line="222">
			<system-out>        self.indentation = 0</system-out>
		</testcase>
		<testcase name="Mutant #601" file="mako/_ast_util.py" line="223">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -221,7 +221,7 @@
         self.result = []
         self.indent_with = indent_with
         self.indentation = 0
-        self.new_lines = 0
+        self.new_lines = 1
 
     def write(self, x):
         if self.new_lines:
</failure>
			<system-out>        self.new_lines = 0</system-out>
		</testcase>
		<testcase name="Mutant #602" file="mako/_ast_util.py" line="223">
			<system-out>        self.new_lines = 0</system-out>
		</testcase>
		<testcase name="Mutant #603" file="mako/_ast_util.py" line="228">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -226,7 +226,7 @@
     def write(self, x):
         if self.new_lines:
             if self.result:
-                self.result.append(&quot;\n&quot; * self.new_lines)
+                self.result.append(&quot;XX\nXX&quot; * self.new_lines)
             self.result.append(self.indent_with * self.indentation)
             self.new_lines = 0
         self.result.append(x)
</failure>
			<system-out>                self.result.append(&quot;\n&quot; * self.new_lines)</system-out>
		</testcase>
		<testcase name="Mutant #604" file="mako/_ast_util.py" line="228">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -226,7 +226,7 @@
     def write(self, x):
         if self.new_lines:
             if self.result:
-                self.result.append(&quot;\n&quot; * self.new_lines)
+                self.result.append(&quot;\n&quot; / self.new_lines)
             self.result.append(self.indent_with * self.indentation)
             self.new_lines = 0
         self.result.append(x)
</failure>
			<system-out>                self.result.append(&quot;\n&quot; * self.new_lines)</system-out>
		</testcase>
		<testcase name="Mutant #605" file="mako/_ast_util.py" line="229">
			<system-out>            self.result.append(self.indent_with * self.indentation)</system-out>
		</testcase>
		<testcase name="Mutant #606" file="mako/_ast_util.py" line="230">
			<system-out>            self.new_lines = 0</system-out>
		</testcase>
		<testcase name="Mutant #607" file="mako/_ast_util.py" line="230">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -228,7 +228,7 @@
             if self.result:
                 self.result.append(&quot;\n&quot; * self.new_lines)
             self.result.append(self.indent_with * self.indentation)
-            self.new_lines = 0
+            self.new_lines = None
         self.result.append(x)
 
     def newline(self, n=1):
</failure>
			<system-out>            self.new_lines = 0</system-out>
		</testcase>
		<testcase name="Mutant #608" file="mako/_ast_util.py" line="233">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -231,7 +231,7 @@
             self.new_lines = 0
         self.result.append(x)
 
-    def newline(self, n=1):
+    def newline(self, n=2):
         self.new_lines = max(self.new_lines, n)
 
     def body(self, statements):
</failure>
			<system-out>    def newline(self, n=1):</system-out>
		</testcase>
		<testcase name="Mutant #609" file="mako/_ast_util.py" line="234">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -232,7 +232,7 @@
         self.result.append(x)
 
     def newline(self, n=1):
-        self.new_lines = max(self.new_lines, n)
+        self.new_lines = None
 
     def body(self, statements):
         self.new_line = True
</failure>
			<system-out>        self.new_lines = max(self.new_lines, n)</system-out>
		</testcase>
		<testcase name="Mutant #610" file="mako/_ast_util.py" line="237">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -235,7 +235,7 @@
         self.new_lines = max(self.new_lines, n)
 
     def body(self, statements):
-        self.new_line = True
+        self.new_line = False
         self.indentation += 1
         for stmt in statements:
             self.visit(stmt)
</failure>
			<system-out>        self.new_line = True</system-out>
		</testcase>
		<testcase name="Mutant #611" file="mako/_ast_util.py" line="237">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -235,7 +235,7 @@
         self.new_lines = max(self.new_lines, n)
 
     def body(self, statements):
-        self.new_line = True
+        self.new_line = None
         self.indentation += 1
         for stmt in statements:
             self.visit(stmt)
</failure>
			<system-out>        self.new_line = True</system-out>
		</testcase>
		<testcase name="Mutant #612" file="mako/_ast_util.py" line="238">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -236,7 +236,7 @@
 
     def body(self, statements):
         self.new_line = True
-        self.indentation += 1
+        self.indentation = 1
         for stmt in statements:
             self.visit(stmt)
         self.indentation -= 1
</failure>
			<system-out>        self.indentation += 1</system-out>
		</testcase>
		<testcase name="Mutant #613" file="mako/_ast_util.py" line="238">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -236,7 +236,7 @@
 
     def body(self, statements):
         self.new_line = True
-        self.indentation += 1
+        self.indentation -= 1
         for stmt in statements:
             self.visit(stmt)
         self.indentation -= 1
</failure>
			<system-out>        self.indentation += 1</system-out>
		</testcase>
		<testcase name="Mutant #614" file="mako/_ast_util.py" line="238">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -236,7 +236,7 @@
 
     def body(self, statements):
         self.new_line = True
-        self.indentation += 1
+        self.indentation += 2
         for stmt in statements:
             self.visit(stmt)
         self.indentation -= 1
</failure>
			<system-out>        self.indentation += 1</system-out>
		</testcase>
		<testcase name="Mutant #615" file="mako/_ast_util.py" line="241">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -239,7 +239,7 @@
         self.indentation += 1
         for stmt in statements:
             self.visit(stmt)
-        self.indentation -= 1
+        self.indentation = 1
 
     def body_or_else(self, node):
         self.body(node.body)
</failure>
			<system-out>        self.indentation -= 1</system-out>
		</testcase>
		<testcase name="Mutant #616" file="mako/_ast_util.py" line="241">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -239,7 +239,7 @@
         self.indentation += 1
         for stmt in statements:
             self.visit(stmt)
-        self.indentation -= 1
+        self.indentation += 1
 
     def body_or_else(self, node):
         self.body(node.body)
</failure>
			<system-out>        self.indentation -= 1</system-out>
		</testcase>
		<testcase name="Mutant #617" file="mako/_ast_util.py" line="241">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -239,7 +239,7 @@
         self.indentation += 1
         for stmt in statements:
             self.visit(stmt)
-        self.indentation -= 1
+        self.indentation -= 2
 
     def body_or_else(self, node):
         self.body(node.body)
</failure>
			<system-out>        self.indentation -= 1</system-out>
		</testcase>
		<testcase name="Mutant #618" file="mako/_ast_util.py" line="247">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -245,7 +245,7 @@
         self.body(node.body)
         if node.orelse:
             self.newline()
-            self.write(&quot;else:&quot;)
+            self.write(&quot;XXelse:XX&quot;)
             self.body(node.orelse)
 
     def signature(self, node):
</failure>
			<system-out>            self.write(&quot;else:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #619" file="mako/_ast_util.py" line="251">
			<system-out>        want_comma = []</system-out>
		</testcase>
		<testcase name="Mutant #620" file="mako/_ast_util.py" line="255">
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #621" file="mako/_ast_util.py" line="257">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -255,7 +255,7 @@
             if want_comma:
                 self.write(&quot;, &quot;)
             else:
-                want_comma.append(True)
+                want_comma.append(False)
 
         padding = [None] * (len(node.args) - len(node.defaults))
         for arg, default in zip(node.args, padding + node.defaults):
</failure>
			<system-out>                want_comma.append(True)</system-out>
		</testcase>
		<testcase name="Mutant #622" file="mako/_ast_util.py" line="259">
			<system-out>        padding = [None] * (len(node.args) - len(node.defaults))</system-out>
		</testcase>
		<testcase name="Mutant #623" file="mako/_ast_util.py" line="259">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -257,7 +257,7 @@
             else:
                 want_comma.append(True)
 
-        padding = [None] * (len(node.args) - len(node.defaults))
+        padding = [None] * (len(node.args) + len(node.defaults))
         for arg, default in zip(node.args, padding + node.defaults):
             write_comma()
             self.visit(arg)
</failure>
			<system-out>        padding = [None] * (len(node.args) - len(node.defaults))</system-out>
		</testcase>
		<testcase name="Mutant #624" file="mako/_ast_util.py" line="259">
			<system-out>        padding = [None] * (len(node.args) - len(node.defaults))</system-out>
		</testcase>
		<testcase name="Mutant #625" file="mako/_ast_util.py" line="260">
			<system-out>        for arg, default in zip(node.args, padding + node.defaults):</system-out>
		</testcase>
		<testcase name="Mutant #626" file="mako/_ast_util.py" line="263">
			<system-out>            if default is not None:</system-out>
		</testcase>
		<testcase name="Mutant #627" file="mako/_ast_util.py" line="264">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -262,7 +262,7 @@
             write_comma()
             self.visit(arg)
             if default is not None:
-                self.write(&quot;=&quot;)
+                self.write(&quot;XX=XX&quot;)
                 self.visit(default)
         if node.vararg is not None:
             write_comma()
</failure>
			<system-out>                self.write(&quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #628" file="mako/_ast_util.py" line="266">
			<system-out>        if node.vararg is not None:</system-out>
		</testcase>
		<testcase name="Mutant #629" file="mako/_ast_util.py" line="268">
			<system-out>            self.write(&quot;*&quot; + arg_stringname(node.vararg))</system-out>
		</testcase>
		<testcase name="Mutant #630" file="mako/_ast_util.py" line="268">
			<system-out>            self.write(&quot;*&quot; + arg_stringname(node.vararg))</system-out>
		</testcase>
		<testcase name="Mutant #631" file="mako/_ast_util.py" line="269">
			<system-out>        if node.kwarg is not None:</system-out>
		</testcase>
		<testcase name="Mutant #632" file="mako/_ast_util.py" line="271">
			<system-out>            self.write(&quot;**&quot; + arg_stringname(node.kwarg))</system-out>
		</testcase>
		<testcase name="Mutant #633" file="mako/_ast_util.py" line="271">
			<system-out>            self.write(&quot;**&quot; + arg_stringname(node.kwarg))</system-out>
		</testcase>
		<testcase name="Mutant #634" file="mako/_ast_util.py" line="276">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -274,7 +274,7 @@
     def decorators(self, node):
         for decorator in node.decorator_list:
             self.newline()
-            self.write(&quot;@&quot;)
+            self.write(&quot;XX@XX&quot;)
             self.visit(decorator)
 
     # Statements
</failure>
			<system-out>            self.write(&quot;@&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #635" file="mako/_ast_util.py" line="285">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -283,7 +283,7 @@
         self.newline()
         for idx, target in enumerate(node.targets):
             if idx:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             self.visit(target)
         self.write(&quot; = &quot;)
         self.visit(node.value)
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #636" file="mako/_ast_util.py" line="287">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -285,7 +285,7 @@
             if idx:
                 self.write(&quot;, &quot;)
             self.visit(target)
-        self.write(&quot; = &quot;)
+        self.write(&quot;XX = XX&quot;)
         self.visit(node.value)
 
     def visit_AugAssign(self, node):
</failure>
			<system-out>        self.write(&quot; = &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #637" file="mako/_ast_util.py" line="293">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -291,7 +291,7 @@
     def visit_AugAssign(self, node):
         self.newline()
         self.visit(node.target)
-        self.write(BINOP_SYMBOLS[type(node.op)] + &quot;=&quot;)
+        self.write(BINOP_SYMBOLS[type(node.op)] - &quot;=&quot;)
         self.visit(node.value)
 
     def visit_ImportFrom(self, node):
</failure>
			<system-out>        self.write(BINOP_SYMBOLS[type(node.op)] + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #638" file="mako/_ast_util.py" line="293">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -291,7 +291,7 @@
     def visit_AugAssign(self, node):
         self.newline()
         self.visit(node.target)
-        self.write(BINOP_SYMBOLS[type(node.op)] + &quot;=&quot;)
+        self.write(BINOP_SYMBOLS[type(node.op)] + &quot;XX=XX&quot;)
         self.visit(node.value)
 
     def visit_ImportFrom(self, node):
</failure>
			<system-out>        self.write(BINOP_SYMBOLS[type(node.op)] + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #639" file="mako/_ast_util.py" line="298">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -296,7 +296,7 @@
 
     def visit_ImportFrom(self, node):
         self.newline()
-        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))
+        self.write(&quot;XXfrom %s%s import XX&quot; % (&quot;.&quot; * node.level, node.module))
         for idx, item in enumerate(node.names):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))</system-out>
		</testcase>
		<testcase name="Mutant #640" file="mako/_ast_util.py" line="298">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -296,7 +296,7 @@
 
     def visit_ImportFrom(self, node):
         self.newline()
-        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))
+        self.write(&quot;from %s%s import &quot; / (&quot;.&quot; * node.level, node.module))
         for idx, item in enumerate(node.names):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))</system-out>
		</testcase>
		<testcase name="Mutant #641" file="mako/_ast_util.py" line="298">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -296,7 +296,7 @@
 
     def visit_ImportFrom(self, node):
         self.newline()
-        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))
+        self.write(&quot;from %s%s import &quot; % (&quot;XX.XX&quot; * node.level, node.module))
         for idx, item in enumerate(node.names):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))</system-out>
		</testcase>
		<testcase name="Mutant #642" file="mako/_ast_util.py" line="298">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -296,7 +296,7 @@
 
     def visit_ImportFrom(self, node):
         self.newline()
-        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))
+        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; / node.level, node.module))
         for idx, item in enumerate(node.names):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))</system-out>
		</testcase>
		<testcase name="Mutant #643" file="mako/_ast_util.py" line="301">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -299,7 +299,7 @@
         self.write(&quot;from %s%s import &quot; % (&quot;.&quot; * node.level, node.module))
         for idx, item in enumerate(node.names):
             if idx:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             self.write(item)
 
     def visit_Import(self, node):
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #644" file="mako/_ast_util.py" line="307">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -305,7 +305,7 @@
     def visit_Import(self, node):
         self.newline()
         for item in node.names:
-            self.write(&quot;import &quot;)
+            self.write(&quot;XXimport XX&quot;)
             self.visit(item)
 
     def visit_Expr(self, node):
</failure>
			<system-out>            self.write(&quot;import &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #645" file="mako/_ast_util.py" line="315">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -313,7 +313,7 @@
         self.generic_visit(node)
 
     def visit_FunctionDef(self, node):
-        self.newline(n=2)
+        self.newline(n=3)
         self.decorators(node)
         self.newline()
         self.write(&quot;def %s(&quot; % node.name)
</failure>
			<system-out>        self.newline(n=2)</system-out>
		</testcase>
		<testcase name="Mutant #646" file="mako/_ast_util.py" line="318">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -316,7 +316,7 @@
         self.newline(n=2)
         self.decorators(node)
         self.newline()
-        self.write(&quot;def %s(&quot; % node.name)
+        self.write(&quot;XXdef %s(XX&quot; % node.name)
         self.signature(node.args)
         self.write(&quot;):&quot;)
         self.body(node.body)
</failure>
			<system-out>        self.write(&quot;def %s(&quot; % node.name)</system-out>
		</testcase>
		<testcase name="Mutant #647" file="mako/_ast_util.py" line="318">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -316,7 +316,7 @@
         self.newline(n=2)
         self.decorators(node)
         self.newline()
-        self.write(&quot;def %s(&quot; % node.name)
+        self.write(&quot;def %s(&quot; / node.name)
         self.signature(node.args)
         self.write(&quot;):&quot;)
         self.body(node.body)
</failure>
			<system-out>        self.write(&quot;def %s(&quot; % node.name)</system-out>
		</testcase>
		<testcase name="Mutant #648" file="mako/_ast_util.py" line="320">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -318,7 +318,7 @@
         self.newline()
         self.write(&quot;def %s(&quot; % node.name)
         self.signature(node.args)
-        self.write(&quot;):&quot;)
+        self.write(&quot;XX):XX&quot;)
         self.body(node.body)
 
     def visit_ClassDef(self, node):
</failure>
			<system-out>        self.write(&quot;):&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #649" file="mako/_ast_util.py" line="324">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -322,7 +322,7 @@
         self.body(node.body)
 
     def visit_ClassDef(self, node):
-        have_args = []
+        have_args = None
 
         def paren_or_comma():
             if have_args:
</failure>
			<system-out>        have_args = []</system-out>
		</testcase>
		<testcase name="Mutant #650" file="mako/_ast_util.py" line="328">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -326,7 +326,7 @@
 
         def paren_or_comma():
             if have_args:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             else:
                 have_args.append(True)
                 self.write(&quot;(&quot;)
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #651" file="mako/_ast_util.py" line="330">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -328,7 +328,7 @@
             if have_args:
                 self.write(&quot;, &quot;)
             else:
-                have_args.append(True)
+                have_args.append(False)
                 self.write(&quot;(&quot;)
 
         self.newline(n=3)
</failure>
			<system-out>                have_args.append(True)</system-out>
		</testcase>
		<testcase name="Mutant #652" file="mako/_ast_util.py" line="331">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -329,7 +329,7 @@
                 self.write(&quot;, &quot;)
             else:
                 have_args.append(True)
-                self.write(&quot;(&quot;)
+                self.write(&quot;XX(XX&quot;)
 
         self.newline(n=3)
         self.decorators(node)
</failure>
			<system-out>                self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #653" file="mako/_ast_util.py" line="333">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -331,7 +331,7 @@
                 have_args.append(True)
                 self.write(&quot;(&quot;)
 
-        self.newline(n=3)
+        self.newline(n=4)
         self.decorators(node)
         self.newline()
         self.write(&quot;class %s&quot; % node.name)
</failure>
			<system-out>        self.newline(n=3)</system-out>
		</testcase>
		<testcase name="Mutant #654" file="mako/_ast_util.py" line="336">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -334,7 +334,7 @@
         self.newline(n=3)
         self.decorators(node)
         self.newline()
-        self.write(&quot;class %s&quot; % node.name)
+        self.write(&quot;XXclass %sXX&quot; % node.name)
         for base in node.bases:
             paren_or_comma()
             self.visit(base)
</failure>
			<system-out>        self.write(&quot;class %s&quot; % node.name)</system-out>
		</testcase>
		<testcase name="Mutant #655" file="mako/_ast_util.py" line="336">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -334,7 +334,7 @@
         self.newline(n=3)
         self.decorators(node)
         self.newline()
-        self.write(&quot;class %s&quot; % node.name)
+        self.write(&quot;class %s&quot; / node.name)
         for base in node.bases:
             paren_or_comma()
             self.visit(base)
</failure>
			<system-out>        self.write(&quot;class %s&quot; % node.name)</system-out>
		</testcase>
		<testcase name="Mutant #656" file="mako/_ast_util.py" line="342">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -340,7 +340,7 @@
             self.visit(base)
         # XXX: the if here is used to keep this module compatible
         #      with python 2.6.
-        if hasattr(node, &quot;keywords&quot;):
+        if hasattr(node, &quot;XXkeywordsXX&quot;):
             for keyword in node.keywords:
                 paren_or_comma()
                 self.write(keyword.arg + &quot;=&quot;)
</failure>
			<system-out>        if hasattr(node, &quot;keywords&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #657" file="mako/_ast_util.py" line="345">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -343,7 +343,7 @@
         if hasattr(node, &quot;keywords&quot;):
             for keyword in node.keywords:
                 paren_or_comma()
-                self.write(keyword.arg + &quot;=&quot;)
+                self.write(keyword.arg - &quot;=&quot;)
                 self.visit(keyword.value)
             if getattr(node, &quot;starargs&quot;, None):
                 paren_or_comma()
</failure>
			<system-out>                self.write(keyword.arg + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #658" file="mako/_ast_util.py" line="345">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -343,7 +343,7 @@
         if hasattr(node, &quot;keywords&quot;):
             for keyword in node.keywords:
                 paren_or_comma()
-                self.write(keyword.arg + &quot;=&quot;)
+                self.write(keyword.arg + &quot;XX=XX&quot;)
                 self.visit(keyword.value)
             if getattr(node, &quot;starargs&quot;, None):
                 paren_or_comma()
</failure>
			<system-out>                self.write(keyword.arg + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #659" file="mako/_ast_util.py" line="347">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -345,7 +345,7 @@
                 paren_or_comma()
                 self.write(keyword.arg + &quot;=&quot;)
                 self.visit(keyword.value)
-            if getattr(node, &quot;starargs&quot;, None):
+            if getattr(node, &quot;XXstarargsXX&quot;, None):
                 paren_or_comma()
                 self.write(&quot;*&quot;)
                 self.visit(node.starargs)
</failure>
			<system-out>            if getattr(node, &quot;starargs&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #660" file="mako/_ast_util.py" line="349">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -347,7 +347,7 @@
                 self.visit(keyword.value)
             if getattr(node, &quot;starargs&quot;, None):
                 paren_or_comma()
-                self.write(&quot;*&quot;)
+                self.write(&quot;XX*XX&quot;)
                 self.visit(node.starargs)
             if getattr(node, &quot;kwargs&quot;, None):
                 paren_or_comma()
</failure>
			<system-out>                self.write(&quot;*&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #661" file="mako/_ast_util.py" line="351">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -349,7 +349,7 @@
                 paren_or_comma()
                 self.write(&quot;*&quot;)
                 self.visit(node.starargs)
-            if getattr(node, &quot;kwargs&quot;, None):
+            if getattr(node, &quot;XXkwargsXX&quot;, None):
                 paren_or_comma()
                 self.write(&quot;**&quot;)
                 self.visit(node.kwargs)
</failure>
			<system-out>            if getattr(node, &quot;kwargs&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #662" file="mako/_ast_util.py" line="353">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -351,7 +351,7 @@
                 self.visit(node.starargs)
             if getattr(node, &quot;kwargs&quot;, None):
                 paren_or_comma()
-                self.write(&quot;**&quot;)
+                self.write(&quot;XX**XX&quot;)
                 self.visit(node.kwargs)
         self.write(have_args and &quot;):&quot; or &quot;:&quot;)
         self.body(node.body)
</failure>
			<system-out>                self.write(&quot;**&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #663" file="mako/_ast_util.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -353,7 +353,7 @@
                 paren_or_comma()
                 self.write(&quot;**&quot;)
                 self.visit(node.kwargs)
-        self.write(have_args and &quot;):&quot; or &quot;:&quot;)
+        self.write(have_args and &quot;XX):XX&quot; or &quot;:&quot;)
         self.body(node.body)
 
     def visit_If(self, node):
</failure>
			<system-out>        self.write(have_args and &quot;):&quot; or &quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #664" file="mako/_ast_util.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -353,7 +353,7 @@
                 paren_or_comma()
                 self.write(&quot;**&quot;)
                 self.visit(node.kwargs)
-        self.write(have_args and &quot;):&quot; or &quot;:&quot;)
+        self.write(have_args or &quot;):&quot; or &quot;:&quot;)
         self.body(node.body)
 
     def visit_If(self, node):
</failure>
			<system-out>        self.write(have_args and &quot;):&quot; or &quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #665" file="mako/_ast_util.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -353,7 +353,7 @@
                 paren_or_comma()
                 self.write(&quot;**&quot;)
                 self.visit(node.kwargs)
-        self.write(have_args and &quot;):&quot; or &quot;:&quot;)
+        self.write(have_args and &quot;):&quot; or &quot;XX:XX&quot;)
         self.body(node.body)
 
     def visit_If(self, node):
</failure>
			<system-out>        self.write(have_args and &quot;):&quot; or &quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #666" file="mako/_ast_util.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -353,7 +353,7 @@
                 paren_or_comma()
                 self.write(&quot;**&quot;)
                 self.visit(node.kwargs)
-        self.write(have_args and &quot;):&quot; or &quot;:&quot;)
+        self.write(have_args and &quot;):&quot; and &quot;:&quot;)
         self.body(node.body)
 
     def visit_If(self, node):
</failure>
			<system-out>        self.write(have_args and &quot;):&quot; or &quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #667" file="mako/_ast_util.py" line="360">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -358,7 +358,7 @@
 
     def visit_If(self, node):
         self.newline()
-        self.write(&quot;if &quot;)
+        self.write(&quot;XXif XX&quot;)
         self.visit(node.test)
         self.write(&quot;:&quot;)
         self.body(node.body)
</failure>
			<system-out>        self.write(&quot;if &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #668" file="mako/_ast_util.py" line="362">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -360,7 +360,7 @@
         self.newline()
         self.write(&quot;if &quot;)
         self.visit(node.test)
-        self.write(&quot;:&quot;)
+        self.write(&quot;XX:XX&quot;)
         self.body(node.body)
         while True:
             else_ = node.orelse
</failure>
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #669" file="mako/_ast_util.py" line="364">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -362,7 +362,7 @@
         self.visit(node.test)
         self.write(&quot;:&quot;)
         self.body(node.body)
-        while True:
+        while False:
             else_ = node.orelse
             if len(else_) == 1 and isinstance(else_[0], If):
                 node = else_[0]
</failure>
			<system-out>        while True:</system-out>
		</testcase>
		<testcase name="Mutant #670" file="mako/_ast_util.py" line="365">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -363,7 +363,7 @@
         self.write(&quot;:&quot;)
         self.body(node.body)
         while True:
-            else_ = node.orelse
+            else_ = None
             if len(else_) == 1 and isinstance(else_[0], If):
                 node = else_[0]
                 self.newline()
</failure>
			<system-out>            else_ = node.orelse</system-out>
		</testcase>
		<testcase name="Mutant #671" file="mako/_ast_util.py" line="366">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -364,7 +364,7 @@
         self.body(node.body)
         while True:
             else_ = node.orelse
-            if len(else_) == 1 and isinstance(else_[0], If):
+            if len(else_) != 1 and isinstance(else_[0], If):
                 node = else_[0]
                 self.newline()
                 self.write(&quot;elif &quot;)
</failure>
			<system-out>            if len(else_) == 1 and isinstance(else_[0], If):</system-out>
		</testcase>
		<testcase name="Mutant #672" file="mako/_ast_util.py" line="366">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -364,7 +364,7 @@
         self.body(node.body)
         while True:
             else_ = node.orelse
-            if len(else_) == 1 and isinstance(else_[0], If):
+            if len(else_) == 2 and isinstance(else_[0], If):
                 node = else_[0]
                 self.newline()
                 self.write(&quot;elif &quot;)
</failure>
			<system-out>            if len(else_) == 1 and isinstance(else_[0], If):</system-out>
		</testcase>
		<testcase name="Mutant #673" file="mako/_ast_util.py" line="366">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -364,7 +364,7 @@
         self.body(node.body)
         while True:
             else_ = node.orelse
-            if len(else_) == 1 and isinstance(else_[0], If):
+            if len(else_) == 1 and isinstance(else_[1], If):
                 node = else_[0]
                 self.newline()
                 self.write(&quot;elif &quot;)
</failure>
			<system-out>            if len(else_) == 1 and isinstance(else_[0], If):</system-out>
		</testcase>
		<testcase name="Mutant #674" file="mako/_ast_util.py" line="366">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -364,7 +364,7 @@
         self.body(node.body)
         while True:
             else_ = node.orelse
-            if len(else_) == 1 and isinstance(else_[0], If):
+            if len(else_) == 1 or isinstance(else_[0], If):
                 node = else_[0]
                 self.newline()
                 self.write(&quot;elif &quot;)
</failure>
			<system-out>            if len(else_) == 1 and isinstance(else_[0], If):</system-out>
		</testcase>
		<testcase name="Mutant #675" file="mako/_ast_util.py" line="367">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -365,7 +365,7 @@
         while True:
             else_ = node.orelse
             if len(else_) == 1 and isinstance(else_[0], If):
-                node = else_[0]
+                node = else_[1]
                 self.newline()
                 self.write(&quot;elif &quot;)
                 self.visit(node.test)
</failure>
			<system-out>                node = else_[0]</system-out>
		</testcase>
		<testcase name="Mutant #676" file="mako/_ast_util.py" line="367">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -365,7 +365,7 @@
         while True:
             else_ = node.orelse
             if len(else_) == 1 and isinstance(else_[0], If):
-                node = else_[0]
+                node = None
                 self.newline()
                 self.write(&quot;elif &quot;)
                 self.visit(node.test)
</failure>
			<system-out>                node = else_[0]</system-out>
		</testcase>
		<testcase name="Mutant #677" file="mako/_ast_util.py" line="369">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -367,7 +367,7 @@
             if len(else_) == 1 and isinstance(else_[0], If):
                 node = else_[0]
                 self.newline()
-                self.write(&quot;elif &quot;)
+                self.write(&quot;XXelif XX&quot;)
                 self.visit(node.test)
                 self.write(&quot;:&quot;)
                 self.body(node.body)
</failure>
			<system-out>                self.write(&quot;elif &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #678" file="mako/_ast_util.py" line="371">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -369,7 +369,7 @@
                 self.newline()
                 self.write(&quot;elif &quot;)
                 self.visit(node.test)
-                self.write(&quot;:&quot;)
+                self.write(&quot;XX:XX&quot;)
                 self.body(node.body)
             else:
                 self.newline()
</failure>
			<system-out>                self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #679" file="mako/_ast_util.py" line="375">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -373,7 +373,7 @@
                 self.body(node.body)
             else:
                 self.newline()
-                self.write(&quot;else:&quot;)
+                self.write(&quot;XXelse:XX&quot;)
                 self.body(else_)
                 break
 
</failure>
			<system-out>                self.write(&quot;else:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #680" file="mako/_ast_util.py" line="377">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -375,7 +375,7 @@
                 self.newline()
                 self.write(&quot;else:&quot;)
                 self.body(else_)
-                break
+                continue
 
     def visit_For(self, node):
         self.newline()
</failure>
			<system-out>                break</system-out>
		</testcase>
		<testcase name="Mutant #681" file="mako/_ast_util.py" line="381">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -379,7 +379,7 @@
 
     def visit_For(self, node):
         self.newline()
-        self.write(&quot;for &quot;)
+        self.write(&quot;XXfor XX&quot;)
         self.visit(node.target)
         self.write(&quot; in &quot;)
         self.visit(node.iter)
</failure>
			<system-out>        self.write(&quot;for &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #682" file="mako/_ast_util.py" line="383">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -381,7 +381,7 @@
         self.newline()
         self.write(&quot;for &quot;)
         self.visit(node.target)
-        self.write(&quot; in &quot;)
+        self.write(&quot;XX in XX&quot;)
         self.visit(node.iter)
         self.write(&quot;:&quot;)
         self.body_or_else(node)
</failure>
			<system-out>        self.write(&quot; in &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #683" file="mako/_ast_util.py" line="385">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -383,7 +383,7 @@
         self.visit(node.target)
         self.write(&quot; in &quot;)
         self.visit(node.iter)
-        self.write(&quot;:&quot;)
+        self.write(&quot;XX:XX&quot;)
         self.body_or_else(node)
 
     def visit_While(self, node):
</failure>
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #684" file="mako/_ast_util.py" line="390">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -388,7 +388,7 @@
 
     def visit_While(self, node):
         self.newline()
-        self.write(&quot;while &quot;)
+        self.write(&quot;XXwhile XX&quot;)
         self.visit(node.test)
         self.write(&quot;:&quot;)
         self.body_or_else(node)
</failure>
			<system-out>        self.write(&quot;while &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #685" file="mako/_ast_util.py" line="392">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -390,7 +390,7 @@
         self.newline()
         self.write(&quot;while &quot;)
         self.visit(node.test)
-        self.write(&quot;:&quot;)
+        self.write(&quot;XX:XX&quot;)
         self.body_or_else(node)
 
     def visit_With(self, node):
</failure>
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #686" file="mako/_ast_util.py" line="397">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -395,7 +395,7 @@
 
     def visit_With(self, node):
         self.newline()
-        self.write(&quot;with &quot;)
+        self.write(&quot;XXwith XX&quot;)
         self.visit(node.context_expr)
         if node.optional_vars is not None:
             self.write(&quot; as &quot;)
</failure>
			<system-out>        self.write(&quot;with &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #687" file="mako/_ast_util.py" line="399">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -397,7 +397,7 @@
         self.newline()
         self.write(&quot;with &quot;)
         self.visit(node.context_expr)
-        if node.optional_vars is not None:
+        if node.optional_vars is  None:
             self.write(&quot; as &quot;)
             self.visit(node.optional_vars)
         self.write(&quot;:&quot;)
</failure>
			<system-out>        if node.optional_vars is not None:</system-out>
		</testcase>
		<testcase name="Mutant #688" file="mako/_ast_util.py" line="400">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -398,7 +398,7 @@
         self.write(&quot;with &quot;)
         self.visit(node.context_expr)
         if node.optional_vars is not None:
-            self.write(&quot; as &quot;)
+            self.write(&quot;XX as XX&quot;)
             self.visit(node.optional_vars)
         self.write(&quot;:&quot;)
         self.body(node.body)
</failure>
			<system-out>            self.write(&quot; as &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #689" file="mako/_ast_util.py" line="402">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -400,7 +400,7 @@
         if node.optional_vars is not None:
             self.write(&quot; as &quot;)
             self.visit(node.optional_vars)
-        self.write(&quot;:&quot;)
+        self.write(&quot;XX:XX&quot;)
         self.body(node.body)
 
     def visit_Pass(self, node):
</failure>
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #690" file="mako/_ast_util.py" line="407">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -405,7 +405,7 @@
 
     def visit_Pass(self, node):
         self.newline()
-        self.write(&quot;pass&quot;)
+        self.write(&quot;XXpassXX&quot;)
 
     def visit_Print(self, node):
         # XXX: python 2.6 only
</failure>
			<system-out>        self.write(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #691" file="mako/_ast_util.py" line="412">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -410,7 +410,7 @@
     def visit_Print(self, node):
         # XXX: python 2.6 only
         self.newline()
-        self.write(&quot;print &quot;)
+        self.write(&quot;XXprint XX&quot;)
         want_comma = False
         if node.dest is not None:
             self.write(&quot; &gt;&gt; &quot;)
</failure>
			<system-out>        self.write(&quot;print &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #692" file="mako/_ast_util.py" line="413">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -411,7 +411,7 @@
         # XXX: python 2.6 only
         self.newline()
         self.write(&quot;print &quot;)
-        want_comma = False
+        want_comma = True
         if node.dest is not None:
             self.write(&quot; &gt;&gt; &quot;)
             self.visit(node.dest)
</failure>
			<system-out>        want_comma = False</system-out>
		</testcase>
		<testcase name="Mutant #693" file="mako/_ast_util.py" line="413">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -411,7 +411,7 @@
         # XXX: python 2.6 only
         self.newline()
         self.write(&quot;print &quot;)
-        want_comma = False
+        want_comma = None
         if node.dest is not None:
             self.write(&quot; &gt;&gt; &quot;)
             self.visit(node.dest)
</failure>
			<system-out>        want_comma = False</system-out>
		</testcase>
		<testcase name="Mutant #694" file="mako/_ast_util.py" line="414">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -412,7 +412,7 @@
         self.newline()
         self.write(&quot;print &quot;)
         want_comma = False
-        if node.dest is not None:
+        if node.dest is  None:
             self.write(&quot; &gt;&gt; &quot;)
             self.visit(node.dest)
             want_comma = True
</failure>
			<system-out>        if node.dest is not None:</system-out>
		</testcase>
		<testcase name="Mutant #695" file="mako/_ast_util.py" line="415">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -413,7 +413,7 @@
         self.write(&quot;print &quot;)
         want_comma = False
         if node.dest is not None:
-            self.write(&quot; &gt;&gt; &quot;)
+            self.write(&quot;XX &gt;&gt; XX&quot;)
             self.visit(node.dest)
             want_comma = True
         for value in node.values:
</failure>
			<system-out>            self.write(&quot; &gt;&gt; &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #696" file="mako/_ast_util.py" line="417">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -415,7 +415,7 @@
         if node.dest is not None:
             self.write(&quot; &gt;&gt; &quot;)
             self.visit(node.dest)
-            want_comma = True
+            want_comma = False
         for value in node.values:
             if want_comma:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>            want_comma = True</system-out>
		</testcase>
		<testcase name="Mutant #697" file="mako/_ast_util.py" line="417">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -415,7 +415,7 @@
         if node.dest is not None:
             self.write(&quot; &gt;&gt; &quot;)
             self.visit(node.dest)
-            want_comma = True
+            want_comma = None
         for value in node.values:
             if want_comma:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>            want_comma = True</system-out>
		</testcase>
		<testcase name="Mutant #698" file="mako/_ast_util.py" line="420">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -418,7 +418,7 @@
             want_comma = True
         for value in node.values:
             if want_comma:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             self.visit(value)
             want_comma = True
         if not node.nl:
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #699" file="mako/_ast_util.py" line="422">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -420,7 +420,7 @@
             if want_comma:
                 self.write(&quot;, &quot;)
             self.visit(value)
-            want_comma = True
+            want_comma = False
         if not node.nl:
             self.write(&quot;,&quot;)
 
</failure>
			<system-out>            want_comma = True</system-out>
		</testcase>
		<testcase name="Mutant #700" file="mako/_ast_util.py" line="422">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -420,7 +420,7 @@
             if want_comma:
                 self.write(&quot;, &quot;)
             self.visit(value)
-            want_comma = True
+            want_comma = None
         if not node.nl:
             self.write(&quot;,&quot;)
 
</failure>
			<system-out>            want_comma = True</system-out>
		</testcase>
		<testcase name="Mutant #701" file="mako/_ast_util.py" line="423">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -421,7 +421,7 @@
                 self.write(&quot;, &quot;)
             self.visit(value)
             want_comma = True
-        if not node.nl:
+        if  node.nl:
             self.write(&quot;,&quot;)
 
     def visit_Delete(self, node):
</failure>
			<system-out>        if not node.nl:</system-out>
		</testcase>
		<testcase name="Mutant #702" file="mako/_ast_util.py" line="424">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -422,7 +422,7 @@
             self.visit(value)
             want_comma = True
         if not node.nl:
-            self.write(&quot;,&quot;)
+            self.write(&quot;XX,XX&quot;)
 
     def visit_Delete(self, node):
         self.newline()
</failure>
			<system-out>            self.write(&quot;,&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #703" file="mako/_ast_util.py" line="428">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -426,7 +426,7 @@
 
     def visit_Delete(self, node):
         self.newline()
-        self.write(&quot;del &quot;)
+        self.write(&quot;XXdel XX&quot;)
         for idx, target in enumerate(node):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        self.write(&quot;del &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #704" file="mako/_ast_util.py" line="431">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -429,7 +429,7 @@
         self.write(&quot;del &quot;)
         for idx, target in enumerate(node):
             if idx:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             self.visit(target)
 
     def visit_TryExcept(self, node):
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #705" file="mako/_ast_util.py" line="436">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -434,7 +434,7 @@
 
     def visit_TryExcept(self, node):
         self.newline()
-        self.write(&quot;try:&quot;)
+        self.write(&quot;XXtry:XX&quot;)
         self.body(node.body)
         for handler in node.handlers:
             self.visit(handler)
</failure>
			<system-out>        self.write(&quot;try:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #706" file="mako/_ast_util.py" line="443">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -441,7 +441,7 @@
 
     def visit_TryFinally(self, node):
         self.newline()
-        self.write(&quot;try:&quot;)
+        self.write(&quot;XXtry:XX&quot;)
         self.body(node.body)
         self.newline()
         self.write(&quot;finally:&quot;)
</failure>
			<system-out>        self.write(&quot;try:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #707" file="mako/_ast_util.py" line="446">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -444,7 +444,7 @@
         self.write(&quot;try:&quot;)
         self.body(node.body)
         self.newline()
-        self.write(&quot;finally:&quot;)
+        self.write(&quot;XXfinally:XX&quot;)
         self.body(node.finalbody)
 
     def visit_Global(self, node):
</failure>
			<system-out>        self.write(&quot;finally:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #708" file="mako/_ast_util.py" line="451">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -449,7 +449,7 @@
 
     def visit_Global(self, node):
         self.newline()
-        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;XXglobal XX&quot; + &quot;, &quot;.join(node.names))
 
     def visit_Nonlocal(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #709" file="mako/_ast_util.py" line="451">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -449,7 +449,7 @@
 
     def visit_Global(self, node):
         self.newline()
-        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;global &quot; - &quot;, &quot;.join(node.names))
 
     def visit_Nonlocal(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #710" file="mako/_ast_util.py" line="451">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -449,7 +449,7 @@
 
     def visit_Global(self, node):
         self.newline()
-        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;global &quot; + &quot;XX, XX&quot;.join(node.names))
 
     def visit_Nonlocal(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;global &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #711" file="mako/_ast_util.py" line="455">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -453,7 +453,7 @@
 
     def visit_Nonlocal(self, node):
         self.newline()
-        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;XXnonlocal XX&quot; + &quot;, &quot;.join(node.names))
 
     def visit_Return(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #712" file="mako/_ast_util.py" line="455">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -453,7 +453,7 @@
 
     def visit_Nonlocal(self, node):
         self.newline()
-        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;nonlocal &quot; - &quot;, &quot;.join(node.names))
 
     def visit_Return(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #713" file="mako/_ast_util.py" line="455">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -453,7 +453,7 @@
 
     def visit_Nonlocal(self, node):
         self.newline()
-        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))
+        self.write(&quot;nonlocal &quot; + &quot;XX, XX&quot;.join(node.names))
 
     def visit_Return(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;nonlocal &quot; + &quot;, &quot;.join(node.names))</system-out>
		</testcase>
		<testcase name="Mutant #714" file="mako/_ast_util.py" line="459">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -457,7 +457,7 @@
 
     def visit_Return(self, node):
         self.newline()
-        self.write(&quot;return &quot;)
+        self.write(&quot;XXreturn XX&quot;)
         self.visit(node.value)
 
     def visit_Break(self, node):
</failure>
			<system-out>        self.write(&quot;return &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #715" file="mako/_ast_util.py" line="464">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -462,7 +462,7 @@
 
     def visit_Break(self, node):
         self.newline()
-        self.write(&quot;break&quot;)
+        self.write(&quot;XXbreakXX&quot;)
 
     def visit_Continue(self, node):
         self.newline()
</failure>
			<system-out>        self.write(&quot;break&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #716" file="mako/_ast_util.py" line="468">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -466,7 +466,7 @@
 
     def visit_Continue(self, node):
         self.newline()
-        self.write(&quot;continue&quot;)
+        self.write(&quot;XXcontinueXX&quot;)
 
     def visit_Raise(self, node):
         # XXX: Python 2.6 / 3.0 compatibility
</failure>
			<system-out>        self.write(&quot;continue&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #717" file="mako/_ast_util.py" line="473">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -471,7 +471,7 @@
     def visit_Raise(self, node):
         # XXX: Python 2.6 / 3.0 compatibility
         self.newline()
-        self.write(&quot;raise&quot;)
+        self.write(&quot;XXraiseXX&quot;)
         if hasattr(node, &quot;exc&quot;) and node.exc is not None:
             self.write(&quot; &quot;)
             self.visit(node.exc)
</failure>
			<system-out>        self.write(&quot;raise&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #718" file="mako/_ast_util.py" line="474">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -472,7 +472,7 @@
         # XXX: Python 2.6 / 3.0 compatibility
         self.newline()
         self.write(&quot;raise&quot;)
-        if hasattr(node, &quot;exc&quot;) and node.exc is not None:
+        if hasattr(node, &quot;XXexcXX&quot;) and node.exc is not None:
             self.write(&quot; &quot;)
             self.visit(node.exc)
             if node.cause is not None:
</failure>
			<system-out>        if hasattr(node, &quot;exc&quot;) and node.exc is not None:</system-out>
		</testcase>
		<testcase name="Mutant #719" file="mako/_ast_util.py" line="474">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -472,7 +472,7 @@
         # XXX: Python 2.6 / 3.0 compatibility
         self.newline()
         self.write(&quot;raise&quot;)
-        if hasattr(node, &quot;exc&quot;) and node.exc is not None:
+        if hasattr(node, &quot;exc&quot;) and node.exc is  None:
             self.write(&quot; &quot;)
             self.visit(node.exc)
             if node.cause is not None:
</failure>
			<system-out>        if hasattr(node, &quot;exc&quot;) and node.exc is not None:</system-out>
		</testcase>
		<testcase name="Mutant #720" file="mako/_ast_util.py" line="474">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -472,7 +472,7 @@
         # XXX: Python 2.6 / 3.0 compatibility
         self.newline()
         self.write(&quot;raise&quot;)
-        if hasattr(node, &quot;exc&quot;) and node.exc is not None:
+        if hasattr(node, &quot;exc&quot;) or node.exc is not None:
             self.write(&quot; &quot;)
             self.visit(node.exc)
             if node.cause is not None:
</failure>
			<system-out>        if hasattr(node, &quot;exc&quot;) and node.exc is not None:</system-out>
		</testcase>
		<testcase name="Mutant #721" file="mako/_ast_util.py" line="475">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -473,7 +473,7 @@
         self.newline()
         self.write(&quot;raise&quot;)
         if hasattr(node, &quot;exc&quot;) and node.exc is not None:
-            self.write(&quot; &quot;)
+            self.write(&quot;XX XX&quot;)
             self.visit(node.exc)
             if node.cause is not None:
                 self.write(&quot; from &quot;)
</failure>
			<system-out>            self.write(&quot; &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #722" file="mako/_ast_util.py" line="477">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -475,7 +475,7 @@
         if hasattr(node, &quot;exc&quot;) and node.exc is not None:
             self.write(&quot; &quot;)
             self.visit(node.exc)
-            if node.cause is not None:
+            if node.cause is  None:
                 self.write(&quot; from &quot;)
                 self.visit(node.cause)
         elif hasattr(node, &quot;type&quot;) and node.type is not None:
</failure>
			<system-out>            if node.cause is not None:</system-out>
		</testcase>
		<testcase name="Mutant #723" file="mako/_ast_util.py" line="478">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -476,7 +476,7 @@
             self.write(&quot; &quot;)
             self.visit(node.exc)
             if node.cause is not None:
-                self.write(&quot; from &quot;)
+                self.write(&quot;XX from XX&quot;)
                 self.visit(node.cause)
         elif hasattr(node, &quot;type&quot;) and node.type is not None:
             self.visit(node.type)
</failure>
			<system-out>                self.write(&quot; from &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #724" file="mako/_ast_util.py" line="480">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -478,7 +478,7 @@
             if node.cause is not None:
                 self.write(&quot; from &quot;)
                 self.visit(node.cause)
-        elif hasattr(node, &quot;type&quot;) and node.type is not None:
+        elif hasattr(node, &quot;XXtypeXX&quot;) and node.type is not None:
             self.visit(node.type)
             if node.inst is not None:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        elif hasattr(node, &quot;type&quot;) and node.type is not None:</system-out>
		</testcase>
		<testcase name="Mutant #725" file="mako/_ast_util.py" line="480">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -478,7 +478,7 @@
             if node.cause is not None:
                 self.write(&quot; from &quot;)
                 self.visit(node.cause)
-        elif hasattr(node, &quot;type&quot;) and node.type is not None:
+        elif hasattr(node, &quot;type&quot;) and node.type is  None:
             self.visit(node.type)
             if node.inst is not None:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        elif hasattr(node, &quot;type&quot;) and node.type is not None:</system-out>
		</testcase>
		<testcase name="Mutant #726" file="mako/_ast_util.py" line="480">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -478,7 +478,7 @@
             if node.cause is not None:
                 self.write(&quot; from &quot;)
                 self.visit(node.cause)
-        elif hasattr(node, &quot;type&quot;) and node.type is not None:
+        elif hasattr(node, &quot;type&quot;) or node.type is not None:
             self.visit(node.type)
             if node.inst is not None:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        elif hasattr(node, &quot;type&quot;) and node.type is not None:</system-out>
		</testcase>
		<testcase name="Mutant #727" file="mako/_ast_util.py" line="482">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -480,7 +480,7 @@
                 self.visit(node.cause)
         elif hasattr(node, &quot;type&quot;) and node.type is not None:
             self.visit(node.type)
-            if node.inst is not None:
+            if node.inst is  None:
                 self.write(&quot;, &quot;)
                 self.visit(node.inst)
             if node.tback is not None:
</failure>
			<system-out>            if node.inst is not None:</system-out>
		</testcase>
		<testcase name="Mutant #728" file="mako/_ast_util.py" line="483">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -481,7 +481,7 @@
         elif hasattr(node, &quot;type&quot;) and node.type is not None:
             self.visit(node.type)
             if node.inst is not None:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
                 self.visit(node.inst)
             if node.tback is not None:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #729" file="mako/_ast_util.py" line="485">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -483,7 +483,7 @@
             if node.inst is not None:
                 self.write(&quot;, &quot;)
                 self.visit(node.inst)
-            if node.tback is not None:
+            if node.tback is  None:
                 self.write(&quot;, &quot;)
                 self.visit(node.tback)
 
</failure>
			<system-out>            if node.tback is not None:</system-out>
		</testcase>
		<testcase name="Mutant #730" file="mako/_ast_util.py" line="486">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -484,7 +484,7 @@
                 self.write(&quot;, &quot;)
                 self.visit(node.inst)
             if node.tback is not None:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
                 self.visit(node.tback)
 
     # Expressions
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #731" file="mako/_ast_util.py" line="493">
			<system-out>        self.write(&quot;.&quot; + node.attr)</system-out>
		</testcase>
		<testcase name="Mutant #732" file="mako/_ast_util.py" line="493">
			<system-out>        self.write(&quot;.&quot; + node.attr)</system-out>
		</testcase>
		<testcase name="Mutant #733" file="mako/_ast_util.py" line="496">
			<system-out>        want_comma = []</system-out>
		</testcase>
		<testcase name="Mutant #734" file="mako/_ast_util.py" line="500">
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #735" file="mako/_ast_util.py" line="502">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -500,7 +500,7 @@
             if want_comma:
                 self.write(&quot;, &quot;)
             else:
-                want_comma.append(True)
+                want_comma.append(False)
 
         self.visit(node.func)
         self.write(&quot;(&quot;)
</failure>
			<system-out>                want_comma.append(True)</system-out>
		</testcase>
		<testcase name="Mutant #736" file="mako/_ast_util.py" line="505">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #737" file="mako/_ast_util.py" line="511">
			<system-out>            self.write(keyword.arg + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #738" file="mako/_ast_util.py" line="511">
			<system-out>            self.write(keyword.arg + &quot;=&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #739" file="mako/_ast_util.py" line="513">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -511,7 +511,7 @@
             write_comma()
             self.write(keyword.arg + &quot;=&quot;)
             self.visit(keyword.value)
-        if getattr(node, &quot;starargs&quot;, None):
+        if getattr(node, &quot;XXstarargsXX&quot;, None):
             write_comma()
             self.write(&quot;*&quot;)
             self.visit(node.starargs)
</failure>
			<system-out>        if getattr(node, &quot;starargs&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #740" file="mako/_ast_util.py" line="515">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -513,7 +513,7 @@
             self.visit(keyword.value)
         if getattr(node, &quot;starargs&quot;, None):
             write_comma()
-            self.write(&quot;*&quot;)
+            self.write(&quot;XX*XX&quot;)
             self.visit(node.starargs)
         if getattr(node, &quot;kwargs&quot;, None):
             write_comma()
</failure>
			<system-out>            self.write(&quot;*&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #741" file="mako/_ast_util.py" line="517">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -515,7 +515,7 @@
             write_comma()
             self.write(&quot;*&quot;)
             self.visit(node.starargs)
-        if getattr(node, &quot;kwargs&quot;, None):
+        if getattr(node, &quot;XXkwargsXX&quot;, None):
             write_comma()
             self.write(&quot;**&quot;)
             self.visit(node.kwargs)
</failure>
			<system-out>        if getattr(node, &quot;kwargs&quot;, None):</system-out>
		</testcase>
		<testcase name="Mutant #742" file="mako/_ast_util.py" line="519">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -517,7 +517,7 @@
             self.visit(node.starargs)
         if getattr(node, &quot;kwargs&quot;, None):
             write_comma()
-            self.write(&quot;**&quot;)
+            self.write(&quot;XX**XX&quot;)
             self.visit(node.kwargs)
         self.write(&quot;)&quot;)
 
</failure>
			<system-out>            self.write(&quot;**&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #743" file="mako/_ast_util.py" line="521">
			<system-out>        self.write(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #744" file="mako/_ast_util.py" line="546">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #745" file="mako/_ast_util.py" line="547">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -545,7 +545,7 @@
 
     def visit_Tuple(self, node):
         self.write(&quot;(&quot;)
-        idx = -1
+        idx = +1
         for idx, item in enumerate(node.elts):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        idx = -1</system-out>
		</testcase>
		<testcase name="Mutant #746" file="mako/_ast_util.py" line="547">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -545,7 +545,7 @@
 
     def visit_Tuple(self, node):
         self.write(&quot;(&quot;)
-        idx = -1
+        idx = -2
         for idx, item in enumerate(node.elts):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        idx = -1</system-out>
		</testcase>
		<testcase name="Mutant #747" file="mako/_ast_util.py" line="547">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -545,7 +545,7 @@
 
     def visit_Tuple(self, node):
         self.write(&quot;(&quot;)
-        idx = -1
+        idx = None
         for idx, item in enumerate(node.elts):
             if idx:
                 self.write(&quot;, &quot;)
</failure>
			<system-out>        idx = -1</system-out>
		</testcase>
		<testcase name="Mutant #748" file="mako/_ast_util.py" line="550">
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #749" file="mako/_ast_util.py" line="552">
			<system-out>        self.write(idx and &quot;)&quot; or &quot;,)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #750" file="mako/_ast_util.py" line="552">
			<system-out>        self.write(idx and &quot;)&quot; or &quot;,)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #751" file="mako/_ast_util.py" line="552">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -550,7 +550,7 @@
             if idx:
                 self.write(&quot;, &quot;)
             self.visit(item)
-        self.write(idx and &quot;)&quot; or &quot;,)&quot;)
+        self.write(idx and &quot;)&quot; or &quot;XX,)XX&quot;)
 
     def sequence_visit(left, right):
         def visit(self, node):
</failure>
			<system-out>        self.write(idx and &quot;)&quot; or &quot;,)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #752" file="mako/_ast_util.py" line="552">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -550,7 +550,7 @@
             if idx:
                 self.write(&quot;, &quot;)
             self.visit(item)
-        self.write(idx and &quot;)&quot; or &quot;,)&quot;)
+        self.write(idx and &quot;)&quot; and &quot;,)&quot;)
 
     def sequence_visit(left, right):
         def visit(self, node):
</failure>
			<system-out>        self.write(idx and &quot;)&quot; or &quot;,)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #753" file="mako/_ast_util.py" line="559">
			<system-out>                    self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #754" file="mako/_ast_util.py" line="565">
			<system-out>    visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #755" file="mako/_ast_util.py" line="565">
			<system-out>    visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #756" file="mako/_ast_util.py" line="565">
			<system-out>    visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #757" file="mako/_ast_util.py" line="566">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -564,7 +564,7 @@
         return visit
 
     visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_Set = sequence_visit(&quot;XX{XX&quot;, &quot;}&quot;)
     del sequence_visit
 
     def visit_Dict(self, node):
</failure>
			<system-out>    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #758" file="mako/_ast_util.py" line="566">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -564,7 +564,7 @@
         return visit
 
     visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_Set = sequence_visit(&quot;{&quot;, &quot;XX}XX&quot;)
     del sequence_visit
 
     def visit_Dict(self, node):
</failure>
			<system-out>    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #759" file="mako/_ast_util.py" line="566">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -564,7 +564,7 @@
         return visit
 
     visit_List = sequence_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_Set = None
     del sequence_visit
 
     def visit_Dict(self, node):
</failure>
			<system-out>    visit_Set = sequence_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #760" file="mako/_ast_util.py" line="570">
			<system-out>        self.write(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #761" file="mako/_ast_util.py" line="573">
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #762" file="mako/_ast_util.py" line="575">
			<system-out>            self.write(&quot;: &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #763" file="mako/_ast_util.py" line="577">
			<system-out>        self.write(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #764" file="mako/_ast_util.py" line="580">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #765" file="mako/_ast_util.py" line="582">
			<system-out>        self.write(&quot; %s &quot; % BINOP_SYMBOLS[type(node.op)])</system-out>
		</testcase>
		<testcase name="Mutant #766" file="mako/_ast_util.py" line="582">
			<system-out>        self.write(&quot; %s &quot; % BINOP_SYMBOLS[type(node.op)])</system-out>
		</testcase>
		<testcase name="Mutant #767" file="mako/_ast_util.py" line="584">
			<system-out>        self.write(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #768" file="mako/_ast_util.py" line="587">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #769" file="mako/_ast_util.py" line="590">
			<system-out>                self.write(&quot; %s &quot; % BOOLOP_SYMBOLS[type(node.op)])</system-out>
		</testcase>
		<testcase name="Mutant #770" file="mako/_ast_util.py" line="590">
			<system-out>                self.write(&quot; %s &quot; % BOOLOP_SYMBOLS[type(node.op)])</system-out>
		</testcase>
		<testcase name="Mutant #771" file="mako/_ast_util.py" line="592">
			<system-out>        self.write(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #772" file="mako/_ast_util.py" line="595">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #773" file="mako/_ast_util.py" line="598">
			<system-out>            self.write(&quot; %s &quot; % CMPOP_SYMBOLS[type(op)])</system-out>
		</testcase>
		<testcase name="Mutant #774" file="mako/_ast_util.py" line="598">
			<system-out>            self.write(&quot; %s &quot; % CMPOP_SYMBOLS[type(op)])</system-out>
		</testcase>
		<testcase name="Mutant #775" file="mako/_ast_util.py" line="600">
			<system-out>        self.write(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #776" file="mako/_ast_util.py" line="603">
			<system-out>        self.write(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #777" file="mako/_ast_util.py" line="604">
			<system-out>        op = UNARYOP_SYMBOLS[type(node.op)]</system-out>
		</testcase>
		<testcase name="Mutant #778" file="mako/_ast_util.py" line="606">
			<system-out>        if op == &quot;not&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #779" file="mako/_ast_util.py" line="606">
			<system-out>        if op == &quot;not&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #780" file="mako/_ast_util.py" line="607">
			<system-out>            self.write(&quot; &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #781" file="mako/_ast_util.py" line="609">
			<system-out>        self.write(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #782" file="mako/_ast_util.py" line="613">
			<system-out>        self.write(&quot;[&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #783" file="mako/_ast_util.py" line="615">
			<system-out>        self.write(&quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #784" file="mako/_ast_util.py" line="618">
			<system-out>        if node.lower is not None:</system-out>
		</testcase>
		<testcase name="Mutant #785" file="mako/_ast_util.py" line="620">
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #786" file="mako/_ast_util.py" line="621">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -619,7 +619,7 @@
         if node.lower is not None:
             self.visit(node.lower)
         self.write(&quot;:&quot;)
-        if node.upper is not None:
+        if node.upper is  None:
             self.visit(node.upper)
         if node.step is not None:
             self.write(&quot;:&quot;)
</failure>
			<system-out>        if node.upper is not None:</system-out>
		</testcase>
		<testcase name="Mutant #787" file="mako/_ast_util.py" line="623">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -621,7 +621,7 @@
         self.write(&quot;:&quot;)
         if node.upper is not None:
             self.visit(node.upper)
-        if node.step is not None:
+        if node.step is  None:
             self.write(&quot;:&quot;)
             if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
                 self.visit(node.step)
</failure>
			<system-out>        if node.step is not None:</system-out>
		</testcase>
		<testcase name="Mutant #788" file="mako/_ast_util.py" line="624">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -622,7 +622,7 @@
         if node.upper is not None:
             self.visit(node.upper)
         if node.step is not None:
-            self.write(&quot;:&quot;)
+            self.write(&quot;XX:XX&quot;)
             if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
                 self.visit(node.step)
 
</failure>
			<system-out>            self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #789" file="mako/_ast_util.py" line="625">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -623,7 +623,7 @@
             self.visit(node.upper)
         if node.step is not None:
             self.write(&quot;:&quot;)
-            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
+            if  (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
                 self.visit(node.step)
 
     def visit_ExtSlice(self, node):
</failure>
			<system-out>            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #790" file="mako/_ast_util.py" line="625">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -623,7 +623,7 @@
             self.visit(node.upper)
         if node.step is not None:
             self.write(&quot;:&quot;)
-            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
+            if not (isinstance(node.step, Name) and node.step.id != &quot;None&quot;):
                 self.visit(node.step)
 
     def visit_ExtSlice(self, node):
</failure>
			<system-out>            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #791" file="mako/_ast_util.py" line="625">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -623,7 +623,7 @@
             self.visit(node.upper)
         if node.step is not None:
             self.write(&quot;:&quot;)
-            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
+            if not (isinstance(node.step, Name) and node.step.id == &quot;XXNoneXX&quot;):
                 self.visit(node.step)
 
     def visit_ExtSlice(self, node):
</failure>
			<system-out>            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #792" file="mako/_ast_util.py" line="625">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -623,7 +623,7 @@
             self.visit(node.upper)
         if node.step is not None:
             self.write(&quot;:&quot;)
-            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):
+            if not (isinstance(node.step, Name) or node.step.id == &quot;None&quot;):
                 self.visit(node.step)
 
     def visit_ExtSlice(self, node):
</failure>
			<system-out>            if not (isinstance(node.step, Name) and node.step.id == &quot;None&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #793" file="mako/_ast_util.py" line="631">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -629,7 +629,7 @@
     def visit_ExtSlice(self, node):
         for idx, item in node.dims:
             if idx:
-                self.write(&quot;, &quot;)
+                self.write(&quot;XX, XX&quot;)
             self.visit(item)
 
     def visit_Yield(self, node):
</failure>
			<system-out>                self.write(&quot;, &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #794" file="mako/_ast_util.py" line="635">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -633,7 +633,7 @@
             self.visit(item)
 
     def visit_Yield(self, node):
-        self.write(&quot;yield &quot;)
+        self.write(&quot;XXyield XX&quot;)
         self.visit(node.value)
 
     def visit_Lambda(self, node):
</failure>
			<system-out>        self.write(&quot;yield &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #795" file="mako/_ast_util.py" line="639">
			<system-out>        self.write(&quot;lambda &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #796" file="mako/_ast_util.py" line="641">
			<system-out>        self.write(&quot;: &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #797" file="mako/_ast_util.py" line="645">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -643,7 +643,7 @@
         self.visit(node.body)
 
     def visit_Ellipsis(self, node):
-        self.write(&quot;Ellipsis&quot;)
+        self.write(&quot;XXEllipsisXX&quot;)
 
     def generator_visit(left, right):
         def visit(self, node):
</failure>
			<system-out>        self.write(&quot;Ellipsis&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #798" file="mako/_ast_util.py" line="657">
			<system-out>    visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #799" file="mako/_ast_util.py" line="657">
			<system-out>    visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #800" file="mako/_ast_util.py" line="657">
			<system-out>    visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #801" file="mako/_ast_util.py" line="658">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -656,7 +656,7 @@
         return visit
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
+    visit_GeneratorExp = generator_visit(&quot;XX(XX&quot;, &quot;)&quot;)
     visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
     del generator_visit
 
</failure>
			<system-out>    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #802" file="mako/_ast_util.py" line="658">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -656,7 +656,7 @@
         return visit
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
+    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;XX)XX&quot;)
     visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
     del generator_visit
 
</failure>
			<system-out>    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #803" file="mako/_ast_util.py" line="658">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -656,7 +656,7 @@
         return visit
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
-    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
+    visit_GeneratorExp = None
     visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
     del generator_visit
 
</failure>
			<system-out>    visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #804" file="mako/_ast_util.py" line="659">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -657,7 +657,7 @@
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
     visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
-    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_SetComp = generator_visit(&quot;XX{XX&quot;, &quot;}&quot;)
     del generator_visit
 
     def visit_DictComp(self, node):
</failure>
			<system-out>    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #805" file="mako/_ast_util.py" line="659">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -657,7 +657,7 @@
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
     visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
-    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_SetComp = generator_visit(&quot;{&quot;, &quot;XX}XX&quot;)
     del generator_visit
 
     def visit_DictComp(self, node):
</failure>
			<system-out>    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #806" file="mako/_ast_util.py" line="659">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -657,7 +657,7 @@
 
     visit_ListComp = generator_visit(&quot;[&quot;, &quot;]&quot;)
     visit_GeneratorExp = generator_visit(&quot;(&quot;, &quot;)&quot;)
-    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)
+    visit_SetComp = None
     del generator_visit
 
     def visit_DictComp(self, node):
</failure>
			<system-out>    visit_SetComp = generator_visit(&quot;{&quot;, &quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #807" file="mako/_ast_util.py" line="663">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -661,7 +661,7 @@
     del generator_visit
 
     def visit_DictComp(self, node):
-        self.write(&quot;{&quot;)
+        self.write(&quot;XX{XX&quot;)
         self.visit(node.key)
         self.write(&quot;: &quot;)
         self.visit(node.value)
</failure>
			<system-out>        self.write(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #808" file="mako/_ast_util.py" line="665">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -663,7 +663,7 @@
     def visit_DictComp(self, node):
         self.write(&quot;{&quot;)
         self.visit(node.key)
-        self.write(&quot;: &quot;)
+        self.write(&quot;XX: XX&quot;)
         self.visit(node.value)
         for comprehension in node.generators:
             self.visit(comprehension)
</failure>
			<system-out>        self.write(&quot;: &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #809" file="mako/_ast_util.py" line="669">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -667,7 +667,7 @@
         self.visit(node.value)
         for comprehension in node.generators:
             self.visit(comprehension)
-        self.write(&quot;}&quot;)
+        self.write(&quot;XX}XX&quot;)
 
     def visit_IfExp(self, node):
         self.visit(node.body)
</failure>
			<system-out>        self.write(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #810" file="mako/_ast_util.py" line="673">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -671,7 +671,7 @@
 
     def visit_IfExp(self, node):
         self.visit(node.body)
-        self.write(&quot; if &quot;)
+        self.write(&quot;XX if XX&quot;)
         self.visit(node.test)
         self.write(&quot; else &quot;)
         self.visit(node.orelse)
</failure>
			<system-out>        self.write(&quot; if &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #811" file="mako/_ast_util.py" line="675">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -673,7 +673,7 @@
         self.visit(node.body)
         self.write(&quot; if &quot;)
         self.visit(node.test)
-        self.write(&quot; else &quot;)
+        self.write(&quot;XX else XX&quot;)
         self.visit(node.orelse)
 
     def visit_Starred(self, node):
</failure>
			<system-out>        self.write(&quot; else &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #812" file="mako/_ast_util.py" line="679">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -677,7 +677,7 @@
         self.visit(node.orelse)
 
     def visit_Starred(self, node):
-        self.write(&quot;*&quot;)
+        self.write(&quot;XX*XX&quot;)
         self.visit(node.value)
 
     def visit_Repr(self, node):
</failure>
			<system-out>        self.write(&quot;*&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #813" file="mako/_ast_util.py" line="684">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -682,7 +682,7 @@
 
     def visit_Repr(self, node):
         # XXX: python 2.6 only
-        self.write(&quot;`&quot;)
+        self.write(&quot;XX`XX&quot;)
         self.visit(node.value)
         self.write(&quot;`&quot;)
 
</failure>
			<system-out>        self.write(&quot;`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #814" file="mako/_ast_util.py" line="686">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -684,7 +684,7 @@
         # XXX: python 2.6 only
         self.write(&quot;`&quot;)
         self.visit(node.value)
-        self.write(&quot;`&quot;)
+        self.write(&quot;XX`XX&quot;)
 
     # Helper Nodes
 
</failure>
			<system-out>        self.write(&quot;`&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #815" file="mako/_ast_util.py" line="692">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -690,7 +690,7 @@
 
     def visit_alias(self, node):
         self.write(node.name)
-        if node.asname is not None:
+        if node.asname is  None:
             self.write(&quot; as &quot; + node.asname)
 
     def visit_comprehension(self, node):
</failure>
			<system-out>        if node.asname is not None:</system-out>
		</testcase>
		<testcase name="Mutant #816" file="mako/_ast_util.py" line="693">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -691,7 +691,7 @@
     def visit_alias(self, node):
         self.write(node.name)
         if node.asname is not None:
-            self.write(&quot; as &quot; + node.asname)
+            self.write(&quot;XX as XX&quot; + node.asname)
 
     def visit_comprehension(self, node):
         self.write(&quot; for &quot;)
</failure>
			<system-out>            self.write(&quot; as &quot; + node.asname)</system-out>
		</testcase>
		<testcase name="Mutant #817" file="mako/_ast_util.py" line="693">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -691,7 +691,7 @@
     def visit_alias(self, node):
         self.write(node.name)
         if node.asname is not None:
-            self.write(&quot; as &quot; + node.asname)
+            self.write(&quot; as &quot; - node.asname)
 
     def visit_comprehension(self, node):
         self.write(&quot; for &quot;)
</failure>
			<system-out>            self.write(&quot; as &quot; + node.asname)</system-out>
		</testcase>
		<testcase name="Mutant #818" file="mako/_ast_util.py" line="696">
			<system-out>        self.write(&quot; for &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #819" file="mako/_ast_util.py" line="698">
			<system-out>        self.write(&quot; in &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #820" file="mako/_ast_util.py" line="702">
			<system-out>                self.write(&quot; if &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #821" file="mako/_ast_util.py" line="707">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -705,7 +705,7 @@
 
     def visit_excepthandler(self, node):
         self.newline()
-        self.write(&quot;except&quot;)
+        self.write(&quot;XXexceptXX&quot;)
         if node.type is not None:
             self.write(&quot; &quot;)
             self.visit(node.type)
</failure>
			<system-out>        self.write(&quot;except&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #822" file="mako/_ast_util.py" line="708">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -706,7 +706,7 @@
     def visit_excepthandler(self, node):
         self.newline()
         self.write(&quot;except&quot;)
-        if node.type is not None:
+        if node.type is  None:
             self.write(&quot; &quot;)
             self.visit(node.type)
             if node.name is not None:
</failure>
			<system-out>        if node.type is not None:</system-out>
		</testcase>
		<testcase name="Mutant #823" file="mako/_ast_util.py" line="709">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -707,7 +707,7 @@
         self.newline()
         self.write(&quot;except&quot;)
         if node.type is not None:
-            self.write(&quot; &quot;)
+            self.write(&quot;XX XX&quot;)
             self.visit(node.type)
             if node.name is not None:
                 self.write(&quot; as &quot;)
</failure>
			<system-out>            self.write(&quot; &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #824" file="mako/_ast_util.py" line="711">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -709,7 +709,7 @@
         if node.type is not None:
             self.write(&quot; &quot;)
             self.visit(node.type)
-            if node.name is not None:
+            if node.name is  None:
                 self.write(&quot; as &quot;)
                 self.visit(node.name)
         self.write(&quot;:&quot;)
</failure>
			<system-out>            if node.name is not None:</system-out>
		</testcase>
		<testcase name="Mutant #825" file="mako/_ast_util.py" line="712">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -710,7 +710,7 @@
             self.write(&quot; &quot;)
             self.visit(node.type)
             if node.name is not None:
-                self.write(&quot; as &quot;)
+                self.write(&quot;XX as XX&quot;)
                 self.visit(node.name)
         self.write(&quot;:&quot;)
         self.body(node.body)
</failure>
			<system-out>                self.write(&quot; as &quot;)</system-out>
		</testcase>
		<testcase name="Mutant #826" file="mako/_ast_util.py" line="714">
			<failure type="failure" message="bad_survived">--- mako/_ast_util.py
+++ mako/_ast_util.py
@@ -712,6 +712,6 @@
             if node.name is not None:
                 self.write(&quot; as &quot;)
                 self.visit(node.name)
-        self.write(&quot;:&quot;)
+        self.write(&quot;XX:XX&quot;)
         self.body(node.body)
 
</failure>
			<system-out>        self.write(&quot;:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #827" file="mako/ast.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;represents information about a string containing Python code&quot;&quot;&quot;
 
     def __init__(self, code, **exception_kwargs):
-        self.code = code
+        self.code = None
 
         # represents all identifiers which are assigned to at some point in
         # the code
</failure>
			<system-out>        self.code = code</system-out>
		</testcase>
		<testcase name="Mutant #828" file="mako/ast.py" line="25">
			<system-out>        self.declared_identifiers = set()</system-out>
		</testcase>
		<testcase name="Mutant #829" file="mako/ast.py" line="29">
			<system-out>        self.undeclared_identifiers = set()</system-out>
		</testcase>
		<testcase name="Mutant #830" file="mako/ast.py" line="42">
			<system-out>            expr = pyparser.parse(code.lstrip(), &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #831" file="mako/ast.py" line="42">
			<system-out>            expr = pyparser.parse(code.lstrip(), &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #832" file="mako/ast.py" line="44">
			<system-out>            expr = code</system-out>
		</testcase>
		<testcase name="Mutant #833" file="mako/ast.py" line="46">
			<system-out>        f = pyparser.FindIdentifiers(self, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #834" file="mako/ast.py" line="55">
			<system-out>        self.codeargs = []</system-out>
		</testcase>
		<testcase name="Mutant #835" file="mako/ast.py" line="56">
			<system-out>        self.args = []</system-out>
		</testcase>
		<testcase name="Mutant #836" file="mako/ast.py" line="57">
			<system-out>        self.declared_identifiers = set()</system-out>
		</testcase>
		<testcase name="Mutant #837" file="mako/ast.py" line="58">
			<system-out>        self.undeclared_identifiers = set()</system-out>
		</testcase>
		<testcase name="Mutant #838" file="mako/ast.py" line="60">
			<system-out>            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;,\s*$&quot;, code):</system-out>
		</testcase>
		<testcase name="Mutant #839" file="mako/ast.py" line="60">
			<system-out>            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;,\s*$&quot;, code):</system-out>
		</testcase>
		<testcase name="Mutant #840" file="mako/ast.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -58,7 +58,7 @@
         self.declared_identifiers = set()
         self.undeclared_identifiers = set()
         if isinstance(code, compat.string_types):
-            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;,\s*$&quot;, code):
+            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;XX,\s*$XX&quot;, code):
                 # if theres text and no trailing comma, insure its parsed
                 # as a tuple by adding a trailing comma
                 code += &quot;,&quot;
</failure>
			<system-out>            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;,\s*$&quot;, code):</system-out>
		</testcase>
		<testcase name="Mutant #841" file="mako/ast.py" line="60">
			<system-out>            if re.match(r&quot;\S&quot;, code) and not re.match(r&quot;,\s*$&quot;, code):</system-out>
		</testcase>
		<testcase name="Mutant #842" file="mako/ast.py" line="63">
			<system-out>                code += &quot;,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #843" file="mako/ast.py" line="63">
			<system-out>                code += &quot;,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #844" file="mako/ast.py" line="63">
			<system-out>                code += &quot;,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #845" file="mako/ast.py" line="64">
			<system-out>            expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #846" file="mako/ast.py" line="64">
			<system-out>            expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #847" file="mako/ast.py" line="66">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -64,7 +64,7 @@
                 code += &quot;,&quot;
             expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)
         else:
-            expr = code
+            expr = None
 
         f = pyparser.FindTuple(self, PythonCode, **exception_kwargs)
         f.visit(expr)
</failure>
			<system-out>            expr = code</system-out>
		</testcase>
		<testcase name="Mutant #848" file="mako/ast.py" line="68">
			<system-out>        f = pyparser.FindTuple(self, PythonCode, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #849" file="mako/ast.py" line="86">
			<system-out>        m = re.match(r&quot;^(\w+)(?:\s+(.*?))?:\s*(#|$)&quot;, code.strip(), re.S)</system-out>
		</testcase>
		<testcase name="Mutant #850" file="mako/ast.py" line="86">
			<system-out>        m = re.match(r&quot;^(\w+)(?:\s+(.*?))?:\s*(#|$)&quot;, code.strip(), re.S)</system-out>
		</testcase>
		<testcase name="Mutant #851" file="mako/ast.py" line="87">
			<system-out>        if not m:</system-out>
		</testcase>
		<testcase name="Mutant #852" file="mako/ast.py" line="89">
			<system-out>                &quot;Fragment '%s' is not a partial control statement&quot; % code,</system-out>
		</testcase>
		<testcase name="Mutant #853" file="mako/ast.py" line="89">
			<system-out>                &quot;Fragment '%s' is not a partial control statement&quot; % code,</system-out>
		</testcase>
		<testcase name="Mutant #854" file="mako/ast.py" line="92">
			<system-out>        if m.group(3):</system-out>
		</testcase>
		<testcase name="Mutant #855" file="mako/ast.py" line="93">
			<system-out>            code = code[: m.start(3)]</system-out>
		</testcase>
		<testcase name="Mutant #856" file="mako/ast.py" line="93">
			<system-out>            code = code[: m.start(3)]</system-out>
		</testcase>
		<testcase name="Mutant #857" file="mako/ast.py" line="94">
			<system-out>        (keyword, expr) = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #858" file="mako/ast.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -92,7 +92,7 @@
             )
         if m.group(3):
             code = code[: m.start(3)]
-        (keyword, expr) = m.group(1, 2)
+        (keyword, expr) = m.group(1, 3)
         if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:
             code = code + &quot;pass&quot;
         elif keyword == &quot;try&quot;:
</failure>
			<system-out>        (keyword, expr) = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #859" file="mako/ast.py" line="94">
			<system-out>        (keyword, expr) = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #860" file="mako/ast.py" line="95">
			<system-out>        if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #861" file="mako/ast.py" line="95">
			<system-out>        if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #862" file="mako/ast.py" line="95">
			<system-out>        if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #863" file="mako/ast.py" line="95">
			<system-out>        if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #864" file="mako/ast.py" line="96">
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #865" file="mako/ast.py" line="96">
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #866" file="mako/ast.py" line="96">
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #867" file="mako/ast.py" line="97">
			<system-out>        elif keyword == &quot;try&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #868" file="mako/ast.py" line="97">
			<system-out>        elif keyword == &quot;try&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #869" file="mako/ast.py" line="98">
			<system-out>            code = code + &quot;pass\nexcept:pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #870" file="mako/ast.py" line="98">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -96,7 +96,7 @@
         if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:
             code = code + &quot;pass&quot;
         elif keyword == &quot;try&quot;:
-            code = code + &quot;pass\nexcept:pass&quot;
+            code = code + &quot;XXpass\nexcept:passXX&quot;
         elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:
             code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;
         elif keyword == &quot;except&quot;:
</failure>
			<system-out>            code = code + &quot;pass\nexcept:pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #871" file="mako/ast.py" line="98">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -96,7 +96,7 @@
         if keyword in [&quot;for&quot;, &quot;if&quot;, &quot;while&quot;]:
             code = code + &quot;pass&quot;
         elif keyword == &quot;try&quot;:
-            code = code + &quot;pass\nexcept:pass&quot;
+            code = None
         elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:
             code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;
         elif keyword == &quot;except&quot;:
</failure>
			<system-out>            code = code + &quot;pass\nexcept:pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #872" file="mako/ast.py" line="99">
			<system-out>        elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #873" file="mako/ast.py" line="99">
			<system-out>        elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #874" file="mako/ast.py" line="99">
			<system-out>        elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #875" file="mako/ast.py" line="99">
			<system-out>        elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #876" file="mako/ast.py" line="99">
			<system-out>        elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #877" file="mako/ast.py" line="100">
			<system-out>            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #878" file="mako/ast.py" line="100">
			<system-out>            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #879" file="mako/ast.py" line="100">
			<system-out>            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #880" file="mako/ast.py" line="100">
			<system-out>            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #881" file="mako/ast.py" line="100">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -98,7 +98,7 @@
         elif keyword == &quot;try&quot;:
             code = code + &quot;pass\nexcept:pass&quot;
         elif keyword == &quot;elif&quot; or keyword == &quot;else&quot;:
-            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;
+            code = None
         elif keyword == &quot;except&quot;:
             code = &quot;try:pass\n&quot; + code + &quot;pass&quot;
         elif keyword == &quot;with&quot;:
</failure>
			<system-out>            code = &quot;if False:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #882" file="mako/ast.py" line="101">
			<system-out>        elif keyword == &quot;except&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #883" file="mako/ast.py" line="101">
			<system-out>        elif keyword == &quot;except&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #884" file="mako/ast.py" line="102">
			<system-out>            code = &quot;try:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #885" file="mako/ast.py" line="102">
			<system-out>            code = &quot;try:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #886" file="mako/ast.py" line="102">
			<system-out>            code = &quot;try:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #887" file="mako/ast.py" line="102">
			<system-out>            code = &quot;try:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #888" file="mako/ast.py" line="102">
			<system-out>            code = &quot;try:pass\n&quot; + code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #889" file="mako/ast.py" line="103">
			<system-out>        elif keyword == &quot;with&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #890" file="mako/ast.py" line="103">
			<system-out>        elif keyword == &quot;with&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #891" file="mako/ast.py" line="104">
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #892" file="mako/ast.py" line="104">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -102,7 +102,7 @@
         elif keyword == &quot;except&quot;:
             code = &quot;try:pass\n&quot; + code + &quot;pass&quot;
         elif keyword == &quot;with&quot;:
-            code = code + &quot;pass&quot;
+            code = code + &quot;XXpassXX&quot;
         else:
             raise exceptions.CompileException(
                 &quot;Unsupported control keyword: '%s'&quot; % keyword,
</failure>
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #893" file="mako/ast.py" line="104">
			<system-out>            code = code + &quot;pass&quot;</system-out>
		</testcase>
		<testcase name="Mutant #894" file="mako/ast.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -105,7 +105,7 @@
             code = code + &quot;pass&quot;
         else:
             raise exceptions.CompileException(
-                &quot;Unsupported control keyword: '%s'&quot; % keyword,
+                &quot;XXUnsupported control keyword: '%s'XX&quot; % keyword,
                 **exception_kwargs
             )
         super(PythonFragment, self).__init__(code, **exception_kwargs)
</failure>
			<system-out>                &quot;Unsupported control keyword: '%s'&quot; % keyword,</system-out>
		</testcase>
		<testcase name="Mutant #895" file="mako/ast.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -105,7 +105,7 @@
             code = code + &quot;pass&quot;
         else:
             raise exceptions.CompileException(
-                &quot;Unsupported control keyword: '%s'&quot; % keyword,
+                &quot;Unsupported control keyword: '%s'&quot; / keyword,
                 **exception_kwargs
             )
         super(PythonFragment, self).__init__(code, **exception_kwargs)
</failure>
			<system-out>                &quot;Unsupported control keyword: '%s'&quot; % keyword,</system-out>
		</testcase>
		<testcase name="Mutant #896" file="mako/ast.py" line="117">
			<system-out>    def __init__(self, code, allow_kwargs=True, **exception_kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #897" file="mako/ast.py" line="118">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -116,7 +116,7 @@
     &quot;&quot;&quot;function declaration&quot;&quot;&quot;
 
     def __init__(self, code, allow_kwargs=True, **exception_kwargs):
-        self.code = code
+        self.code = None
         expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)
 
         f = pyparser.ParseFunc(self, **exception_kwargs)
</failure>
			<system-out>        self.code = code</system-out>
		</testcase>
		<testcase name="Mutant #898" file="mako/ast.py" line="119">
			<system-out>        expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #899" file="mako/ast.py" line="119">
			<system-out>        expr = pyparser.parse(code, &quot;exec&quot;, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #900" file="mako/ast.py" line="121">
			<system-out>        f = pyparser.ParseFunc(self, **exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #901" file="mako/ast.py" line="123">
			<system-out>        if not hasattr(self, &quot;funcname&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #902" file="mako/ast.py" line="123">
			<system-out>        if not hasattr(self, &quot;funcname&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #903" file="mako/ast.py" line="125">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -123,7 +123,7 @@
         f.visit(expr)
         if not hasattr(self, &quot;funcname&quot;):
             raise exceptions.CompileException(
-                &quot;Code '%s' is not a function declaration&quot; % code,
+                &quot;XXCode '%s' is not a function declarationXX&quot; % code,
                 **exception_kwargs
             )
         if not allow_kwargs and self.kwargs:
</failure>
			<system-out>                &quot;Code '%s' is not a function declaration&quot; % code,</system-out>
		</testcase>
		<testcase name="Mutant #904" file="mako/ast.py" line="125">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -123,7 +123,7 @@
         f.visit(expr)
         if not hasattr(self, &quot;funcname&quot;):
             raise exceptions.CompileException(
-                &quot;Code '%s' is not a function declaration&quot; % code,
+                &quot;Code '%s' is not a function declaration&quot; / code,
                 **exception_kwargs
             )
         if not allow_kwargs and self.kwargs:
</failure>
			<system-out>                &quot;Code '%s' is not a function declaration&quot; % code,</system-out>
		</testcase>
		<testcase name="Mutant #905" file="mako/ast.py" line="128">
			<system-out>        if not allow_kwargs and self.kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #906" file="mako/ast.py" line="128">
			<system-out>        if not allow_kwargs and self.kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #907" file="mako/ast.py" line="130">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -128,7 +128,7 @@
             )
         if not allow_kwargs and self.kwargs:
             raise exceptions.CompileException(
-                &quot;'**%s' keyword argument not allowed here&quot;
+                &quot;XX'**%s' keyword argument not allowed hereXX&quot;
                 % self.kwargnames[-1],
                 **exception_kwargs
             )
</failure>
			<system-out>                &quot;'**%s' keyword argument not allowed here&quot;</system-out>
		</testcase>
		<testcase name="Mutant #908" file="mako/ast.py" line="131">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -129,7 +129,7 @@
         if not allow_kwargs and self.kwargs:
             raise exceptions.CompileException(
                 &quot;'**%s' keyword argument not allowed here&quot;
-                % self.kwargnames[-1],
+                / self.kwargnames[-1],
                 **exception_kwargs
             )
 
</failure>
			<system-out>                % self.kwargnames[-1],</system-out>
		</testcase>
		<testcase name="Mutant #909" file="mako/ast.py" line="131">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -129,7 +129,7 @@
         if not allow_kwargs and self.kwargs:
             raise exceptions.CompileException(
                 &quot;'**%s' keyword argument not allowed here&quot;
-                % self.kwargnames[-1],
+                % self.kwargnames[+1],
                 **exception_kwargs
             )
 
</failure>
			<system-out>                % self.kwargnames[-1],</system-out>
		</testcase>
		<testcase name="Mutant #910" file="mako/ast.py" line="131">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -129,7 +129,7 @@
         if not allow_kwargs and self.kwargs:
             raise exceptions.CompileException(
                 &quot;'**%s' keyword argument not allowed here&quot;
-                % self.kwargnames[-1],
+                % self.kwargnames[-2],
                 **exception_kwargs
             )
 
</failure>
			<system-out>                % self.kwargnames[-1],</system-out>
		</testcase>
		<testcase name="Mutant #911" file="mako/ast.py" line="135">
			<system-out>    def get_argument_expressions(self, as_call=False):</system-out>
		</testcase>
		<testcase name="Mutant #912" file="mako/ast.py" line="144">
			<system-out>        namedecls = []</system-out>
		</testcase>
		<testcase name="Mutant #913" file="mako/ast.py" line="147">
			<system-out>        argnames = self.argnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #914" file="mako/ast.py" line="147">
			<system-out>        argnames = self.argnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #915" file="mako/ast.py" line="147">
			<system-out>        argnames = self.argnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #916" file="mako/ast.py" line="148">
			<system-out>        kwargnames = self.kwargnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #917" file="mako/ast.py" line="148">
			<system-out>        kwargnames = self.kwargnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #918" file="mako/ast.py" line="148">
			<system-out>        kwargnames = self.kwargnames[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #919" file="mako/ast.py" line="149">
			<system-out>        defaults = self.defaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #920" file="mako/ast.py" line="149">
			<system-out>        defaults = self.defaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #921" file="mako/ast.py" line="149">
			<system-out>        defaults = self.defaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #922" file="mako/ast.py" line="150">
			<system-out>        kwdefaults = self.kwdefaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #923" file="mako/ast.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/ast.py
+++ mako/ast.py
@@ -148,7 +148,7 @@
         argnames = self.argnames[::-1]
         kwargnames = self.kwargnames[::-1]
         defaults = self.defaults[::-1]
-        kwdefaults = self.kwdefaults[::-1]
+        kwdefaults = self.kwdefaults[::-2]
 
         # Named arguments
         if self.kwargs:
</failure>
			<system-out>        kwdefaults = self.kwdefaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #924" file="mako/ast.py" line="150">
			<system-out>        kwdefaults = self.kwdefaults[::-1]</system-out>
		</testcase>
		<testcase name="Mutant #925" file="mako/ast.py" line="154">
			<system-out>            namedecls.append(&quot;**&quot; + kwargnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #926" file="mako/ast.py" line="154">
			<system-out>            namedecls.append(&quot;**&quot; + kwargnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #927" file="mako/ast.py" line="154">
			<system-out>            namedecls.append(&quot;**&quot; + kwargnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #928" file="mako/ast.py" line="160">
			<system-out>                namedecls.append(&quot;%s=%s&quot; % (name, name))</system-out>
		</testcase>
		<testcase name="Mutant #929" file="mako/ast.py" line="160">
			<system-out>                namedecls.append(&quot;%s=%s&quot; % (name, name))</system-out>
		</testcase>
		<testcase name="Mutant #930" file="mako/ast.py" line="162">
			<system-out>                default = kwdefaults.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #931" file="mako/ast.py" line="162">
			<system-out>                default = kwdefaults.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #932" file="mako/ast.py" line="163">
			<system-out>                if default is None:</system-out>
		</testcase>
		<testcase name="Mutant #933" file="mako/ast.py" line="169">
			<system-out>                        &quot;%s=%s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #934" file="mako/ast.py" line="170">
			<system-out>                        % (name, pyparser.ExpressionGenerator(default).value())</system-out>
		</testcase>
		<testcase name="Mutant #935" file="mako/ast.py" line="177">
			<system-out>            namedecls.append(&quot;*&quot; + argnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #936" file="mako/ast.py" line="177">
			<system-out>            namedecls.append(&quot;*&quot; + argnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #937" file="mako/ast.py" line="177">
			<system-out>            namedecls.append(&quot;*&quot; + argnames.pop(0))</system-out>
		</testcase>
		<testcase name="Mutant #938" file="mako/ast.py" line="180">
			<system-out>            if as_call or not defaults:</system-out>
		</testcase>
		<testcase name="Mutant #939" file="mako/ast.py" line="180">
			<system-out>            if as_call or not defaults:</system-out>
		</testcase>
		<testcase name="Mutant #940" file="mako/ast.py" line="183">
			<system-out>                default = defaults.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #941" file="mako/ast.py" line="183">
			<system-out>                default = defaults.pop(0)</system-out>
		</testcase>
		<testcase name="Mutant #942" file="mako/ast.py" line="185">
			<system-out>                    &quot;%s=%s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #943" file="mako/ast.py" line="186">
			<system-out>                    % (name, pyparser.ExpressionGenerator(default).value())</system-out>
		</testcase>
		<testcase name="Mutant #944" file="mako/ast.py" line="192">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #945" file="mako/ast.py" line="194">
			<system-out>        return tuple(self.argnames) + tuple(self.kwargnames)</system-out>
		</testcase>
		<testcase name="Mutant #946" file="mako/ast.py" line="203">
			<system-out>            &quot;def ANON(%s):pass&quot; % code, **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #947" file="mako/ast.py" line="203">
			<system-out>            &quot;def ANON(%s):pass&quot; % code, **kwargs</system-out>
		</testcase>
		<testcase name="Mutant #948" file="mako/runtime.py" line="29">
			<system-out>        self._buffer_stack = [buffer]</system-out>
		</testcase>
		<testcase name="Mutant #949" file="mako/runtime.py" line="31">
			<system-out>        self._data = data</system-out>
		</testcase>
		<testcase name="Mutant #950" file="mako/runtime.py" line="33">
			<system-out>        self._kwargs = data.copy()</system-out>
		</testcase>
		<testcase name="Mutant #951" file="mako/runtime.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -32,7 +32,7 @@
         self._data = data
 
         self._kwargs = data.copy()
-        self._with_template = None
+        self._with_template = &quot;&quot;
         self._outputting_as_unicode = None
         self.namespaces = {}
 
</failure>
			<system-out>        self._with_template = None</system-out>
		</testcase>
		<testcase name="Mutant #952" file="mako/runtime.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -33,7 +33,7 @@
 
         self._kwargs = data.copy()
         self._with_template = None
-        self._outputting_as_unicode = None
+        self._outputting_as_unicode = &quot;&quot;
         self.namespaces = {}
 
         # &quot;capture&quot; function which proxies to the
</failure>
			<system-out>        self._outputting_as_unicode = None</system-out>
		</testcase>
		<testcase name="Mutant #953" file="mako/runtime.py" line="36">
			<system-out>        self.namespaces = {}</system-out>
		</testcase>
		<testcase name="Mutant #954" file="mako/runtime.py" line="40">
			<system-out>        self._data[&quot;capture&quot;] = functools.partial(capture, self)</system-out>
		</testcase>
		<testcase name="Mutant #955" file="mako/runtime.py" line="40">
			<system-out>        self._data[&quot;capture&quot;] = functools.partial(capture, self)</system-out>
		</testcase>
		<testcase name="Mutant #956" file="mako/runtime.py" line="43">
			<system-out>        self.caller_stack = self._data[&quot;caller&quot;] = CallerStack()</system-out>
		</testcase>
		<testcase name="Mutant #957" file="mako/runtime.py" line="43">
			<system-out>        self.caller_stack = self._data[&quot;caller&quot;] = CallerStack()</system-out>
		</testcase>
		<testcase name="Mutant #958" file="mako/runtime.py" line="46">
			<system-out>        self._with_template = t</system-out>
		</testcase>
		<testcase name="Mutant #959" file="mako/runtime.py" line="47">
			<system-out>        illegal_names = t.reserved_names.intersection(self._data)</system-out>
		</testcase>
		<testcase name="Mutant #960" file="mako/runtime.py" line="50">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -48,7 +48,7 @@
         illegal_names = t.reserved_names.intersection(self._data)
         if illegal_names:
             raise exceptions.NameConflictError(
-                &quot;Reserved words passed to render(): %s&quot;
+                &quot;XXReserved words passed to render(): %sXX&quot;
                 % &quot;, &quot;.join(illegal_names)
             )
 
</failure>
			<system-out>                &quot;Reserved words passed to render(): %s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #961" file="mako/runtime.py" line="51">
			<system-out>                % &quot;, &quot;.join(illegal_names)</system-out>
		</testcase>
		<testcase name="Mutant #962" file="mako/runtime.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -49,7 +49,7 @@
         if illegal_names:
             raise exceptions.NameConflictError(
                 &quot;Reserved words passed to render(): %s&quot;
-                % &quot;, &quot;.join(illegal_names)
+                % &quot;XX, XX&quot;.join(illegal_names)
             )
 
     @property
</failure>
			<system-out>                % &quot;, &quot;.join(illegal_names)</system-out>
		</testcase>
		<testcase name="Mutant #963" file="mako/runtime.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -52,7 +52,6 @@
                 % &quot;, &quot;.join(illegal_names)
             )
 
-    @property
     def lookup(self):
         &quot;&quot;&quot;Return the :class:`.TemplateLookup` associated
         with this :class:`.Context`.
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #964" file="mako/runtime.py" line="62">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #965" file="mako/runtime.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -92,7 +92,7 @@
         &quot;&quot;&quot;Pop a ``caller`` callable onto the callstack for this
         :class:`.Context`.&quot;&quot;&quot;
 
-        del self.caller_stack[-1]
+        del self.caller_stack[+1]
 
     def keys(self):
         &quot;&quot;&quot;Return a list of all names established in this :class:`.Context`.&quot;&quot;&quot;
</failure>
			<system-out>        del self.caller_stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #966" file="mako/runtime.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -92,7 +92,7 @@
         &quot;&quot;&quot;Pop a ``caller`` callable onto the callstack for this
         :class:`.Context`.&quot;&quot;&quot;
 
-        del self.caller_stack[-1]
+        del self.caller_stack[-2]
 
     def keys(self):
         &quot;&quot;&quot;Return a list of all names established in this :class:`.Context`.&quot;&quot;&quot;
</failure>
			<system-out>        del self.caller_stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #967" file="mako/runtime.py" line="102">
			<system-out>        if key in self._data:</system-out>
		</testcase>
		<testcase name="Mutant #968" file="mako/runtime.py" line="111">
			<system-out>        buf = util.FastEncodingBuffer()</system-out>
		</testcase>
		<testcase name="Mutant #969" file="mako/runtime.py" line="121">
			<system-out>        buf = self._buffer_stack.pop()</system-out>
		</testcase>
		<testcase name="Mutant #970" file="mako/runtime.py" line="122">
			<system-out>        return buf, self._buffer_stack[-1].write</system-out>
		</testcase>
		<testcase name="Mutant #971" file="mako/runtime.py" line="122">
			<system-out>        return buf, self._buffer_stack[-1].write</system-out>
		</testcase>
		<testcase name="Mutant #972" file="mako/runtime.py" line="143">
			<system-out>        self._buffer_stack[-1].write(string)</system-out>
		</testcase>
		<testcase name="Mutant #973" file="mako/runtime.py" line="143">
			<system-out>        self._buffer_stack[-1].write(string)</system-out>
		</testcase>
		<testcase name="Mutant #974" file="mako/runtime.py" line="148">
			<system-out>        return self._buffer_stack[-1].write</system-out>
		</testcase>
		<testcase name="Mutant #975" file="mako/runtime.py" line="148">
			<system-out>        return self._buffer_stack[-1].write</system-out>
		</testcase>
		<testcase name="Mutant #976" file="mako/runtime.py" line="151">
			<system-out>        c = Context.__new__(Context)</system-out>
		</testcase>
		<testcase name="Mutant #977" file="mako/runtime.py" line="152">
			<system-out>        c._buffer_stack = self._buffer_stack</system-out>
		</testcase>
		<testcase name="Mutant #978" file="mako/runtime.py" line="153">
			<system-out>        c._data = self._data.copy()</system-out>
		</testcase>
		<testcase name="Mutant #979" file="mako/runtime.py" line="154">
			<system-out>        c._kwargs = self._kwargs</system-out>
		</testcase>
		<testcase name="Mutant #980" file="mako/runtime.py" line="155">
			<system-out>        c._with_template = self._with_template</system-out>
		</testcase>
		<testcase name="Mutant #981" file="mako/runtime.py" line="156">
			<system-out>        c._outputting_as_unicode = self._outputting_as_unicode</system-out>
		</testcase>
		<testcase name="Mutant #982" file="mako/runtime.py" line="157">
			<system-out>        c.namespaces = self.namespaces</system-out>
		</testcase>
		<testcase name="Mutant #983" file="mako/runtime.py" line="158">
			<system-out>        c.caller_stack = self.caller_stack</system-out>
		</testcase>
		<testcase name="Mutant #984" file="mako/runtime.py" line="172">
			<system-out>        if not d:</system-out>
		</testcase>
		<testcase name="Mutant #985" file="mako/runtime.py" line="174">
			<system-out>        c = self._copy()</system-out>
		</testcase>
		<testcase name="Mutant #986" file="mako/runtime.py" line="182">
			<system-out>        c = self._copy()</system-out>
		</testcase>
		<testcase name="Mutant #987" file="mako/runtime.py" line="183">
			<system-out>        x = c._data</system-out>
		</testcase>
		<testcase name="Mutant #988" file="mako/runtime.py" line="184">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -182,7 +182,7 @@
 
         c = self._copy()
         x = c._data
-        x.pop(&quot;self&quot;, None)
+        x.pop(&quot;XXselfXX&quot;, None)
         x.pop(&quot;parent&quot;, None)
         x.pop(&quot;next&quot;, None)
         return c
</failure>
			<system-out>        x.pop(&quot;self&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #989" file="mako/runtime.py" line="185">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -183,7 +183,7 @@
         c = self._copy()
         x = c._data
         x.pop(&quot;self&quot;, None)
-        x.pop(&quot;parent&quot;, None)
+        x.pop(&quot;XXparentXX&quot;, None)
         x.pop(&quot;next&quot;, None)
         return c
 
</failure>
			<system-out>        x.pop(&quot;parent&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #990" file="mako/runtime.py" line="186">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -184,7 +184,7 @@
         x = c._data
         x.pop(&quot;self&quot;, None)
         x.pop(&quot;parent&quot;, None)
-        x.pop(&quot;next&quot;, None)
+        x.pop(&quot;XXnextXX&quot;, None)
         return c
 
 
</failure>
			<system-out>        x.pop(&quot;next&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #991" file="mako/runtime.py" line="192">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -190,7 +190,7 @@
 
 class CallerStack(list):
     def __init__(self):
-        self.nextcaller = None
+        self.nextcaller = &quot;&quot;
 
     def __nonzero__(self):
         return self.__bool__()
</failure>
			<system-out>        self.nextcaller = None</system-out>
		</testcase>
		<testcase name="Mutant #992" file="mako/runtime.py" line="198">
			<system-out>        return len(self) and self._get_caller() and True or False</system-out>
		</testcase>
		<testcase name="Mutant #993" file="mako/runtime.py" line="198">
			<system-out>        return len(self) and self._get_caller() and True or False</system-out>
		</testcase>
		<testcase name="Mutant #994" file="mako/runtime.py" line="198">
			<system-out>        return len(self) and self._get_caller() and True or False</system-out>
		</testcase>
		<testcase name="Mutant #995" file="mako/runtime.py" line="198">
			<system-out>        return len(self) and self._get_caller() and True or False</system-out>
		</testcase>
		<testcase name="Mutant #996" file="mako/runtime.py" line="203">
			<system-out>        return self[-1]</system-out>
		</testcase>
		<testcase name="Mutant #997" file="mako/runtime.py" line="203">
			<system-out>        return self[-1]</system-out>
		</testcase>
		<testcase name="Mutant #998" file="mako/runtime.py" line="209">
			<system-out>        frame = self.nextcaller or None</system-out>
		</testcase>
		<testcase name="Mutant #999" file="mako/runtime.py" line="209">
			<system-out>        frame = self.nextcaller or None</system-out>
		</testcase>
		<testcase name="Mutant #1000" file="mako/runtime.py" line="211">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -209,7 +209,7 @@
     def _push_frame(self):
         frame = self.nextcaller or None
         self.append(frame)
-        self.nextcaller = None
+        self.nextcaller = &quot;&quot;
         return frame
 
     def _pop_frame(self):
</failure>
			<system-out>        self.nextcaller = None</system-out>
		</testcase>
		<testcase name="Mutant #1001" file="mako/runtime.py" line="215">
			<system-out>        self.nextcaller = self.pop()</system-out>
		</testcase>
		<testcase name="Mutant #1002" file="mako/runtime.py" line="229">
			<system-out>        raise NameError(&quot;Undefined&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1003" file="mako/runtime.py" line="235">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -233,7 +233,7 @@
         return self.__bool__()
 
     def __bool__(self):
-        return False
+        return True
 
 
 UNDEFINED = Undefined()
</failure>
			<system-out>        return False</system-out>
		</testcase>
		<testcase name="Mutant #1004" file="mako/runtime.py" line="238">
			<system-out>UNDEFINED = Undefined()</system-out>
		</testcase>
		<testcase name="Mutant #1005" file="mako/runtime.py" line="239">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -237,7 +237,7 @@
 
 
 UNDEFINED = Undefined()
-STOP_RENDERING = &quot;&quot;
+STOP_RENDERING = &quot;XXXX&quot;
 
 
 class LoopStack(object):
</failure>
			<system-out>STOP_RENDERING = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1006" file="mako/runtime.py" line="239">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -237,7 +237,7 @@
 
 
 UNDEFINED = Undefined()
-STOP_RENDERING = &quot;&quot;
+STOP_RENDERING = None
 
 
 class LoopStack(object):
</failure>
			<system-out>STOP_RENDERING = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1007" file="mako/runtime.py" line="249">
			<system-out>        self.stack = []</system-out>
		</testcase>
		<testcase name="Mutant #1008" file="mako/runtime.py" line="259">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1009" file="mako/runtime.py" line="262">
			<system-out>            return self.stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1010" file="mako/runtime.py" line="262">
			<system-out>            return self.stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1011" file="mako/runtime.py" line="270">
			<system-out>        new = LoopContext(iterable)</system-out>
		</testcase>
		<testcase name="Mutant #1012" file="mako/runtime.py" line="272">
			<system-out>            new.parent = self.stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1013" file="mako/runtime.py" line="272">
			<system-out>            new.parent = self.stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1014" file="mako/runtime.py" line="272">
			<system-out>            new.parent = self.stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1015" file="mako/runtime.py" line="276">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -274,7 +274,7 @@
         return self.stack.append(new)
 
     def __getattr__(self, key):
-        raise exceptions.RuntimeException(&quot;No loop context is established&quot;)
+        raise exceptions.RuntimeException(&quot;XXNo loop context is establishedXX&quot;)
 
     def __iter__(self):
         return iter(self._top)
</failure>
			<system-out>        raise exceptions.RuntimeException(&quot;No loop context is established&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1016" file="mako/runtime.py" line="307">
			<system-out>        self._iterable = iterable</system-out>
		</testcase>
		<testcase name="Mutant #1017" file="mako/runtime.py" line="308">
			<system-out>        self.index = 0</system-out>
		</testcase>
		<testcase name="Mutant #1018" file="mako/runtime.py" line="308">
			<system-out>        self.index = 0</system-out>
		</testcase>
		<testcase name="Mutant #1019" file="mako/runtime.py" line="309">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -307,7 +307,7 @@
     def __init__(self, iterable):
         self._iterable = iterable
         self.index = 0
-        self.parent = None
+        self.parent = &quot;&quot;
 
     def __iter__(self):
         for i in self._iterable:
</failure>
			<system-out>        self.parent = None</system-out>
		</testcase>
		<testcase name="Mutant #1020" file="mako/runtime.py" line="314">
			<system-out>            self.index += 1</system-out>
		</testcase>
		<testcase name="Mutant #1021" file="mako/runtime.py" line="314">
			<system-out>            self.index += 1</system-out>
		</testcase>
		<testcase name="Mutant #1022" file="mako/runtime.py" line="314">
			<system-out>            self.index += 1</system-out>
		</testcase>
		<testcase name="Mutant #1023" file="mako/runtime.py" line="316">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -314,7 +314,6 @@
             yield i
             self.index += 1
 
-    @util.memoized_instancemethod
     def __len__(self):
         return len(self._iterable)
 
</failure>
			<system-out>    @util.memoized_instancemethod</system-out>
		</testcase>
		<testcase name="Mutant #1024" file="mako/runtime.py" line="320">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1025" file="mako/runtime.py" line="322">
			<system-out>        return len(self) - self.index - 1</system-out>
		</testcase>
		<testcase name="Mutant #1026" file="mako/runtime.py" line="322">
			<system-out>        return len(self) - self.index - 1</system-out>
		</testcase>
		<testcase name="Mutant #1027" file="mako/runtime.py" line="322">
			<system-out>        return len(self) - self.index - 1</system-out>
		</testcase>
		<testcase name="Mutant #1028" file="mako/runtime.py" line="324">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1029" file="mako/runtime.py" line="326">
			<system-out>        return self.index == 0</system-out>
		</testcase>
		<testcase name="Mutant #1030" file="mako/runtime.py" line="326">
			<system-out>        return self.index == 0</system-out>
		</testcase>
		<testcase name="Mutant #1031" file="mako/runtime.py" line="328">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1032" file="mako/runtime.py" line="330">
			<system-out>        return self.index == len(self) - 1</system-out>
		</testcase>
		<testcase name="Mutant #1033" file="mako/runtime.py" line="330">
			<system-out>        return self.index == len(self) - 1</system-out>
		</testcase>
		<testcase name="Mutant #1034" file="mako/runtime.py" line="330">
			<system-out>        return self.index == len(self) - 1</system-out>
		</testcase>
		<testcase name="Mutant #1035" file="mako/runtime.py" line="332">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1036" file="mako/runtime.py" line="334">
			<system-out>        return not self.odd</system-out>
		</testcase>
		<testcase name="Mutant #1037" file="mako/runtime.py" line="336">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1038" file="mako/runtime.py" line="338">
			<system-out>        return bool(self.index % 2)</system-out>
		</testcase>
		<testcase name="Mutant #1039" file="mako/runtime.py" line="338">
			<system-out>        return bool(self.index % 2)</system-out>
		</testcase>
		<testcase name="Mutant #1040" file="mako/runtime.py" line="343">
			<system-out>        if not values:</system-out>
		</testcase>
		<testcase name="Mutant #1041" file="mako/runtime.py" line="344">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -342,7 +342,7 @@
         &quot;&quot;&quot;Cycle through values as the loop progresses.
         &quot;&quot;&quot;
         if not values:
-            raise ValueError(&quot;You must provide values to cycle through&quot;)
+            raise ValueError(&quot;XXYou must provide values to cycle throughXX&quot;)
         return values[self.index % len(values)]
 
 
</failure>
			<system-out>            raise ValueError(&quot;You must provide values to cycle through&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1042" file="mako/runtime.py" line="345">
			<system-out>        return values[self.index % len(values)]</system-out>
		</testcase>
		<testcase name="Mutant #1043" file="mako/runtime.py" line="350">
			<system-out>        self.__parent = parent</system-out>
		</testcase>
		<testcase name="Mutant #1044" file="mako/runtime.py" line="353">
			<system-out>        ns = self.__parent</system-out>
		</testcase>
		<testcase name="Mutant #1045" file="mako/runtime.py" line="358">
			<system-out>                ns = ns.inherits</system-out>
		</testcase>
		<testcase name="Mutant #1046" file="mako/runtime.py" line="385">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -383,7 +383,7 @@
         context,
         callables=None,
         inherits=None,
-        populate_self=True,
+        populate_self=False,
         calling_uri=None,
     ):
         self.name = name
</failure>
			<system-out>        populate_self=True,</system-out>
		</testcase>
		<testcase name="Mutant #1047" file="mako/runtime.py" line="388">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -386,7 +386,7 @@
         populate_self=True,
         calling_uri=None,
     ):
-        self.name = name
+        self.name = None
         self.context = context
         self.inherits = inherits
         if callables is not None:
</failure>
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #1048" file="mako/runtime.py" line="389">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -387,7 +387,7 @@
         calling_uri=None,
     ):
         self.name = name
-        self.context = context
+        self.context = None
         self.inherits = inherits
         if callables is not None:
             self.callables = dict([(c.__name__, c) for c in callables])
</failure>
			<system-out>        self.context = context</system-out>
		</testcase>
		<testcase name="Mutant #1049" file="mako/runtime.py" line="390">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -388,7 +388,7 @@
     ):
         self.name = name
         self.context = context
-        self.inherits = inherits
+        self.inherits = None
         if callables is not None:
             self.callables = dict([(c.__name__, c) for c in callables])
 
</failure>
			<system-out>        self.inherits = inherits</system-out>
		</testcase>
		<testcase name="Mutant #1050" file="mako/runtime.py" line="391">
			<system-out>        if callables is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1051" file="mako/runtime.py" line="392">
			<system-out>            self.callables = dict([(c.__name__, c) for c in callables])</system-out>
		</testcase>
		<testcase name="Mutant #1052" file="mako/runtime.py" line="394">
			<system-out>    callables = ()</system-out>
		</testcase>
		<testcase name="Mutant #1053" file="mako/runtime.py" line="396">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -394,7 +394,7 @@
 
     callables = ()
 
-    module = None
+    module = &quot;&quot;
     &quot;&quot;&quot;The Python module referenced by this :class:`.Namespace`.
 
     If the namespace references a :class:`.Template`, then
</failure>
			<system-out>    module = None</system-out>
		</testcase>
		<testcase name="Mutant #1054" file="mako/runtime.py" line="405">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -403,7 +403,7 @@
 
     &quot;&quot;&quot;
 
-    template = None
+    template = &quot;&quot;
     &quot;&quot;&quot;The :class:`.Template` object referenced by this
         :class:`.Namespace`, if any.
 
</failure>
			<system-out>    template = None</system-out>
		</testcase>
		<testcase name="Mutant #1055" file="mako/runtime.py" line="411">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -409,7 +409,7 @@
 
     &quot;&quot;&quot;
 
-    context = None
+    context = &quot;&quot;
     &quot;&quot;&quot;The :class:`.Context` object for this :class:`.Namespace`.
 
     Namespaces are often created with copies of contexts that
</failure>
			<system-out>    context = None</system-out>
		</testcase>
		<testcase name="Mutant #1056" file="mako/runtime.py" line="422">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -420,7 +420,7 @@
 
     &quot;&quot;&quot;
 
-    filename = None
+    filename = &quot;&quot;
     &quot;&quot;&quot;The path of the filesystem file used for this
     :class:`.Namespace`'s module or template.
 
</failure>
			<system-out>    filename = None</system-out>
		</testcase>
		<testcase name="Mutant #1057" file="mako/runtime.py" line="433">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -431,7 +431,7 @@
 
     &quot;&quot;&quot;
 
-    uri = None
+    uri = &quot;&quot;
     &quot;&quot;&quot;The URI for this :class:`.Namespace`'s template.
 
     I.e. whatever was sent to :meth:`.TemplateLookup.get_template()`.
</failure>
			<system-out>    uri = None</system-out>
		</testcase>
		<testcase name="Mutant #1058" file="mako/runtime.py" line="442">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -440,7 +440,7 @@
 
     &quot;&quot;&quot;
 
-    _templateuri = None
+    _templateuri = &quot;&quot;
 
     @util.memoized_property
     def attr(self):
</failure>
			<system-out>    _templateuri = None</system-out>
		</testcase>
		<testcase name="Mutant #1059" file="mako/runtime.py" line="444">
			<system-out>    @util.memoized_property</system-out>
		</testcase>
		<testcase name="Mutant #1060" file="mako/runtime.py" line="481">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -479,7 +479,7 @@
         namespace.
 
         &quot;&quot;&quot;
-        key = (self, uri)
+        key = None
         if key in self.context.namespaces:
             return self.context.namespaces[key]
         else:
</failure>
			<system-out>        key = (self, uri)</system-out>
		</testcase>
		<testcase name="Mutant #1061" file="mako/runtime.py" line="482">
			<system-out>        if key in self.context.namespaces:</system-out>
		</testcase>
		<testcase name="Mutant #1062" file="mako/runtime.py" line="490">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -483,12 +483,7 @@
         if key in self.context.namespaces:
             return self.context.namespaces[key]
         else:
-            ns = TemplateNamespace(
-                uri,
-                self.context._copy(),
-                templateuri=uri,
-                calling_uri=self._templateuri,
-            )
+            ns = None
             self.context.namespaces[key] = ns
             return ns
 
</failure>
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1063" file="mako/runtime.py" line="491">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -489,7 +489,7 @@
                 templateuri=uri,
                 calling_uri=self._templateuri,
             )
-            self.context.namespaces[key] = ns
+            self.context.namespaces[key] = None
             return ns
 
     def get_template(self, uri):
</failure>
			<system-out>            self.context.namespaces[key] = ns</system-out>
		</testcase>
		<testcase name="Mutant #1064" file="mako/runtime.py" line="517">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1065" file="mako/runtime.py" line="533">
			<system-out>            if ident == &quot;*&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1066" file="mako/runtime.py" line="533">
			<system-out>            if ident == &quot;*&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1067" file="mako/runtime.py" line="535">
			<system-out>                    d[k] = v</system-out>
		</testcase>
		<testcase name="Mutant #1068" file="mako/runtime.py" line="537">
			<system-out>                d[ident] = getattr(self, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1069" file="mako/runtime.py" line="545">
			<system-out>        if key in self.callables:</system-out>
		</testcase>
		<testcase name="Mutant #1070" file="mako/runtime.py" line="546">
			<system-out>            val = self.callables[key]</system-out>
		</testcase>
		<testcase name="Mutant #1071" file="mako/runtime.py" line="548">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -546,7 +546,7 @@
         if key in self.callables:
             val = self.callables[key]
         elif self.inherits:
-            val = getattr(self.inherits, key)
+            val = None
         else:
             raise AttributeError(
                 &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
</failure>
			<system-out>            val = getattr(self.inherits, key)</system-out>
		</testcase>
		<testcase name="Mutant #1072" file="mako/runtime.py" line="551">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -549,7 +549,7 @@
             val = getattr(self.inherits, key)
         else:
             raise AttributeError(
-                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
+                &quot;XXNamespace '%s' has no member '%s'XX&quot; % (self.name, key)
             )
         setattr(self, key, val)
         return val
</failure>
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1073" file="mako/runtime.py" line="551">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -549,7 +549,7 @@
             val = getattr(self.inherits, key)
         else:
             raise AttributeError(
-                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
+                &quot;Namespace '%s' has no member '%s'&quot; / (self.name, key)
             )
         setattr(self, key, val)
         return val
</failure>
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1074" file="mako/runtime.py" line="569">
			<system-out>        populate_self=True,</system-out>
		</testcase>
		<testcase name="Mutant #1075" file="mako/runtime.py" line="572">
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #1076" file="mako/runtime.py" line="573">
			<system-out>        self.context = context</system-out>
		</testcase>
		<testcase name="Mutant #1077" file="mako/runtime.py" line="574">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -572,7 +572,7 @@
     ):
         self.name = name
         self.context = context
-        self.inherits = inherits
+        self.inherits = None
         if callables is not None:
             self.callables = dict([(c.__name__, c) for c in callables])
 
</failure>
			<system-out>        self.inherits = inherits</system-out>
		</testcase>
		<testcase name="Mutant #1078" file="mako/runtime.py" line="575">
			<system-out>        if callables is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1079" file="mako/runtime.py" line="576">
			<system-out>            self.callables = dict([(c.__name__, c) for c in callables])</system-out>
		</testcase>
		<testcase name="Mutant #1080" file="mako/runtime.py" line="578">
			<system-out>        if templateuri is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1081" file="mako/runtime.py" line="579">
			<system-out>            self.template = _lookup_template(context, templateuri, calling_uri)</system-out>
		</testcase>
		<testcase name="Mutant #1082" file="mako/runtime.py" line="580">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -578,7 +578,7 @@
 
         if templateuri is not None:
             self.template = _lookup_template(context, templateuri, calling_uri)
-            self._templateuri = self.template.module._template_uri
+            self._templateuri = None
         elif template is not None:
             self.template = template
             self._templateuri = template.module._template_uri
</failure>
			<system-out>            self._templateuri = self.template.module._template_uri</system-out>
		</testcase>
		<testcase name="Mutant #1083" file="mako/runtime.py" line="581">
			<system-out>        elif template is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1084" file="mako/runtime.py" line="582">
			<system-out>            self.template = template</system-out>
		</testcase>
		<testcase name="Mutant #1085" file="mako/runtime.py" line="583">
			<system-out>            self._templateuri = template.module._template_uri</system-out>
		</testcase>
		<testcase name="Mutant #1086" file="mako/runtime.py" line="585">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -583,7 +583,7 @@
             self.template = template
             self._templateuri = template.module._template_uri
         else:
-            raise TypeError(&quot;'template' argument is required.&quot;)
+            raise TypeError(&quot;XX'template' argument is required.XX&quot;)
 
         if populate_self:
             lclcallable, lclcontext = _populate_self_namespace(
</failure>
			<system-out>            raise TypeError(&quot;'template' argument is required.&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1087" file="mako/runtime.py" line="590">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1088" file="mako/runtime.py" line="592">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1089" file="mako/runtime.py" line="603">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -601,7 +601,6 @@
         &quot;&quot;&quot;
         return self.template.module
 
-    @property
     def filename(self):
         &quot;&quot;&quot;The path of the filesystem file used for this
         :class:`.Namespace`'s module or template.
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1090" file="mako/runtime.py" line="610">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -608,7 +608,6 @@
         &quot;&quot;&quot;
         return self.template.filename
 
-    @property
     def uri(self):
         &quot;&quot;&quot;The URI for this :class:`.Namespace`'s template.
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1091" file="mako/runtime.py" line="627">
			<system-out>            callable_ = self.template._get_def_callable(key)</system-out>
		</testcase>
		<testcase name="Mutant #1092" file="mako/runtime.py" line="634">
			<system-out>        if key in self.callables:</system-out>
		</testcase>
		<testcase name="Mutant #1093" file="mako/runtime.py" line="635">
			<system-out>            val = self.callables[key]</system-out>
		</testcase>
		<testcase name="Mutant #1094" file="mako/runtime.py" line="637">
			<system-out>            callable_ = self.template._get_def_callable(key)</system-out>
		</testcase>
		<testcase name="Mutant #1095" file="mako/runtime.py" line="638">
			<system-out>            val = functools.partial(callable_, self.context)</system-out>
		</testcase>
		<testcase name="Mutant #1096" file="mako/runtime.py" line="640">
			<system-out>            val = getattr(self.inherits, key)</system-out>
		</testcase>
		<testcase name="Mutant #1097" file="mako/runtime.py" line="644">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -642,7 +642,7 @@
 
         else:
             raise AttributeError(
-                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
+                &quot;XXNamespace '%s' has no member '%s'XX&quot; % (self.name, key)
             )
         setattr(self, key, val)
         return val
</failure>
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1098" file="mako/runtime.py" line="644">
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1099" file="mako/runtime.py" line="661">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -659,7 +659,7 @@
         module,
         callables=None,
         inherits=None,
-        populate_self=True,
+        populate_self=False,
         calling_uri=None,
     ):
         self.name = name
</failure>
			<system-out>        populate_self=True,</system-out>
		</testcase>
		<testcase name="Mutant #1100" file="mako/runtime.py" line="664">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -662,7 +662,7 @@
         populate_self=True,
         calling_uri=None,
     ):
-        self.name = name
+        self.name = None
         self.context = context
         self.inherits = inherits
         if callables is not None:
</failure>
			<system-out>        self.name = name</system-out>
		</testcase>
		<testcase name="Mutant #1101" file="mako/runtime.py" line="665">
			<system-out>        self.context = context</system-out>
		</testcase>
		<testcase name="Mutant #1102" file="mako/runtime.py" line="666">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -664,7 +664,7 @@
     ):
         self.name = name
         self.context = context
-        self.inherits = inherits
+        self.inherits = None
         if callables is not None:
             self.callables = dict([(c.__name__, c) for c in callables])
 
</failure>
			<system-out>        self.inherits = inherits</system-out>
		</testcase>
		<testcase name="Mutant #1103" file="mako/runtime.py" line="667">
			<system-out>        if callables is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1104" file="mako/runtime.py" line="668">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -666,7 +666,7 @@
         self.context = context
         self.inherits = inherits
         if callables is not None:
-            self.callables = dict([(c.__name__, c) for c in callables])
+            self.callables = None
 
         mod = __import__(module)
         for token in module.split(&quot;.&quot;)[1:]:
</failure>
			<system-out>            self.callables = dict([(c.__name__, c) for c in callables])</system-out>
		</testcase>
		<testcase name="Mutant #1105" file="mako/runtime.py" line="670">
			<system-out>        mod = __import__(module)</system-out>
		</testcase>
		<testcase name="Mutant #1106" file="mako/runtime.py" line="671">
			<system-out>        for token in module.split(&quot;.&quot;)[1:]:</system-out>
		</testcase>
		<testcase name="Mutant #1107" file="mako/runtime.py" line="671">
			<system-out>        for token in module.split(&quot;.&quot;)[1:]:</system-out>
		</testcase>
		<testcase name="Mutant #1108" file="mako/runtime.py" line="672">
			<system-out>            mod = getattr(mod, token)</system-out>
		</testcase>
		<testcase name="Mutant #1109" file="mako/runtime.py" line="673">
			<system-out>        self.module = mod</system-out>
		</testcase>
		<testcase name="Mutant #1110" file="mako/runtime.py" line="675">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -673,7 +673,6 @@
             mod = getattr(mod, token)
         self.module = mod
 
-    @property
     def filename(self):
         &quot;&quot;&quot;The path of the filesystem file used for this
         :class:`.Namespace`'s module or template.
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1111" file="mako/runtime.py" line="687">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -685,7 +685,7 @@
             for key in self.callables:
                 yield (key, self.callables[key])
         for key in dir(self.module):
-            if key[0] != &quot;_&quot;:
+            if key[1] != &quot;_&quot;:
                 callable_ = getattr(self.module, key)
                 if callable(callable_):
                     yield key, functools.partial(callable_, self.context)
</failure>
			<system-out>            if key[0] != &quot;_&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1112" file="mako/runtime.py" line="687">
			<system-out>            if key[0] != &quot;_&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1113" file="mako/runtime.py" line="687">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -685,7 +685,7 @@
             for key in self.callables:
                 yield (key, self.callables[key])
         for key in dir(self.module):
-            if key[0] != &quot;_&quot;:
+            if key[0] != &quot;XX_XX&quot;:
                 callable_ = getattr(self.module, key)
                 if callable(callable_):
                     yield key, functools.partial(callable_, self.context)
</failure>
			<system-out>            if key[0] != &quot;_&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1114" file="mako/runtime.py" line="688">
			<system-out>                callable_ = getattr(self.module, key)</system-out>
		</testcase>
		<testcase name="Mutant #1115" file="mako/runtime.py" line="693">
			<system-out>        if key in self.callables:</system-out>
		</testcase>
		<testcase name="Mutant #1116" file="mako/runtime.py" line="694">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -692,7 +692,7 @@
 
     def __getattr__(self, key):
         if key in self.callables:
-            val = self.callables[key]
+            val = None
         elif hasattr(self.module, key):
             callable_ = getattr(self.module, key)
             val = functools.partial(callable_, self.context)
</failure>
			<system-out>            val = self.callables[key]</system-out>
		</testcase>
		<testcase name="Mutant #1117" file="mako/runtime.py" line="696">
			<system-out>            callable_ = getattr(self.module, key)</system-out>
		</testcase>
		<testcase name="Mutant #1118" file="mako/runtime.py" line="697">
			<system-out>            val = functools.partial(callable_, self.context)</system-out>
		</testcase>
		<testcase name="Mutant #1119" file="mako/runtime.py" line="699">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -697,7 +697,7 @@
             callable_ = getattr(self.module, key)
             val = functools.partial(callable_, self.context)
         elif self.inherits:
-            val = getattr(self.inherits, key)
+            val = None
         else:
             raise AttributeError(
                 &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
</failure>
			<system-out>            val = getattr(self.inherits, key)</system-out>
		</testcase>
		<testcase name="Mutant #1120" file="mako/runtime.py" line="702">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -700,7 +700,7 @@
             val = getattr(self.inherits, key)
         else:
             raise AttributeError(
-                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
+                &quot;XXNamespace '%s' has no member '%s'XX&quot; % (self.name, key)
             )
         setattr(self, key, val)
         return val
</failure>
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1121" file="mako/runtime.py" line="702">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -700,7 +700,7 @@
             val = getattr(self.inherits, key)
         else:
             raise AttributeError(
-                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)
+                &quot;Namespace '%s' has no member '%s'&quot; / (self.name, key)
             )
         setattr(self, key, val)
         return val
</failure>
			<system-out>                &quot;Namespace '%s' has no member '%s'&quot; % (self.name, key)</system-out>
		</testcase>
		<testcase name="Mutant #1122" file="mako/runtime.py" line="734">
			<system-out>    if not callable(callable_):</system-out>
		</testcase>
		<testcase name="Mutant #1123" file="mako/runtime.py" line="736">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -734,7 +734,7 @@
 
     if not callable(callable_):
         raise exceptions.RuntimeException(
-            &quot;capture() function expects a callable as &quot;
+            &quot;XXcapture() function expects a callable as XX&quot;
             &quot;its argument (i.e. capture(func, *args, **kwargs))&quot;
         )
     context._push_buffer()
</failure>
			<system-out>            &quot;capture() function expects a callable as &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1124" file="mako/runtime.py" line="737">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -735,7 +735,7 @@
     if not callable(callable_):
         raise exceptions.RuntimeException(
             &quot;capture() function expects a callable as &quot;
-            &quot;its argument (i.e. capture(func, *args, **kwargs))&quot;
+            &quot;XXits argument (i.e. capture(func, *args, **kwargs))XX&quot;
         )
     context._push_buffer()
     try:
</failure>
			<system-out>            &quot;its argument (i.e. capture(func, *args, **kwargs))&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1125" file="mako/runtime.py" line="743">
			<system-out>        buf = context._pop_buffer()</system-out>
		</testcase>
		<testcase name="Mutant #1126" file="mako/runtime.py" line="754">
			<system-out>                y.__name__ = render_fn.__name__[7:]</system-out>
		</testcase>
		<testcase name="Mutant #1127" file="mako/runtime.py" line="754">
			<system-out>                y.__name__ = render_fn.__name__[7:]</system-out>
		</testcase>
		<testcase name="Mutant #1128" file="mako/runtime.py" line="767">
			<system-out>        dec = fn(render_fn)</system-out>
		</testcase>
		<testcase name="Mutant #1129" file="mako/runtime.py" line="781">
			<system-out>    template = _lookup_template(context, uri, calling_uri)</system-out>
		</testcase>
		<testcase name="Mutant #1130" file="mako/runtime.py" line="784">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #1131" file="mako/runtime.py" line="785">
			<system-out>    kwargs = _kwargs_for_include(callable_, context._data, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #1132" file="mako/runtime.py" line="790">
			<system-out>            result = template.include_error_handler(ctx, compat.exception_as())</system-out>
		</testcase>
		<testcase name="Mutant #1133" file="mako/runtime.py" line="791">
			<system-out>            if not result:</system-out>
		</testcase>
		<testcase name="Mutant #1134" file="mako/runtime.py" line="802">
			<system-out>    if uri is None:</system-out>
		</testcase>
		<testcase name="Mutant #1135" file="mako/runtime.py" line="804">
			<system-out>    template = _lookup_template(context, uri, calling_uri)</system-out>
		</testcase>
		<testcase name="Mutant #1136" file="mako/runtime.py" line="805">
			<system-out>    self_ns = context[&quot;self&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1137" file="mako/runtime.py" line="805">
			<system-out>    self_ns = context[&quot;self&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1138" file="mako/runtime.py" line="806">
			<system-out>    ih = self_ns</system-out>
		</testcase>
		<testcase name="Mutant #1139" file="mako/runtime.py" line="807">
			<system-out>    while ih.inherits is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1140" file="mako/runtime.py" line="808">
			<system-out>        ih = ih.inherits</system-out>
		</testcase>
		<testcase name="Mutant #1141" file="mako/runtime.py" line="809">
			<system-out>    lclcontext = context._locals({&quot;next&quot;: ih})</system-out>
		</testcase>
		<testcase name="Mutant #1142" file="mako/runtime.py" line="809">
			<system-out>    lclcontext = context._locals({&quot;next&quot;: ih})</system-out>
		</testcase>
		<testcase name="Mutant #1143" file="mako/runtime.py" line="811">
			<system-out>        &quot;self:%s&quot; % template.uri,</system-out>
		</testcase>
		<testcase name="Mutant #1144" file="mako/runtime.py" line="811">
			<system-out>        &quot;self:%s&quot; % template.uri,</system-out>
		</testcase>
		<testcase name="Mutant #1145" file="mako/runtime.py" line="814">
			<system-out>        populate_self=False,</system-out>
		</testcase>
		<testcase name="Mutant #1146" file="mako/runtime.py" line="815">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #1147" file="mako/runtime.py" line="816">
			<system-out>    context._data[&quot;parent&quot;] = lclcontext._data[&quot;local&quot;] = ih.inherits</system-out>
		</testcase>
		<testcase name="Mutant #1148" file="mako/runtime.py" line="816">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -814,7 +814,7 @@
         template=template,
         populate_self=False,
     )
-    context._data[&quot;parent&quot;] = lclcontext._data[&quot;local&quot;] = ih.inherits
+    context._data[&quot;parent&quot;] = lclcontext._data[&quot;XXlocalXX&quot;] = ih.inherits
     callable_ = getattr(template.module, &quot;_mako_inherit&quot;, None)
     if callable_ is not None:
         ret = callable_(template, lclcontext)
</failure>
			<system-out>    context._data[&quot;parent&quot;] = lclcontext._data[&quot;local&quot;] = ih.inherits</system-out>
		</testcase>
		<testcase name="Mutant #1149" file="mako/runtime.py" line="816">
			<system-out>    context._data[&quot;parent&quot;] = lclcontext._data[&quot;local&quot;] = ih.inherits</system-out>
		</testcase>
		<testcase name="Mutant #1150" file="mako/runtime.py" line="817">
			<system-out>    callable_ = getattr(template.module, &quot;_mako_inherit&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #1151" file="mako/runtime.py" line="817">
			<system-out>    callable_ = getattr(template.module, &quot;_mako_inherit&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #1152" file="mako/runtime.py" line="818">
			<system-out>    if callable_ is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1153" file="mako/runtime.py" line="819">
			<system-out>        ret = callable_(template, lclcontext)</system-out>
		</testcase>
		<testcase name="Mutant #1154" file="mako/runtime.py" line="823">
			<system-out>    gen_ns = getattr(template.module, &quot;_mako_generate_namespaces&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #1155" file="mako/runtime.py" line="823">
			<system-out>    gen_ns = getattr(template.module, &quot;_mako_generate_namespaces&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #1156" file="mako/runtime.py" line="824">
			<system-out>    if gen_ns is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1157" file="mako/runtime.py" line="825">
			<system-out>        gen_ns(context)</system-out>
		</testcase>
		<testcase name="Mutant #1158" file="mako/runtime.py" line="830">
			<system-out>    lookup = context._with_template.lookup</system-out>
		</testcase>
		<testcase name="Mutant #1159" file="mako/runtime.py" line="831">
			<system-out>    if lookup is None:</system-out>
		</testcase>
		<testcase name="Mutant #1160" file="mako/runtime.py" line="833">
			<system-out>            &quot;Template '%s' has no TemplateLookup associated&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1161" file="mako/runtime.py" line="834">
			<system-out>            % context._with_template.uri</system-out>
		</testcase>
		<testcase name="Mutant #1162" file="mako/runtime.py" line="836">
			<system-out>    uri = lookup.adjust_uri(uri, relativeto)</system-out>
		</testcase>
		<testcase name="Mutant #1163" file="mako/runtime.py" line="844">
			<system-out>    if self_ns is None:</system-out>
		</testcase>
		<testcase name="Mutant #1164" file="mako/runtime.py" line="846">
			<system-out>            &quot;self:%s&quot; % template.uri,</system-out>
		</testcase>
		<testcase name="Mutant #1165" file="mako/runtime.py" line="846">
			<system-out>            &quot;self:%s&quot; % template.uri,</system-out>
		</testcase>
		<testcase name="Mutant #1166" file="mako/runtime.py" line="849">
			<system-out>            populate_self=False,</system-out>
		</testcase>
		<testcase name="Mutant #1167" file="mako/runtime.py" line="850">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1168" file="mako/runtime.py" line="851">
			<system-out>    context._data[&quot;self&quot;] = context._data[&quot;local&quot;] = self_ns</system-out>
		</testcase>
		<testcase name="Mutant #1169" file="mako/runtime.py" line="851">
			<system-out>    context._data[&quot;self&quot;] = context._data[&quot;local&quot;] = self_ns</system-out>
		</testcase>
		<testcase name="Mutant #1170" file="mako/runtime.py" line="851">
			<system-out>    context._data[&quot;self&quot;] = context._data[&quot;local&quot;] = self_ns</system-out>
		</testcase>
		<testcase name="Mutant #1171" file="mako/runtime.py" line="852">
			<system-out>    if hasattr(template.module, &quot;_mako_inherit&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #1172" file="mako/runtime.py" line="853">
			<system-out>        ret = template.module._mako_inherit(template, context)</system-out>
		</testcase>
		<testcase name="Mutant #1173" file="mako/runtime.py" line="859">
			<system-out>def _render(template, callable_, args, data, as_unicode=False):</system-out>
		</testcase>
		<testcase name="Mutant #1174" file="mako/runtime.py" line="864">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -862,7 +862,7 @@
     output of the given template and template callable.&quot;&quot;&quot;
 
     if as_unicode:
-        buf = util.FastEncodingBuffer(as_unicode=True)
+        buf = util.FastEncodingBuffer(as_unicode=False)
     elif template.bytestring_passthrough:
         buf = compat.StringIO()
     else:
</failure>
			<system-out>        buf = util.FastEncodingBuffer(as_unicode=True)</system-out>
		</testcase>
		<testcase name="Mutant #1175" file="mako/runtime.py" line="864">
			<system-out>        buf = util.FastEncodingBuffer(as_unicode=True)</system-out>
		</testcase>
		<testcase name="Mutant #1176" file="mako/runtime.py" line="866">
			<system-out>        buf = compat.StringIO()</system-out>
		</testcase>
		<testcase name="Mutant #1177" file="mako/runtime.py" line="872">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1178" file="mako/runtime.py" line="873">
			<system-out>    context = Context(buf, **data)</system-out>
		</testcase>
		<testcase name="Mutant #1179" file="mako/runtime.py" line="874">
			<system-out>    context._outputting_as_unicode = as_unicode</system-out>
		</testcase>
		<testcase name="Mutant #1180" file="mako/runtime.py" line="888">
			<system-out>    argspec = compat.inspect_getargspec(callable_)</system-out>
		</testcase>
		<testcase name="Mutant #1181" file="mako/runtime.py" line="890">
			<system-out>    if argspec[2]:</system-out>
		</testcase>
		<testcase name="Mutant #1182" file="mako/runtime.py" line="894">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1183" file="mako/runtime.py" line="894">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1184" file="mako/runtime.py" line="894">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -892,7 +892,7 @@
         return data
 
     # for rendering defs from the top level, figure out the args
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[2:3] if v is not None]
     kwargs = {}
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1185" file="mako/runtime.py" line="894">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -892,7 +892,7 @@
         return data
 
     # for rendering defs from the top level, figure out the args
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[1:4] if v is not None]
     kwargs = {}
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1186" file="mako/runtime.py" line="894">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -892,7 +892,7 @@
         return data
 
     # for rendering defs from the top level, figure out the args
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[1:3] if v is  None]
     kwargs = {}
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1187" file="mako/runtime.py" line="894">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1188" file="mako/runtime.py" line="895">
			<system-out>    kwargs = {}</system-out>
		</testcase>
		<testcase name="Mutant #1189" file="mako/runtime.py" line="897">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1190" file="mako/runtime.py" line="897">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -895,7 +895,7 @@
     namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
     kwargs = {}
     for arg in namedargs:
-        if arg != &quot;context&quot; and arg in data and arg not in kwargs:
+        if arg != &quot;XXcontextXX&quot; and arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
     return kwargs
 
</failure>
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1191" file="mako/runtime.py" line="897">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1192" file="mako/runtime.py" line="897">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1193" file="mako/runtime.py" line="897">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -895,7 +895,7 @@
     namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
     kwargs = {}
     for arg in namedargs:
-        if arg != &quot;context&quot; and arg in data and arg not in kwargs:
+        if arg != &quot;context&quot; or arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
     return kwargs
 
</failure>
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1194" file="mako/runtime.py" line="898">
			<system-out>            kwargs[arg] = data[arg]</system-out>
		</testcase>
		<testcase name="Mutant #1195" file="mako/runtime.py" line="903">
			<system-out>    argspec = compat.inspect_getargspec(callable_)</system-out>
		</testcase>
		<testcase name="Mutant #1196" file="mako/runtime.py" line="904">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1197" file="mako/runtime.py" line="904">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1198" file="mako/runtime.py" line="904">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -902,7 +902,7 @@
 
 def _kwargs_for_include(callable_, data, **kwargs):
     argspec = compat.inspect_getargspec(callable_)
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[2:3] if v is not None]
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1199" file="mako/runtime.py" line="904">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -902,7 +902,7 @@
 
 def _kwargs_for_include(callable_, data, **kwargs):
     argspec = compat.inspect_getargspec(callable_)
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[1:4] if v is not None]
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1200" file="mako/runtime.py" line="904">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -902,7 +902,7 @@
 
 def _kwargs_for_include(callable_, data, **kwargs):
     argspec = compat.inspect_getargspec(callable_)
-    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
+    namedargs = argspec[0] + [v for v in argspec[1:3] if v is  None]
     for arg in namedargs:
         if arg != &quot;context&quot; and arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
</failure>
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1201" file="mako/runtime.py" line="904">
			<system-out>    namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]</system-out>
		</testcase>
		<testcase name="Mutant #1202" file="mako/runtime.py" line="906">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1203" file="mako/runtime.py" line="906">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -904,7 +904,7 @@
     argspec = compat.inspect_getargspec(callable_)
     namedargs = argspec[0] + [v for v in argspec[1:3] if v is not None]
     for arg in namedargs:
-        if arg != &quot;context&quot; and arg in data and arg not in kwargs:
+        if arg != &quot;XXcontextXX&quot; and arg in data and arg not in kwargs:
             kwargs[arg] = data[arg]
     return kwargs
 
</failure>
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1204" file="mako/runtime.py" line="906">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1205" file="mako/runtime.py" line="906">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1206" file="mako/runtime.py" line="906">
			<system-out>        if arg != &quot;context&quot; and arg in data and arg not in kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1207" file="mako/runtime.py" line="907">
			<system-out>            kwargs[arg] = data[arg]</system-out>
		</testcase>
		<testcase name="Mutant #1208" file="mako/runtime.py" line="916">
			<system-out>    if not isinstance(tmpl, template.DefTemplate):</system-out>
		</testcase>
		<testcase name="Mutant #1209" file="mako/runtime.py" line="918">
			<system-out>        (inherit, lclcontext) = _populate_self_namespace(context, tmpl)</system-out>
		</testcase>
		<testcase name="Mutant #1210" file="mako/runtime.py" line="922">
			<system-out>        (inherit, lclcontext) = _populate_self_namespace(context, tmpl.parent)</system-out>
		</testcase>
		<testcase name="Mutant #1211" file="mako/runtime.py" line="934">
			<system-out>    template = context._with_template</system-out>
		</testcase>
		<testcase name="Mutant #1212" file="mako/runtime.py" line="935">
			<system-out>    if template is not None and (</system-out>
		</testcase>
		<testcase name="Mutant #1213" file="mako/runtime.py" line="936">
			<system-out>        template.format_exceptions or template.error_handler</system-out>
		</testcase>
		<testcase name="Mutant #1214" file="mako/runtime.py" line="937">
			<system-out>    ):</system-out>
		</testcase>
		<testcase name="Mutant #1215" file="mako/runtime.py" line="943">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -941,7 +941,7 @@
         except Exception:
             _render_error(template, context, compat.exception_as())
         except:
-            e = sys.exc_info()[0]
+            e = sys.exc_info()[1]
             _render_error(template, context, e)
     else:
         callable_(context, *args, **kwargs)
</failure>
			<system-out>            e = sys.exc_info()[0]</system-out>
		</testcase>
		<testcase name="Mutant #1216" file="mako/runtime.py" line="943">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -941,7 +941,7 @@
         except Exception:
             _render_error(template, context, compat.exception_as())
         except:
-            e = sys.exc_info()[0]
+            e = None
             _render_error(template, context, e)
     else:
         callable_(context, *args, **kwargs)
</failure>
			<system-out>            e = sys.exc_info()[0]</system-out>
		</testcase>
		<testcase name="Mutant #1217" file="mako/runtime.py" line="951">
			<system-out>        result = template.error_handler(context, error)</system-out>
		</testcase>
		<testcase name="Mutant #1218" file="mako/runtime.py" line="952">
			<system-out>        if not result:</system-out>
		</testcase>
		<testcase name="Mutant #1219" file="mako/runtime.py" line="955">
			<system-out>        error_template = exceptions.html_error_template()</system-out>
		</testcase>
		<testcase name="Mutant #1220" file="mako/runtime.py" line="958">
			<failure type="failure" message="bad_survived">--- mako/runtime.py
+++ mako/runtime.py
@@ -956,7 +956,7 @@
         error_template = exceptions.html_error_template()
         if context._outputting_as_unicode:
             context._buffer_stack[:] = [
-                util.FastEncodingBuffer(as_unicode=True)
+                util.FastEncodingBuffer(as_unicode=False)
             ]
         else:
             context._buffer_stack[:] = [
</failure>
			<system-out>                util.FastEncodingBuffer(as_unicode=True)</system-out>
		</testcase>
		<testcase name="Mutant #1221" file="mako/runtime.py" line="959">
			<system-out>            ]</system-out>
		</testcase>
		<testcase name="Mutant #1222" file="mako/runtime.py" line="966">
			<system-out>            ]</system-out>
		</testcase>
		<testcase name="Mutant #1223" file="mako/codegen.py" line="22">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -20,7 +20,7 @@
 from mako.pygen import PythonPrinter
 
 
-MAGIC_NUMBER = 10
+MAGIC_NUMBER = 11
 
 # names which are hardwired into the
 # template and are not accessed via the
</failure>
			<system-out>MAGIC_NUMBER = 10</system-out>
		</testcase>
		<testcase name="Mutant #1224" file="mako/codegen.py" line="22">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -20,7 +20,7 @@
 from mako.pygen import PythonPrinter
 
 
-MAGIC_NUMBER = 10
+MAGIC_NUMBER = None
 
 # names which are hardwired into the
 # template and are not accessed via the
</failure>
			<system-out>MAGIC_NUMBER = 10</system-out>
		</testcase>
		<testcase name="Mutant #1225" file="mako/codegen.py" line="27">
			<system-out>TOPLEVEL_DECLARED = set([&quot;UNDEFINED&quot;, &quot;STOP_RENDERING&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #1226" file="mako/codegen.py" line="27">
			<system-out>TOPLEVEL_DECLARED = set([&quot;UNDEFINED&quot;, &quot;STOP_RENDERING&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #1227" file="mako/codegen.py" line="27">
			<system-out>TOPLEVEL_DECLARED = set([&quot;UNDEFINED&quot;, &quot;STOP_RENDERING&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #1228" file="mako/codegen.py" line="28">
			<system-out>RESERVED_NAMES = set([&quot;context&quot;, &quot;loop&quot;]).union(TOPLEVEL_DECLARED)</system-out>
		</testcase>
		<testcase name="Mutant #1229" file="mako/codegen.py" line="28">
			<system-out>RESERVED_NAMES = set([&quot;context&quot;, &quot;loop&quot;]).union(TOPLEVEL_DECLARED)</system-out>
		</testcase>
		<testcase name="Mutant #1230" file="mako/codegen.py" line="28">
			<system-out>RESERVED_NAMES = set([&quot;context&quot;, &quot;loop&quot;]).union(TOPLEVEL_DECLARED)</system-out>
		</testcase>
		<testcase name="Mutant #1231" file="mako/codegen.py" line="40">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -38,7 +38,7 @@
     imports=None,
     future_imports=None,
     source_encoding=None,
-    generate_magic_comment=True,
+    generate_magic_comment=False,
     disable_unicode=False,
     strict_undefined=False,
     enable_loop=True,
</failure>
			<system-out>    generate_magic_comment=True,</system-out>
		</testcase>
		<testcase name="Mutant #1232" file="mako/codegen.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -39,7 +39,7 @@
     future_imports=None,
     source_encoding=None,
     generate_magic_comment=True,
-    disable_unicode=False,
+    disable_unicode=True,
     strict_undefined=False,
     enable_loop=True,
     reserved_names=frozenset(),
</failure>
			<system-out>    disable_unicode=False,</system-out>
		</testcase>
		<testcase name="Mutant #1233" file="mako/codegen.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -40,7 +40,7 @@
     source_encoding=None,
     generate_magic_comment=True,
     disable_unicode=False,
-    strict_undefined=False,
+    strict_undefined=True,
     enable_loop=True,
     reserved_names=frozenset(),
 ):
</failure>
			<system-out>    strict_undefined=False,</system-out>
		</testcase>
		<testcase name="Mutant #1234" file="mako/codegen.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -41,7 +41,7 @@
     generate_magic_comment=True,
     disable_unicode=False,
     strict_undefined=False,
-    enable_loop=True,
+    enable_loop=False,
     reserved_names=frozenset(),
 ):
     &quot;&quot;&quot;Generate module source code given a parsetree node,
</failure>
			<system-out>    enable_loop=True,</system-out>
		</testcase>
		<testcase name="Mutant #1235" file="mako/codegen.py" line="53">
			<system-out>    if not compat.py3k and isinstance(source_encoding, compat.text_type):</system-out>
		</testcase>
		<testcase name="Mutant #1236" file="mako/codegen.py" line="53">
			<system-out>    if not compat.py3k and isinstance(source_encoding, compat.text_type):</system-out>
		</testcase>
		<testcase name="Mutant #1237" file="mako/codegen.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -52,7 +52,7 @@
     # the generated source and we don't want to coerce the
     # result into a unicode object, in &quot;disable_unicode&quot; mode
     if not compat.py3k and isinstance(source_encoding, compat.text_type):
-        source_encoding = source_encoding.encode(source_encoding)
+        source_encoding = None
 
     buf = util.FastEncodingBuffer()
 
</failure>
			<system-out>        source_encoding = source_encoding.encode(source_encoding)</system-out>
		</testcase>
		<testcase name="Mutant #1238" file="mako/codegen.py" line="56">
			<system-out>    buf = util.FastEncodingBuffer()</system-out>
		</testcase>
		<testcase name="Mutant #1239" file="mako/codegen.py" line="58">
			<system-out>    printer = PythonPrinter(buf)</system-out>
		</testcase>
		<testcase name="Mutant #1240" file="mako/codegen.py" line="96">
			<system-out>        self.uri = uri</system-out>
		</testcase>
		<testcase name="Mutant #1241" file="mako/codegen.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -95,7 +95,7 @@
         reserved_names,
     ):
         self.uri = uri
-        self.filename = filename
+        self.filename = None
         self.default_filters = default_filters
         self.buffer_filters = buffer_filters
         self.imports = imports
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #1242" file="mako/codegen.py" line="98">
			<system-out>        self.default_filters = default_filters</system-out>
		</testcase>
		<testcase name="Mutant #1243" file="mako/codegen.py" line="99">
			<system-out>        self.buffer_filters = buffer_filters</system-out>
		</testcase>
		<testcase name="Mutant #1244" file="mako/codegen.py" line="100">
			<system-out>        self.imports = imports</system-out>
		</testcase>
		<testcase name="Mutant #1245" file="mako/codegen.py" line="101">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -99,7 +99,7 @@
         self.default_filters = default_filters
         self.buffer_filters = buffer_filters
         self.imports = imports
-        self.future_imports = future_imports
+        self.future_imports = None
         self.source_encoding = source_encoding
         self.generate_magic_comment = generate_magic_comment
         self.disable_unicode = disable_unicode
</failure>
			<system-out>        self.future_imports = future_imports</system-out>
		</testcase>
		<testcase name="Mutant #1246" file="mako/codegen.py" line="102">
			<system-out>        self.source_encoding = source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1247" file="mako/codegen.py" line="103">
			<system-out>        self.generate_magic_comment = generate_magic_comment</system-out>
		</testcase>
		<testcase name="Mutant #1248" file="mako/codegen.py" line="104">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -102,7 +102,7 @@
         self.future_imports = future_imports
         self.source_encoding = source_encoding
         self.generate_magic_comment = generate_magic_comment
-        self.disable_unicode = disable_unicode
+        self.disable_unicode = None
         self.strict_undefined = strict_undefined
         self.enable_loop = enable_loop
         self.reserved_names = reserved_names
</failure>
			<system-out>        self.disable_unicode = disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #1249" file="mako/codegen.py" line="105">
			<system-out>        self.strict_undefined = strict_undefined</system-out>
		</testcase>
		<testcase name="Mutant #1250" file="mako/codegen.py" line="106">
			<system-out>        self.enable_loop = enable_loop</system-out>
		</testcase>
		<testcase name="Mutant #1251" file="mako/codegen.py" line="107">
			<system-out>        self.reserved_names = reserved_names</system-out>
		</testcase>
		<testcase name="Mutant #1252" file="mako/codegen.py" line="118">
			<system-out>        self.printer = printer</system-out>
		</testcase>
		<testcase name="Mutant #1253" file="mako/codegen.py" line="119">
			<system-out>        self.compiler = compiler</system-out>
		</testcase>
		<testcase name="Mutant #1254" file="mako/codegen.py" line="120">
			<system-out>        self.node = node</system-out>
		</testcase>
		<testcase name="Mutant #1255" file="mako/codegen.py" line="121">
			<system-out>        self.identifier_stack = [None]</system-out>
		</testcase>
		<testcase name="Mutant #1256" file="mako/codegen.py" line="122">
			<system-out>        self.in_def = isinstance(node, (parsetree.DefTag, parsetree.BlockTag))</system-out>
		</testcase>
		<testcase name="Mutant #1257" file="mako/codegen.py" line="125">
			<system-out>            name = &quot;render_%s&quot; % node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1258" file="mako/codegen.py" line="125">
			<system-out>            name = &quot;render_%s&quot; % node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1259" file="mako/codegen.py" line="125">
			<system-out>            name = &quot;render_%s&quot; % node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1260" file="mako/codegen.py" line="126">
			<system-out>            args = node.get_argument_expressions()</system-out>
		</testcase>
		<testcase name="Mutant #1261" file="mako/codegen.py" line="127">
			<system-out>            filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1262" file="mako/codegen.py" line="127">
			<system-out>            filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1263" file="mako/codegen.py" line="127">
			<system-out>            filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1264" file="mako/codegen.py" line="128">
			<system-out>            buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1265" file="mako/codegen.py" line="128">
			<system-out>            buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1266" file="mako/codegen.py" line="128">
			<system-out>            buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1267" file="mako/codegen.py" line="129">
			<system-out>            cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1268" file="mako/codegen.py" line="129">
			<system-out>            cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1269" file="mako/codegen.py" line="129">
			<system-out>            cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1270" file="mako/codegen.py" line="130">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -128,7 +128,7 @@
             filtered = len(node.filter_args.args) &gt; 0
             buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))
             cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))
-            defs = None
+            defs = &quot;&quot;
             pagetag = None
             if node.is_block and not node.is_anonymous:
                 args += [&quot;**pageargs&quot;]
</failure>
			<system-out>            defs = None</system-out>
		</testcase>
		<testcase name="Mutant #1271" file="mako/codegen.py" line="131">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -129,7 +129,7 @@
             buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))
             cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))
             defs = None
-            pagetag = None
+            pagetag = &quot;&quot;
             if node.is_block and not node.is_anonymous:
                 args += [&quot;**pageargs&quot;]
         else:
</failure>
			<system-out>            pagetag = None</system-out>
		</testcase>
		<testcase name="Mutant #1272" file="mako/codegen.py" line="132">
			<system-out>            if node.is_block and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1273" file="mako/codegen.py" line="132">
			<system-out>            if node.is_block and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1274" file="mako/codegen.py" line="133">
			<system-out>                args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1275" file="mako/codegen.py" line="133">
			<system-out>                args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1276" file="mako/codegen.py" line="133">
			<system-out>                args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1277" file="mako/codegen.py" line="135">
			<system-out>            defs = self.write_toplevel()</system-out>
		</testcase>
		<testcase name="Mutant #1278" file="mako/codegen.py" line="136">
			<system-out>            pagetag = self.compiler.pagetag</system-out>
		</testcase>
		<testcase name="Mutant #1279" file="mako/codegen.py" line="137">
			<system-out>            name = &quot;render_body&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1280" file="mako/codegen.py" line="137">
			<system-out>            name = &quot;render_body&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1281" file="mako/codegen.py" line="138">
			<system-out>            if pagetag is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1282" file="mako/codegen.py" line="139">
			<system-out>                args = pagetag.body_decl.get_argument_expressions()</system-out>
		</testcase>
		<testcase name="Mutant #1283" file="mako/codegen.py" line="140">
			<system-out>                if not pagetag.body_decl.kwargs:</system-out>
		</testcase>
		<testcase name="Mutant #1284" file="mako/codegen.py" line="141">
			<system-out>                    args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1285" file="mako/codegen.py" line="141">
			<system-out>                    args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1286" file="mako/codegen.py" line="141">
			<system-out>                    args += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1287" file="mako/codegen.py" line="142">
			<system-out>                cached = eval(pagetag.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1288" file="mako/codegen.py" line="142">
			<system-out>                cached = eval(pagetag.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1289" file="mako/codegen.py" line="142">
			<system-out>                cached = eval(pagetag.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1290" file="mako/codegen.py" line="144">
			<system-out>                    pagetag.attributes.get(&quot;enable_loop&quot;, &quot;False&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1291" file="mako/codegen.py" line="144">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -142,7 +142,7 @@
                     args += [&quot;**pageargs&quot;]
                 cached = eval(pagetag.attributes.get(&quot;cached&quot;, &quot;False&quot;))
                 self.compiler.enable_loop = self.compiler.enable_loop or eval(
-                    pagetag.attributes.get(&quot;enable_loop&quot;, &quot;False&quot;)
+                    pagetag.attributes.get(&quot;enable_loop&quot;, &quot;XXFalseXX&quot;)
                 )
             else:
                 args = [&quot;**pageargs&quot;]
</failure>
			<system-out>                    pagetag.attributes.get(&quot;enable_loop&quot;, &quot;False&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1292" file="mako/codegen.py" line="145">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1293" file="mako/codegen.py" line="145">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1294" file="mako/codegen.py" line="147">
			<system-out>                args = [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1295" file="mako/codegen.py" line="147">
			<system-out>                args = [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1296" file="mako/codegen.py" line="148">
			<system-out>                cached = False</system-out>
		</testcase>
		<testcase name="Mutant #1297" file="mako/codegen.py" line="148">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -146,7 +146,7 @@
                 )
             else:
                 args = [&quot;**pageargs&quot;]
-                cached = False
+                cached = None
             buffered = filtered = False
         if args is None:
             args = [&quot;context&quot;]
</failure>
			<system-out>                cached = False</system-out>
		</testcase>
		<testcase name="Mutant #1298" file="mako/codegen.py" line="149">
			<system-out>            buffered = filtered = False</system-out>
		</testcase>
		<testcase name="Mutant #1299" file="mako/codegen.py" line="149">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -147,7 +147,7 @@
             else:
                 args = [&quot;**pageargs&quot;]
                 cached = False
-            buffered = filtered = False
+            buffered = filtered = None
         if args is None:
             args = [&quot;context&quot;]
         else:
</failure>
			<system-out>            buffered = filtered = False</system-out>
		</testcase>
		<testcase name="Mutant #1300" file="mako/codegen.py" line="150">
			<system-out>        if args is None:</system-out>
		</testcase>
		<testcase name="Mutant #1301" file="mako/codegen.py" line="151">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -149,7 +149,7 @@
                 cached = False
             buffered = filtered = False
         if args is None:
-            args = [&quot;context&quot;]
+            args = [&quot;XXcontextXX&quot;]
         else:
             args = [a for a in [&quot;context&quot;] + args]
 
</failure>
			<system-out>            args = [&quot;context&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1302" file="mako/codegen.py" line="151">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -149,7 +149,7 @@
                 cached = False
             buffered = filtered = False
         if args is None:
-            args = [&quot;context&quot;]
+            args = None
         else:
             args = [a for a in [&quot;context&quot;] + args]
 
</failure>
			<system-out>            args = [&quot;context&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1303" file="mako/codegen.py" line="153">
			<system-out>            args = [a for a in [&quot;context&quot;] + args]</system-out>
		</testcase>
		<testcase name="Mutant #1304" file="mako/codegen.py" line="153">
			<system-out>            args = [a for a in [&quot;context&quot;] + args]</system-out>
		</testcase>
		<testcase name="Mutant #1305" file="mako/codegen.py" line="153">
			<system-out>            args = [a for a in [&quot;context&quot;] + args]</system-out>
		</testcase>
		<testcase name="Mutant #1306" file="mako/codegen.py" line="156">
			<system-out>            pagetag or node, name, args, buffered, filtered, cached</system-out>
		</testcase>
		<testcase name="Mutant #1307" file="mako/codegen.py" line="159">
			<system-out>        if defs is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1308" file="mako/codegen.py" line="163">
			<system-out>        if not self.in_def:</system-out>
		</testcase>
		<testcase name="Mutant #1309" file="mako/codegen.py" line="169">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1310" file="mako/codegen.py" line="171">
			<system-out>            &quot;filename&quot;: self.compiler.filename,</system-out>
		</testcase>
		<testcase name="Mutant #1311" file="mako/codegen.py" line="172">
			<system-out>            &quot;uri&quot;: self.compiler.uri,</system-out>
		</testcase>
		<testcase name="Mutant #1312" file="mako/codegen.py" line="173">
			<system-out>            &quot;source_encoding&quot;: self.compiler.source_encoding,</system-out>
		</testcase>
		<testcase name="Mutant #1313" file="mako/codegen.py" line="174">
			<system-out>            &quot;line_map&quot;: self.printer.source_map,</system-out>
		</testcase>
		<testcase name="Mutant #1314" file="mako/codegen.py" line="175">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #1315" file="mako/codegen.py" line="177">
			<system-out>            '&quot;&quot;&quot;',</system-out>
		</testcase>
		<testcase name="Mutant #1316" file="mako/codegen.py" line="178">
			<system-out>            &quot;__M_BEGIN_METADATA&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1317" file="mako/codegen.py" line="180">
			<system-out>            &quot;__M_END_METADATA\n&quot; '&quot;&quot;&quot;',</system-out>
		</testcase>
		<testcase name="Mutant #1318" file="mako/codegen.py" line="180">
			<system-out>            &quot;__M_END_METADATA\n&quot; '&quot;&quot;&quot;',</system-out>
		</testcase>
		<testcase name="Mutant #1319" file="mako/codegen.py" line="183">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1320" file="mako/codegen.py" line="185">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -183,7 +183,7 @@
 
     @property
     def identifiers(self):
-        return self.identifier_stack[-1]
+        return self.identifier_stack[+1]
 
     def write_toplevel(self):
         &quot;&quot;&quot;Traverse a template structure for module-level directives and
</failure>
			<system-out>        return self.identifier_stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1321" file="mako/codegen.py" line="185">
			<system-out>        return self.identifier_stack[-1]</system-out>
		</testcase>
		<testcase name="Mutant #1322" file="mako/codegen.py" line="192">
			<system-out>        inherit = []</system-out>
		</testcase>
		<testcase name="Mutant #1323" file="mako/codegen.py" line="193">
			<system-out>        namespaces = {}</system-out>
		</testcase>
		<testcase name="Mutant #1324" file="mako/codegen.py" line="194">
			<system-out>        module_code = []</system-out>
		</testcase>
		<testcase name="Mutant #1325" file="mako/codegen.py" line="196">
			<system-out>        self.compiler.pagetag = None</system-out>
		</testcase>
		<testcase name="Mutant #1326" file="mako/codegen.py" line="203">
			<system-out>                namespaces[node.name] = node</system-out>
		</testcase>
		<testcase name="Mutant #1327" file="mako/codegen.py" line="206">
			<system-out>                self.compiler.pagetag = node</system-out>
		</testcase>
		<testcase name="Mutant #1328" file="mako/codegen.py" line="212">
			<system-out>        f = FindTopLevel()</system-out>
		</testcase>
		<testcase name="Mutant #1329" file="mako/codegen.py" line="216">
			<system-out>        self.compiler.namespaces = namespaces</system-out>
		</testcase>
		<testcase name="Mutant #1330" file="mako/codegen.py" line="218">
			<system-out>        module_ident = set()</system-out>
		</testcase>
		<testcase name="Mutant #1331" file="mako/codegen.py" line="220">
			<system-out>            module_ident = module_ident.union(n.declared_identifiers())</system-out>
		</testcase>
		<testcase name="Mutant #1332" file="mako/codegen.py" line="222">
			<system-out>        module_identifiers = _Identifiers(self.compiler)</system-out>
		</testcase>
		<testcase name="Mutant #1333" file="mako/codegen.py" line="223">
			<system-out>        module_identifiers.declared = module_ident</system-out>
		</testcase>
		<testcase name="Mutant #1334" file="mako/codegen.py" line="228">
			<system-out>            and self.compiler.source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1335" file="mako/codegen.py" line="231">
			<system-out>                &quot;# -*- coding:%s -*-&quot; % self.compiler.source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1336" file="mako/codegen.py" line="231">
			<system-out>                &quot;# -*- coding:%s -*-&quot; % self.compiler.source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1337" file="mako/codegen.py" line="236">
			<system-out>                &quot;from __future__ import %s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1338" file="mako/codegen.py" line="237">
			<system-out>                % (&quot;, &quot;.join(self.compiler.future_imports),)</system-out>
		</testcase>
		<testcase name="Mutant #1339" file="mako/codegen.py" line="237">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -235,7 +235,7 @@
         if self.compiler.future_imports:
             self.printer.writeline(
                 &quot;from __future__ import %s&quot;
-                % (&quot;, &quot;.join(self.compiler.future_imports),)
+                % (&quot;XX, XX&quot;.join(self.compiler.future_imports),)
             )
         self.printer.writeline(&quot;from mako import runtime, filters, cache&quot;)
         self.printer.writeline(&quot;UNDEFINED = runtime.UNDEFINED&quot;)
</failure>
			<system-out>                % (&quot;, &quot;.join(self.compiler.future_imports),)</system-out>
		</testcase>
		<testcase name="Mutant #1340" file="mako/codegen.py" line="239">
			<system-out>        self.printer.writeline(&quot;from mako import runtime, filters, cache&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1341" file="mako/codegen.py" line="240">
			<system-out>        self.printer.writeline(&quot;UNDEFINED = runtime.UNDEFINED&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1342" file="mako/codegen.py" line="241">
			<system-out>        self.printer.writeline(&quot;STOP_RENDERING = runtime.STOP_RENDERING&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1343" file="mako/codegen.py" line="242">
			<system-out>        self.printer.writeline(&quot;__M_dict_builtin = dict&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1344" file="mako/codegen.py" line="243">
			<system-out>        self.printer.writeline(&quot;__M_locals_builtin = locals&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1345" file="mako/codegen.py" line="244">
			<system-out>        self.printer.writeline(&quot;_magic_number = %r&quot; % MAGIC_NUMBER)</system-out>
		</testcase>
		<testcase name="Mutant #1346" file="mako/codegen.py" line="244">
			<system-out>        self.printer.writeline(&quot;_magic_number = %r&quot; % MAGIC_NUMBER)</system-out>
		</testcase>
		<testcase name="Mutant #1347" file="mako/codegen.py" line="245">
			<system-out>        self.printer.writeline(&quot;_modified_time = %r&quot; % time.time())</system-out>
		</testcase>
		<testcase name="Mutant #1348" file="mako/codegen.py" line="245">
			<system-out>        self.printer.writeline(&quot;_modified_time = %r&quot; % time.time())</system-out>
		</testcase>
		<testcase name="Mutant #1349" file="mako/codegen.py" line="246">
			<system-out>        self.printer.writeline(&quot;_enable_loop = %r&quot; % self.compiler.enable_loop)</system-out>
		</testcase>
		<testcase name="Mutant #1350" file="mako/codegen.py" line="246">
			<system-out>        self.printer.writeline(&quot;_enable_loop = %r&quot; % self.compiler.enable_loop)</system-out>
		</testcase>
		<testcase name="Mutant #1351" file="mako/codegen.py" line="248">
			<system-out>            &quot;_template_filename = %r&quot; % self.compiler.filename</system-out>
		</testcase>
		<testcase name="Mutant #1352" file="mako/codegen.py" line="248">
			<system-out>            &quot;_template_filename = %r&quot; % self.compiler.filename</system-out>
		</testcase>
		<testcase name="Mutant #1353" file="mako/codegen.py" line="250">
			<system-out>        self.printer.writeline(&quot;_template_uri = %r&quot; % self.compiler.uri)</system-out>
		</testcase>
		<testcase name="Mutant #1354" file="mako/codegen.py" line="250">
			<system-out>        self.printer.writeline(&quot;_template_uri = %r&quot; % self.compiler.uri)</system-out>
		</testcase>
		<testcase name="Mutant #1355" file="mako/codegen.py" line="252">
			<system-out>            &quot;_source_encoding = %r&quot; % self.compiler.source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1356" file="mako/codegen.py" line="252">
			<system-out>            &quot;_source_encoding = %r&quot; % self.compiler.source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1357" file="mako/codegen.py" line="255">
			<system-out>            buf = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1358" file="mako/codegen.py" line="255">
			<system-out>            buf = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1359" file="mako/codegen.py" line="257">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -255,7 +255,7 @@
         if self.compiler.imports:
             buf = &quot;&quot;
             for imp in self.compiler.imports:
-                buf += imp + &quot;\n&quot;
+                buf = imp + &quot;\n&quot;
                 self.printer.writeline(imp)
             impcode = ast.PythonCode(
                 buf,
</failure>
			<system-out>                buf += imp + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1360" file="mako/codegen.py" line="257">
			<system-out>                buf += imp + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1361" file="mako/codegen.py" line="257">
			<system-out>                buf += imp + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1362" file="mako/codegen.py" line="257">
			<system-out>                buf += imp + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1363" file="mako/codegen.py" line="261">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -259,7 +259,7 @@
                 self.printer.writeline(imp)
             impcode = ast.PythonCode(
                 buf,
-                source=&quot;&quot;,
+                source=&quot;XXXX&quot;,
                 lineno=0,
                 pos=0,
                 filename=&quot;template defined imports&quot;,
</failure>
			<system-out>                source=&quot;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1364" file="mako/codegen.py" line="262">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -260,7 +260,7 @@
             impcode = ast.PythonCode(
                 buf,
                 source=&quot;&quot;,
-                lineno=0,
+                lineno=1,
                 pos=0,
                 filename=&quot;template defined imports&quot;,
             )
</failure>
			<system-out>                lineno=0,</system-out>
		</testcase>
		<testcase name="Mutant #1365" file="mako/codegen.py" line="263">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -261,7 +261,7 @@
                 buf,
                 source=&quot;&quot;,
                 lineno=0,
-                pos=0,
+                pos=1,
                 filename=&quot;template defined imports&quot;,
             )
         else:
</failure>
			<system-out>                pos=0,</system-out>
		</testcase>
		<testcase name="Mutant #1366" file="mako/codegen.py" line="264">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -262,7 +262,7 @@
                 source=&quot;&quot;,
                 lineno=0,
                 pos=0,
-                filename=&quot;template defined imports&quot;,
+                filename=&quot;XXtemplate defined importsXX&quot;,
             )
         else:
             impcode = None
</failure>
			<system-out>                filename=&quot;template defined imports&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1367" file="mako/codegen.py" line="265">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1368" file="mako/codegen.py" line="267">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -265,7 +265,7 @@
                 filename=&quot;template defined imports&quot;,
             )
         else:
-            impcode = None
+            impcode = &quot;&quot;
 
         main_identifiers = module_identifiers.branch(self.node)
         mit = module_identifiers.topleveldefs
</failure>
			<system-out>            impcode = None</system-out>
		</testcase>
		<testcase name="Mutant #1369" file="mako/codegen.py" line="269">
			<system-out>        main_identifiers = module_identifiers.branch(self.node)</system-out>
		</testcase>
		<testcase name="Mutant #1370" file="mako/codegen.py" line="270">
			<system-out>        mit = module_identifiers.topleveldefs</system-out>
		</testcase>
		<testcase name="Mutant #1371" file="mako/codegen.py" line="273">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1372" file="mako/codegen.py" line="278">
			<system-out>        self.compiler.identifiers = module_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #1373" file="mako/codegen.py" line="280">
			<system-out>            &quot;_exports = %r&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1374" file="mako/codegen.py" line="281">
			<system-out>            % [n.name for n in main_identifiers.topleveldefs.values()]</system-out>
		</testcase>
		<testcase name="Mutant #1375" file="mako/codegen.py" line="283">
			<system-out>        self.printer.write_blanks(2)</system-out>
		</testcase>
		<testcase name="Mutant #1376" file="mako/codegen.py" line="290">
			<system-out>            self.write_inherit(inherit[-1])</system-out>
		</testcase>
		<testcase name="Mutant #1377" file="mako/codegen.py" line="290">
			<system-out>            self.write_inherit(inherit[-1])</system-out>
		</testcase>
		<testcase name="Mutant #1378" file="mako/codegen.py" line="304">
			<system-out>            decorator = node.decorator</system-out>
		</testcase>
		<testcase name="Mutant #1379" file="mako/codegen.py" line="307">
			<system-out>                    &quot;@runtime._decorate_toplevel(%s)&quot; % decorator</system-out>
		</testcase>
		<testcase name="Mutant #1380" file="mako/codegen.py" line="307">
			<system-out>                    &quot;@runtime._decorate_toplevel(%s)&quot; % decorator</system-out>
		</testcase>
		<testcase name="Mutant #1381" file="mako/codegen.py" line="312">
			<system-out>            &quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)),</system-out>
		</testcase>
		<testcase name="Mutant #1382" file="mako/codegen.py" line="312">
			<system-out>            &quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)),</system-out>
		</testcase>
		<testcase name="Mutant #1383" file="mako/codegen.py" line="312">
			<system-out>            &quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)),</system-out>
		</testcase>
		<testcase name="Mutant #1384" file="mako/codegen.py" line="314">
			<system-out>            &quot;__M_caller = context.caller_stack._push_frame()&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1385" file="mako/codegen.py" line="315">
			<system-out>            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1386" file="mako/codegen.py" line="317">
			<system-out>        if buffered or filtered or cached:</system-out>
		</testcase>
		<testcase name="Mutant #1387" file="mako/codegen.py" line="318">
			<system-out>            self.printer.writeline(&quot;context._push_buffer()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1388" file="mako/codegen.py" line="323">
			<system-out>        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:</system-out>
		</testcase>
		<testcase name="Mutant #1389" file="mako/codegen.py" line="323">
			<system-out>        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:</system-out>
		</testcase>
		<testcase name="Mutant #1390" file="mako/codegen.py" line="323">
			<system-out>        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:</system-out>
		</testcase>
		<testcase name="Mutant #1391" file="mako/codegen.py" line="323">
			<system-out>        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:</system-out>
		</testcase>
		<testcase name="Mutant #1392" file="mako/codegen.py" line="323">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -321,7 +321,7 @@
         self.identifier_stack.append(
             self.compiler.identifiers.branch(self.node)
         )
-        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:
+        if (not self.in_def or self.node.is_block) or &quot;**pageargs&quot; in args:
             self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)
 
         if not self.in_def and (
</failure>
			<system-out>        if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:</system-out>
		</testcase>
		<testcase name="Mutant #1393" file="mako/codegen.py" line="324">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -322,7 +322,7 @@
             self.compiler.identifiers.branch(self.node)
         )
         if (not self.in_def or self.node.is_block) and &quot;**pageargs&quot; in args:
-            self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)
+            self.identifier_stack[+1].argument_declared.add(&quot;pageargs&quot;)
 
         if not self.in_def and (
             len(self.identifiers.locally_assigned) &gt; 0
</failure>
			<system-out>            self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1394" file="mako/codegen.py" line="324">
			<system-out>            self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1395" file="mako/codegen.py" line="324">
			<system-out>            self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1396" file="mako/codegen.py" line="326">
			<system-out>        if not self.in_def and (</system-out>
		</testcase>
		<testcase name="Mutant #1397" file="mako/codegen.py" line="327">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -325,7 +325,7 @@
             self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)
 
         if not self.in_def and (
-            len(self.identifiers.locally_assigned) &gt; 0
+            len(self.identifiers.locally_assigned) &gt;= 0
             or len(self.identifiers.argument_declared) &gt; 0
         ):
             self.printer.writeline(
</failure>
			<system-out>            len(self.identifiers.locally_assigned) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1398" file="mako/codegen.py" line="327">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -325,7 +325,7 @@
             self.identifier_stack[-1].argument_declared.add(&quot;pageargs&quot;)
 
         if not self.in_def and (
-            len(self.identifiers.locally_assigned) &gt; 0
+            len(self.identifiers.locally_assigned) &gt; 1
             or len(self.identifiers.argument_declared) &gt; 0
         ):
             self.printer.writeline(
</failure>
			<system-out>            len(self.identifiers.locally_assigned) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1399" file="mako/codegen.py" line="328">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -326,7 +326,7 @@
 
         if not self.in_def and (
             len(self.identifiers.locally_assigned) &gt; 0
-            or len(self.identifiers.argument_declared) &gt; 0
+            or len(self.identifiers.argument_declared) &gt;= 0
         ):
             self.printer.writeline(
                 &quot;__M_locals = __M_dict_builtin(%s)&quot;
</failure>
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1400" file="mako/codegen.py" line="328">
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1401" file="mako/codegen.py" line="328">
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1402" file="mako/codegen.py" line="329">
			<system-out>        ):</system-out>
		</testcase>
		<testcase name="Mutant #1403" file="mako/codegen.py" line="331">
			<system-out>                &quot;__M_locals = __M_dict_builtin(%s)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1404" file="mako/codegen.py" line="332">
			<system-out>                % &quot;,&quot;.join(</system-out>
		</testcase>
		<testcase name="Mutant #1405" file="mako/codegen.py" line="332">
			<system-out>                % &quot;,&quot;.join(</system-out>
		</testcase>
		<testcase name="Mutant #1406" file="mako/codegen.py" line="334">
			<system-out>                        &quot;%s=%s&quot; % (x, x)</system-out>
		</testcase>
		<testcase name="Mutant #1407" file="mako/codegen.py" line="334">
			<system-out>                        &quot;%s=%s&quot; % (x, x)</system-out>
		</testcase>
		<testcase name="Mutant #1408" file="mako/codegen.py" line="340">
			<system-out>        self.write_variable_declares(self.identifiers, toplevel=True)</system-out>
		</testcase>
		<testcase name="Mutant #1409" file="mako/codegen.py" line="347">
			<system-out>        self.printer.write_blanks(2)</system-out>
		</testcase>
		<testcase name="Mutant #1410" file="mako/codegen.py" line="350">
			<system-out>                node, name, args, buffered, self.identifiers, toplevel=True</system-out>
		</testcase>
		<testcase name="Mutant #1411" file="mako/codegen.py" line="363">
			<system-out>            &quot;def _mako_inherit(template, context):&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1412" file="mako/codegen.py" line="364">
			<system-out>            &quot;_mako_generate_namespaces(context)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1413" file="mako/codegen.py" line="365">
			<system-out>            &quot;return runtime._inherit_from(context, %s, _template_uri)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1414" file="mako/codegen.py" line="366">
			<system-out>            % (node.parsed_attributes[&quot;file&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #1415" file="mako/codegen.py" line="366">
			<system-out>            % (node.parsed_attributes[&quot;file&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #1416" file="mako/codegen.py" line="373">
			<system-out>            &quot;def _mako_get_namespace(context, name):&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1417" file="mako/codegen.py" line="374">
			<system-out>            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1418" file="mako/codegen.py" line="375">
			<system-out>            &quot;return context.namespaces[(__name__, name)]&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1419" file="mako/codegen.py" line="376">
			<system-out>            &quot;except KeyError:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1420" file="mako/codegen.py" line="377">
			<system-out>            &quot;_mako_generate_namespaces(context)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1421" file="mako/codegen.py" line="378">
			<system-out>            &quot;return context.namespaces[(__name__, name)]&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1422" file="mako/codegen.py" line="382">
			<system-out>        self.printer.writeline(&quot;def _mako_generate_namespaces(context):&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1423" file="mako/codegen.py" line="385">
			<system-out>            if &quot;import&quot; in node.attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1424" file="mako/codegen.py" line="385">
			<system-out>            if &quot;import&quot; in node.attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1425" file="mako/codegen.py" line="386">
			<system-out>                self.compiler.has_ns_imports = True</system-out>
		</testcase>
		<testcase name="Mutant #1426" file="mako/codegen.py" line="386">
			<system-out>                self.compiler.has_ns_imports = True</system-out>
		</testcase>
		<testcase name="Mutant #1427" file="mako/codegen.py" line="389">
			<system-out>                self.printer.writeline(&quot;def make_namespace():&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1428" file="mako/codegen.py" line="390">
			<system-out>                export = []</system-out>
		</testcase>
		<testcase name="Mutant #1429" file="mako/codegen.py" line="391">
			<system-out>                identifiers = self.compiler.identifiers.branch(node)</system-out>
		</testcase>
		<testcase name="Mutant #1430" file="mako/codegen.py" line="392">
			<system-out>                self.in_def = True</system-out>
		</testcase>
		<testcase name="Mutant #1431" file="mako/codegen.py" line="392">
			<system-out>                self.in_def = True</system-out>
		</testcase>
		<testcase name="Mutant #1432" file="mako/codegen.py" line="404">
			<system-out>                                &quot;Can't put anonymous blocks inside &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1433" file="mako/codegen.py" line="405">
			<system-out>                                &quot;&lt;%namespace&gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1434" file="mako/codegen.py" line="408">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -406,7 +406,7 @@
                                 &quot;&lt;%namespace&gt;&quot;,
                                 **node.exception_kwargs
                             )
-                        self.write_inline_def(node, identifiers, nested=False)
+                        self.write_inline_def(node, identifiers, nested=True)
                         export.append(node.funcname)
 
                 vis = NSDefVisitor()
</failure>
			<system-out>                        self.write_inline_def(node, identifiers, nested=False)</system-out>
		</testcase>
		<testcase name="Mutant #1435" file="mako/codegen.py" line="411">
			<system-out>                vis = NSDefVisitor()</system-out>
		</testcase>
		<testcase name="Mutant #1436" file="mako/codegen.py" line="414">
			<system-out>                self.printer.writeline(&quot;return [%s]&quot; % (&quot;,&quot;.join(export)))</system-out>
		</testcase>
		<testcase name="Mutant #1437" file="mako/codegen.py" line="414">
			<system-out>                self.printer.writeline(&quot;return [%s]&quot; % (&quot;,&quot;.join(export)))</system-out>
		</testcase>
		<testcase name="Mutant #1438" file="mako/codegen.py" line="414">
			<system-out>                self.printer.writeline(&quot;return [%s]&quot; % (&quot;,&quot;.join(export)))</system-out>
		</testcase>
		<testcase name="Mutant #1439" file="mako/codegen.py" line="416">
			<system-out>                self.in_def = False</system-out>
		</testcase>
		<testcase name="Mutant #1440" file="mako/codegen.py" line="416">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -414,7 +414,7 @@
                     n.accept_visitor(vis)
                 self.printer.writeline(&quot;return [%s]&quot; % (&quot;,&quot;.join(export)))
                 self.printer.writeline(None)
-                self.in_def = False
+                self.in_def = None
                 callable_name = &quot;make_namespace()&quot;
             else:
                 callable_name = &quot;None&quot;
</failure>
			<system-out>                self.in_def = False</system-out>
		</testcase>
		<testcase name="Mutant #1441" file="mako/codegen.py" line="417">
			<system-out>                callable_name = &quot;make_namespace()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1442" file="mako/codegen.py" line="417">
			<system-out>                callable_name = &quot;make_namespace()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1443" file="mako/codegen.py" line="419">
			<system-out>                callable_name = &quot;None&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1444" file="mako/codegen.py" line="419">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -417,7 +417,7 @@
                 self.in_def = False
                 callable_name = &quot;make_namespace()&quot;
             else:
-                callable_name = &quot;None&quot;
+                callable_name = None
 
             if &quot;file&quot; in node.parsed_attributes:
                 self.printer.writeline(
</failure>
			<system-out>                callable_name = &quot;None&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1445" file="mako/codegen.py" line="421">
			<system-out>            if &quot;file&quot; in node.parsed_attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1446" file="mako/codegen.py" line="421">
			<system-out>            if &quot;file&quot; in node.parsed_attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1447" file="mako/codegen.py" line="423">
			<system-out>                    &quot;ns = runtime.TemplateNamespace(%r,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1448" file="mako/codegen.py" line="424">
			<system-out>                    &quot; context._clean_inheritance_tokens(),&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1449" file="mako/codegen.py" line="425">
			<system-out>                    &quot; templateuri=%s, callables=%s, &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1450" file="mako/codegen.py" line="426">
			<system-out>                    &quot; calling_uri=_template_uri)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1451" file="mako/codegen.py" line="427">
			<system-out>                    % (</system-out>
		</testcase>
		<testcase name="Mutant #1452" file="mako/codegen.py" line="429">
			<system-out>                        node.parsed_attributes.get(&quot;file&quot;, &quot;None&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1453" file="mako/codegen.py" line="429">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -427,7 +427,7 @@
                     &quot; calling_uri=_template_uri)&quot;
                     % (
                         node.name,
-                        node.parsed_attributes.get(&quot;file&quot;, &quot;None&quot;),
+                        node.parsed_attributes.get(&quot;file&quot;, &quot;XXNoneXX&quot;),
                         callable_name,
                     )
                 )
</failure>
			<system-out>                        node.parsed_attributes.get(&quot;file&quot;, &quot;None&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1454" file="mako/codegen.py" line="433">
			<system-out>            elif &quot;module&quot; in node.parsed_attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1455" file="mako/codegen.py" line="433">
			<system-out>            elif &quot;module&quot; in node.parsed_attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1456" file="mako/codegen.py" line="435">
			<system-out>                    &quot;ns = runtime.ModuleNamespace(%r,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1457" file="mako/codegen.py" line="436">
			<system-out>                    &quot; context._clean_inheritance_tokens(),&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1458" file="mako/codegen.py" line="437">
			<system-out>                    &quot; callables=%s, calling_uri=_template_uri,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1459" file="mako/codegen.py" line="438">
			<system-out>                    &quot; module=%s)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1460" file="mako/codegen.py" line="439">
			<system-out>                    % (</system-out>
		</testcase>
		<testcase name="Mutant #1461" file="mako/codegen.py" line="442">
			<system-out>                        node.parsed_attributes.get(&quot;module&quot;, &quot;None&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1462" file="mako/codegen.py" line="442">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -440,7 +440,7 @@
                     % (
                         node.name,
                         callable_name,
-                        node.parsed_attributes.get(&quot;module&quot;, &quot;None&quot;),
+                        node.parsed_attributes.get(&quot;module&quot;, &quot;XXNoneXX&quot;),
                     )
                 )
             else:
</failure>
			<system-out>                        node.parsed_attributes.get(&quot;module&quot;, &quot;None&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #1463" file="mako/codegen.py" line="447">
			<system-out>                    &quot;ns = runtime.Namespace(%r,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1464" file="mako/codegen.py" line="448">
			<system-out>                    &quot; context._clean_inheritance_tokens(),&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1465" file="mako/codegen.py" line="449">
			<system-out>                    &quot; callables=%s, calling_uri=_template_uri)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1466" file="mako/codegen.py" line="450">
			<system-out>                    % (node.name, callable_name)</system-out>
		</testcase>
		<testcase name="Mutant #1467" file="mako/codegen.py" line="452">
			<system-out>            if eval(node.attributes.get(&quot;inheritable&quot;, &quot;False&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #1468" file="mako/codegen.py" line="452">
			<system-out>            if eval(node.attributes.get(&quot;inheritable&quot;, &quot;False&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #1469" file="mako/codegen.py" line="453">
			<system-out>                self.printer.writeline(&quot;context['self'].%s = ns&quot; % (node.name))</system-out>
		</testcase>
		<testcase name="Mutant #1470" file="mako/codegen.py" line="453">
			<system-out>                self.printer.writeline(&quot;context['self'].%s = ns&quot; % (node.name))</system-out>
		</testcase>
		<testcase name="Mutant #1471" file="mako/codegen.py" line="456">
			<system-out>                &quot;context.namespaces[(__name__, %s)] = ns&quot; % repr(node.name)</system-out>
		</testcase>
		<testcase name="Mutant #1472" file="mako/codegen.py" line="456">
			<system-out>                &quot;context.namespaces[(__name__, %s)] = ns&quot; % repr(node.name)</system-out>
		</testcase>
		<testcase name="Mutant #1473" file="mako/codegen.py" line="458">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -456,7 +456,7 @@
             self.printer.writeline(
                 &quot;context.namespaces[(__name__, %s)] = ns&quot; % repr(node.name)
             )
-            self.printer.write_blanks(1)
+            self.printer.write_blanks(2)
         if not len(namespaces):
             self.printer.writeline(&quot;pass&quot;)
         self.printer.writeline(None)
</failure>
			<system-out>            self.printer.write_blanks(1)</system-out>
		</testcase>
		<testcase name="Mutant #1474" file="mako/codegen.py" line="459">
			<system-out>        if not len(namespaces):</system-out>
		</testcase>
		<testcase name="Mutant #1475" file="mako/codegen.py" line="460">
			<system-out>            self.printer.writeline(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1476" file="mako/codegen.py" line="463">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -461,7 +461,7 @@
             self.printer.writeline(&quot;pass&quot;)
         self.printer.writeline(None)
 
-    def write_variable_declares(self, identifiers, toplevel=False, limit=None):
+    def write_variable_declares(self, identifiers, toplevel=True, limit=None):
         &quot;&quot;&quot;write variable declarations at the top of a function.
 
         the variable declarations are in the form of callable
</failure>
			<system-out>    def write_variable_declares(self, identifiers, toplevel=False, limit=None):</system-out>
		</testcase>
		<testcase name="Mutant #1477" file="mako/codegen.py" line="483">
			<system-out>        comp_idents = dict([(c.funcname, c) for c in identifiers.defs])</system-out>
		</testcase>
		<testcase name="Mutant #1478" file="mako/codegen.py" line="484">
			<system-out>        to_write = set()</system-out>
		</testcase>
		<testcase name="Mutant #1479" file="mako/codegen.py" line="488">
			<system-out>        to_write = to_write.union(identifiers.undeclared)</system-out>
		</testcase>
		<testcase name="Mutant #1480" file="mako/codegen.py" line="494">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1481" file="mako/codegen.py" line="498">
			<system-out>        to_write = to_write.difference(identifiers.argument_declared)</system-out>
		</testcase>
		<testcase name="Mutant #1482" file="mako/codegen.py" line="505">
			<system-out>        to_write = to_write.difference(identifiers.locally_declared)</system-out>
		</testcase>
		<testcase name="Mutant #1483" file="mako/codegen.py" line="508">
			<system-out>            has_loop = &quot;loop&quot; in to_write</system-out>
		</testcase>
		<testcase name="Mutant #1484" file="mako/codegen.py" line="508">
			<system-out>            has_loop = &quot;loop&quot; in to_write</system-out>
		</testcase>
		<testcase name="Mutant #1485" file="mako/codegen.py" line="508">
			<system-out>            has_loop = &quot;loop&quot; in to_write</system-out>
		</testcase>
		<testcase name="Mutant #1486" file="mako/codegen.py" line="509">
			<system-out>            to_write.discard(&quot;loop&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1487" file="mako/codegen.py" line="511">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -509,7 +509,7 @@
             has_loop = &quot;loop&quot; in to_write
             to_write.discard(&quot;loop&quot;)
         else:
-            has_loop = False
+            has_loop = True
 
         # if a limiting set was sent, constraint to those items in that list
         # (this is used for the caching decorator)
</failure>
			<system-out>            has_loop = False</system-out>
		</testcase>
		<testcase name="Mutant #1488" file="mako/codegen.py" line="511">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -509,7 +509,7 @@
             has_loop = &quot;loop&quot; in to_write
             to_write.discard(&quot;loop&quot;)
         else:
-            has_loop = False
+            has_loop = None
 
         # if a limiting set was sent, constraint to those items in that list
         # (this is used for the caching decorator)
</failure>
			<system-out>            has_loop = False</system-out>
		</testcase>
		<testcase name="Mutant #1489" file="mako/codegen.py" line="515">
			<system-out>        if limit is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1490" file="mako/codegen.py" line="516">
			<system-out>            to_write = to_write.intersection(limit)</system-out>
		</testcase>
		<testcase name="Mutant #1491" file="mako/codegen.py" line="518">
			<system-out>        if toplevel and getattr(self.compiler, &quot;has_ns_imports&quot;, False):</system-out>
		</testcase>
		<testcase name="Mutant #1492" file="mako/codegen.py" line="518">
			<system-out>        if toplevel and getattr(self.compiler, &quot;has_ns_imports&quot;, False):</system-out>
		</testcase>
		<testcase name="Mutant #1493" file="mako/codegen.py" line="518">
			<system-out>        if toplevel and getattr(self.compiler, &quot;has_ns_imports&quot;, False):</system-out>
		</testcase>
		<testcase name="Mutant #1494" file="mako/codegen.py" line="519">
			<system-out>            self.printer.writeline(&quot;_import_ns = {}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1495" file="mako/codegen.py" line="520">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -518,7 +518,7 @@
 
         if toplevel and getattr(self.compiler, &quot;has_ns_imports&quot;, False):
             self.printer.writeline(&quot;_import_ns = {}&quot;)
-            self.compiler.has_imports = True
+            self.compiler.has_imports = False
             for ident, ns in self.compiler.namespaces.items():
                 if &quot;import&quot; in ns.attributes:
                     self.printer.writeline(
</failure>
			<system-out>            self.compiler.has_imports = True</system-out>
		</testcase>
		<testcase name="Mutant #1496" file="mako/codegen.py" line="520">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -518,7 +518,7 @@
 
         if toplevel and getattr(self.compiler, &quot;has_ns_imports&quot;, False):
             self.printer.writeline(&quot;_import_ns = {}&quot;)
-            self.compiler.has_imports = True
+            self.compiler.has_imports = None
             for ident, ns in self.compiler.namespaces.items():
                 if &quot;import&quot; in ns.attributes:
                     self.printer.writeline(
</failure>
			<system-out>            self.compiler.has_imports = True</system-out>
		</testcase>
		<testcase name="Mutant #1497" file="mako/codegen.py" line="522">
			<system-out>                if &quot;import&quot; in ns.attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1498" file="mako/codegen.py" line="522">
			<system-out>                if &quot;import&quot; in ns.attributes:</system-out>
		</testcase>
		<testcase name="Mutant #1499" file="mako/codegen.py" line="524">
			<system-out>                        &quot;_mako_get_namespace(context, %r).&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1500" file="mako/codegen.py" line="525">
			<system-out>                        &quot;_populate(_import_ns, %r)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1501" file="mako/codegen.py" line="526">
			<system-out>                        % (</system-out>
		</testcase>
		<testcase name="Mutant #1502" file="mako/codegen.py" line="528">
			<system-out>                            re.split(r&quot;\s*,\s*&quot;, ns.attributes[&quot;import&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #1503" file="mako/codegen.py" line="528">
			<system-out>                            re.split(r&quot;\s*,\s*&quot;, ns.attributes[&quot;import&quot;]),</system-out>
		</testcase>
		<testcase name="Mutant #1504" file="mako/codegen.py" line="533">
			<system-out>            self.printer.writeline(&quot;loop = __M_loop = runtime.LoopStack()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1505" file="mako/codegen.py" line="536">
			<system-out>            if ident in comp_idents:</system-out>
		</testcase>
		<testcase name="Mutant #1506" file="mako/codegen.py" line="537">
			<system-out>                comp = comp_idents[ident]</system-out>
		</testcase>
		<testcase name="Mutant #1507" file="mako/codegen.py" line="539">
			<system-out>                    if not comp.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1508" file="mako/codegen.py" line="542">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -540,7 +540,7 @@
                     if not comp.is_anonymous:
                         self.write_def_decl(comp, identifiers)
                     else:
-                        self.write_inline_def(comp, identifiers, nested=True)
+                        self.write_inline_def(comp, identifiers, nested=False)
                 else:
                     if comp.is_root():
                         self.write_def_decl(comp, identifiers)
</failure>
			<system-out>                        self.write_inline_def(comp, identifiers, nested=True)</system-out>
		</testcase>
		<testcase name="Mutant #1509" file="mako/codegen.py" line="547">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -545,7 +545,7 @@
                     if comp.is_root():
                         self.write_def_decl(comp, identifiers)
                     else:
-                        self.write_inline_def(comp, identifiers, nested=True)
+                        self.write_inline_def(comp, identifiers, nested=False)
 
             elif ident in self.compiler.namespaces:
                 self.printer.writeline(
</failure>
			<system-out>                        self.write_inline_def(comp, identifiers, nested=True)</system-out>
		</testcase>
		<testcase name="Mutant #1510" file="mako/codegen.py" line="549">
			<system-out>            elif ident in self.compiler.namespaces:</system-out>
		</testcase>
		<testcase name="Mutant #1511" file="mako/codegen.py" line="551">
			<system-out>                    &quot;%s = _mako_get_namespace(context, %r)&quot; % (ident, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1512" file="mako/codegen.py" line="551">
			<system-out>                    &quot;%s = _mako_get_namespace(context, %r)&quot; % (ident, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1513" file="mako/codegen.py" line="554">
			<system-out>                if getattr(self.compiler, &quot;has_ns_imports&quot;, False):</system-out>
		</testcase>
		<testcase name="Mutant #1514" file="mako/codegen.py" line="554">
			<system-out>                if getattr(self.compiler, &quot;has_ns_imports&quot;, False):</system-out>
		</testcase>
		<testcase name="Mutant #1515" file="mako/codegen.py" line="557">
			<system-out>                            &quot;%s = _import_ns.get(%r, UNDEFINED)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1516" file="mako/codegen.py" line="558">
			<system-out>                            % (ident, ident),</system-out>
		</testcase>
		<testcase name="Mutant #1517" file="mako/codegen.py" line="559">
			<system-out>                            &quot;if %s is UNDEFINED:&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1518" file="mako/codegen.py" line="559">
			<system-out>                            &quot;if %s is UNDEFINED:&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1519" file="mako/codegen.py" line="560">
			<system-out>                            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1520" file="mako/codegen.py" line="561">
			<system-out>                            &quot;%s = context[%r]&quot; % (ident, ident),</system-out>
		</testcase>
		<testcase name="Mutant #1521" file="mako/codegen.py" line="561">
			<system-out>                            &quot;%s = context[%r]&quot; % (ident, ident),</system-out>
		</testcase>
		<testcase name="Mutant #1522" file="mako/codegen.py" line="562">
			<system-out>                            &quot;except KeyError:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1523" file="mako/codegen.py" line="563">
			<system-out>                            &quot;raise NameError(\&quot;'%s' is not defined\&quot;)&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1524" file="mako/codegen.py" line="563">
			<system-out>                            &quot;raise NameError(\&quot;'%s' is not defined\&quot;)&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1525" file="mako/codegen.py" line="569">
			<system-out>                            &quot;%s = _import_ns.get&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1526" file="mako/codegen.py" line="570">
			<system-out>                            &quot;(%r, context.get(%r, UNDEFINED))&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1527" file="mako/codegen.py" line="571">
			<system-out>                            % (ident, ident, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1528" file="mako/codegen.py" line="576">
			<system-out>                            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1529" file="mako/codegen.py" line="577">
			<system-out>                            &quot;%s = context[%r]&quot; % (ident, ident),</system-out>
		</testcase>
		<testcase name="Mutant #1530" file="mako/codegen.py" line="577">
			<system-out>                            &quot;%s = context[%r]&quot; % (ident, ident),</system-out>
		</testcase>
		<testcase name="Mutant #1531" file="mako/codegen.py" line="578">
			<system-out>                            &quot;except KeyError:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1532" file="mako/codegen.py" line="579">
			<system-out>                            &quot;raise NameError(\&quot;'%s' is not defined\&quot;)&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1533" file="mako/codegen.py" line="579">
			<system-out>                            &quot;raise NameError(\&quot;'%s' is not defined\&quot;)&quot; % ident,</system-out>
		</testcase>
		<testcase name="Mutant #1534" file="mako/codegen.py" line="584">
			<system-out>                            &quot;%s = context.get(%r, UNDEFINED)&quot; % (ident, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1535" file="mako/codegen.py" line="584">
			<system-out>                            &quot;%s = context.get(%r, UNDEFINED)&quot; % (ident, ident)</system-out>
		</testcase>
		<testcase name="Mutant #1536" file="mako/codegen.py" line="587">
			<system-out>        self.printer.writeline(&quot;__M_writer = context.writer()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1537" file="mako/codegen.py" line="591">
			<system-out>        funcname = node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1538" file="mako/codegen.py" line="592">
			<system-out>        namedecls = node.get_argument_expressions()</system-out>
		</testcase>
		<testcase name="Mutant #1539" file="mako/codegen.py" line="593">
			<system-out>        nameargs = node.get_argument_expressions(as_call=True)</system-out>
		</testcase>
		<testcase name="Mutant #1540" file="mako/codegen.py" line="593">
			<system-out>        nameargs = node.get_argument_expressions(as_call=True)</system-out>
		</testcase>
		<testcase name="Mutant #1541" file="mako/codegen.py" line="595">
			<system-out>        if not self.in_def and (</system-out>
		</testcase>
		<testcase name="Mutant #1542" file="mako/codegen.py" line="596">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -594,7 +594,7 @@
         nameargs = node.get_argument_expressions(as_call=True)
 
         if not self.in_def and (
-            len(self.identifiers.locally_assigned) &gt; 0
+            len(self.identifiers.locally_assigned) &gt;= 0
             or len(self.identifiers.argument_declared) &gt; 0
         ):
             nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)
</failure>
			<system-out>            len(self.identifiers.locally_assigned) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1543" file="mako/codegen.py" line="596">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -594,7 +594,7 @@
         nameargs = node.get_argument_expressions(as_call=True)
 
         if not self.in_def and (
-            len(self.identifiers.locally_assigned) &gt; 0
+            len(self.identifiers.locally_assigned) &gt; 1
             or len(self.identifiers.argument_declared) &gt; 0
         ):
             nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)
</failure>
			<system-out>            len(self.identifiers.locally_assigned) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1544" file="mako/codegen.py" line="597">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -595,7 +595,7 @@
 
         if not self.in_def and (
             len(self.identifiers.locally_assigned) &gt; 0
-            or len(self.identifiers.argument_declared) &gt; 0
+            or len(self.identifiers.argument_declared) &gt;= 0
         ):
             nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)
         else:
</failure>
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1545" file="mako/codegen.py" line="597">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -595,7 +595,7 @@
 
         if not self.in_def and (
             len(self.identifiers.locally_assigned) &gt; 0
-            or len(self.identifiers.argument_declared) &gt; 0
+            or len(self.identifiers.argument_declared) &gt; 1
         ):
             nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)
         else:
</failure>
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1546" file="mako/codegen.py" line="597">
			<system-out>            or len(self.identifiers.argument_declared) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1547" file="mako/codegen.py" line="598">
			<system-out>        ):</system-out>
		</testcase>
		<testcase name="Mutant #1548" file="mako/codegen.py" line="599">
			<system-out>            nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1549" file="mako/codegen.py" line="599">
			<system-out>            nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1550" file="mako/codegen.py" line="601">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -599,7 +599,7 @@
         ):
             nameargs.insert(0, &quot;context._locals(__M_locals)&quot;)
         else:
-            nameargs.insert(0, &quot;context&quot;)
+            nameargs.insert(1, &quot;context&quot;)
         self.printer.writeline(&quot;def %s(%s):&quot; % (funcname, &quot;,&quot;.join(namedecls)))
         self.printer.writeline(
             &quot;return render_%s(%s)&quot; % (funcname, &quot;,&quot;.join(nameargs))
</failure>
			<system-out>            nameargs.insert(0, &quot;context&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1551" file="mako/codegen.py" line="601">
			<system-out>            nameargs.insert(0, &quot;context&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1552" file="mako/codegen.py" line="602">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (funcname, &quot;,&quot;.join(namedecls)))</system-out>
		</testcase>
		<testcase name="Mutant #1553" file="mako/codegen.py" line="602">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (funcname, &quot;,&quot;.join(namedecls)))</system-out>
		</testcase>
		<testcase name="Mutant #1554" file="mako/codegen.py" line="602">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (funcname, &quot;,&quot;.join(namedecls)))</system-out>
		</testcase>
		<testcase name="Mutant #1555" file="mako/codegen.py" line="604">
			<system-out>            &quot;return render_%s(%s)&quot; % (funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1556" file="mako/codegen.py" line="604">
			<system-out>            &quot;return render_%s(%s)&quot; % (funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1557" file="mako/codegen.py" line="604">
			<system-out>            &quot;return render_%s(%s)&quot; % (funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1558" file="mako/codegen.py" line="611">
			<system-out>        namedecls = node.get_argument_expressions()</system-out>
		</testcase>
		<testcase name="Mutant #1559" file="mako/codegen.py" line="613">
			<system-out>        decorator = node.decorator</system-out>
		</testcase>
		<testcase name="Mutant #1560" file="mako/codegen.py" line="616">
			<system-out>                &quot;@runtime._decorate_inline(context, %s)&quot; % decorator</system-out>
		</testcase>
		<testcase name="Mutant #1561" file="mako/codegen.py" line="616">
			<system-out>                &quot;@runtime._decorate_inline(context, %s)&quot; % decorator</system-out>
		</testcase>
		<testcase name="Mutant #1562" file="mako/codegen.py" line="619">
			<system-out>            &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))</system-out>
		</testcase>
		<testcase name="Mutant #1563" file="mako/codegen.py" line="619">
			<system-out>            &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))</system-out>
		</testcase>
		<testcase name="Mutant #1564" file="mako/codegen.py" line="619">
			<system-out>            &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))</system-out>
		</testcase>
		<testcase name="Mutant #1565" file="mako/codegen.py" line="621">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -619,7 +619,7 @@
         self.printer.writeline(
             &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))
         )
-        filtered = len(node.filter_args.args) &gt; 0
+        filtered = len(node.filter_args.args) &gt;= 0
         buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))
         cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))
         self.printer.writelines(
</failure>
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1566" file="mako/codegen.py" line="621">
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1567" file="mako/codegen.py" line="621">
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1568" file="mako/codegen.py" line="622">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -620,7 +620,7 @@
             &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))
         )
         filtered = len(node.filter_args.args) &gt; 0
-        buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))
+        buffered = eval(node.attributes.get(&quot;XXbufferedXX&quot;, &quot;False&quot;))
         cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))
         self.printer.writelines(
             # push new frame, assign current frame to __M_caller
</failure>
			<system-out>        buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1569" file="mako/codegen.py" line="622">
			<system-out>        buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1570" file="mako/codegen.py" line="622">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -620,7 +620,7 @@
             &quot;def %s(%s):&quot; % (node.funcname, &quot;,&quot;.join(namedecls))
         )
         filtered = len(node.filter_args.args) &gt; 0
-        buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))
+        buffered = None
         cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))
         self.printer.writelines(
             # push new frame, assign current frame to __M_caller
</failure>
			<system-out>        buffered = eval(node.attributes.get(&quot;buffered&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1571" file="mako/codegen.py" line="623">
			<system-out>        cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1572" file="mako/codegen.py" line="623">
			<system-out>        cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1573" file="mako/codegen.py" line="623">
			<system-out>        cached = eval(node.attributes.get(&quot;cached&quot;, &quot;False&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #1574" file="mako/codegen.py" line="626">
			<system-out>            &quot;__M_caller = context.caller_stack._push_frame()&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1575" file="mako/codegen.py" line="627">
			<system-out>            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1576" file="mako/codegen.py" line="629">
			<system-out>        if buffered or filtered or cached:</system-out>
		</testcase>
		<testcase name="Mutant #1577" file="mako/codegen.py" line="630">
			<system-out>            self.printer.writelines(&quot;context._push_buffer()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1578" file="mako/codegen.py" line="632">
			<system-out>        identifiers = identifiers.branch(node, nested=nested)</system-out>
		</testcase>
		<testcase name="Mutant #1579" file="mako/codegen.py" line="648">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -646,7 +646,7 @@
                 node,
                 node.funcname,
                 namedecls,
-                False,
+                True,
                 identifiers,
                 inline=True,
                 toplevel=False,
</failure>
			<system-out>                False,</system-out>
		</testcase>
		<testcase name="Mutant #1580" file="mako/codegen.py" line="650">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -648,7 +648,7 @@
                 namedecls,
                 False,
                 identifiers,
-                inline=True,
+                inline=False,
                 toplevel=False,
             )
 
</failure>
			<system-out>                inline=True,</system-out>
		</testcase>
		<testcase name="Mutant #1581" file="mako/codegen.py" line="651">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -649,7 +649,7 @@
                 False,
                 identifiers,
                 inline=True,
-                toplevel=False,
+                toplevel=True,
             )
 
     def write_def_finish(
</failure>
			<system-out>                toplevel=False,</system-out>
		</testcase>
		<testcase name="Mutant #1582" file="mako/codegen.py" line="655">
			<system-out>        self, node, buffered, filtered, cached, callstack=True</system-out>
		</testcase>
		<testcase name="Mutant #1583" file="mako/codegen.py" line="665">
			<system-out>        if not buffered and not cached and not filtered:</system-out>
		</testcase>
		<testcase name="Mutant #1584" file="mako/codegen.py" line="665">
			<system-out>        if not buffered and not cached and not filtered:</system-out>
		</testcase>
		<testcase name="Mutant #1585" file="mako/codegen.py" line="665">
			<system-out>        if not buffered and not cached and not filtered:</system-out>
		</testcase>
		<testcase name="Mutant #1586" file="mako/codegen.py" line="665">
			<system-out>        if not buffered and not cached and not filtered:</system-out>
		</testcase>
		<testcase name="Mutant #1587" file="mako/codegen.py" line="666">
			<system-out>            self.printer.writeline(&quot;return ''&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1588" file="mako/codegen.py" line="669">
			<system-out>                    &quot;finally:&quot;, &quot;context.caller_stack._pop_frame()&quot;, None</system-out>
		</testcase>
		<testcase name="Mutant #1589" file="mako/codegen.py" line="669">
			<system-out>                    &quot;finally:&quot;, &quot;context.caller_stack._pop_frame()&quot;, None</system-out>
		</testcase>
		<testcase name="Mutant #1590" file="mako/codegen.py" line="672">
			<system-out>        if buffered or filtered or cached:</system-out>
		</testcase>
		<testcase name="Mutant #1591" file="mako/codegen.py" line="673">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -671,7 +671,7 @@
                 )
 
         if buffered or filtered or cached:
-            if buffered or cached:
+            if buffered and cached:
                 # in a caching scenario, don't try to get a writer
                 # from the context after popping; assume the caching
                 # implemenation might be using a context with no
</failure>
			<system-out>            if buffered or cached:</system-out>
		</testcase>
		<testcase name="Mutant #1592" file="mako/codegen.py" line="679">
			<system-out>                    &quot;finally:&quot;, &quot;__M_buf = context._pop_buffer()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1593" file="mako/codegen.py" line="679">
			<system-out>                    &quot;finally:&quot;, &quot;__M_buf = context._pop_buffer()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1594" file="mako/codegen.py" line="683">
			<system-out>                    &quot;finally:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1595" file="mako/codegen.py" line="684">
			<system-out>                    &quot;__M_buf, __M_writer = context._pop_buffer_and_writer()&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1596" file="mako/codegen.py" line="688">
			<system-out>                self.printer.writeline(&quot;context.caller_stack._pop_frame()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1597" file="mako/codegen.py" line="690">
			<system-out>            s = &quot;__M_buf.getvalue()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1598" file="mako/codegen.py" line="690">
			<system-out>            s = &quot;__M_buf.getvalue()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1599" file="mako/codegen.py" line="693">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -691,7 +691,7 @@
             s = &quot;__M_buf.getvalue()&quot;
             if filtered:
                 s = self.create_filter_callable(
-                    node.filter_args.args, s, False
+                    node.filter_args.args, s, True
                 )
             self.printer.writeline(None)
             if buffered and not cached:
</failure>
			<system-out>                    node.filter_args.args, s, False</system-out>
		</testcase>
		<testcase name="Mutant #1600" file="mako/codegen.py" line="694">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1601" file="mako/codegen.py" line="696">
			<system-out>            if buffered and not cached:</system-out>
		</testcase>
		<testcase name="Mutant #1602" file="mako/codegen.py" line="696">
			<system-out>            if buffered and not cached:</system-out>
		</testcase>
		<testcase name="Mutant #1603" file="mako/codegen.py" line="698">
			<system-out>                    self.compiler.buffer_filters, s, False</system-out>
		</testcase>
		<testcase name="Mutant #1604" file="mako/codegen.py" line="699">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1605" file="mako/codegen.py" line="700">
			<system-out>            if buffered or cached:</system-out>
		</testcase>
		<testcase name="Mutant #1606" file="mako/codegen.py" line="701">
			<system-out>                self.printer.writeline(&quot;return %s&quot; % s)</system-out>
		</testcase>
		<testcase name="Mutant #1607" file="mako/codegen.py" line="701">
			<system-out>                self.printer.writeline(&quot;return %s&quot; % s)</system-out>
		</testcase>
		<testcase name="Mutant #1608" file="mako/codegen.py" line="703">
			<system-out>                self.printer.writelines(&quot;__M_writer(%s)&quot; % s, &quot;return ''&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1609" file="mako/codegen.py" line="703">
			<system-out>                self.printer.writelines(&quot;__M_writer(%s)&quot; % s, &quot;return ''&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1610" file="mako/codegen.py" line="703">
			<system-out>                self.printer.writelines(&quot;__M_writer(%s)&quot; % s, &quot;return ''&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1611" file="mako/codegen.py" line="712">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -710,7 +710,7 @@
         args,
         buffered,
         identifiers,
-        inline=False,
+        inline=True,
         toplevel=False,
     ):
         &quot;&quot;&quot;write a post-function decorator to replace a rendering
</failure>
			<system-out>        inline=False,</system-out>
		</testcase>
		<testcase name="Mutant #1612" file="mako/codegen.py" line="713">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -711,7 +711,7 @@
         buffered,
         identifiers,
         inline=False,
-        toplevel=False,
+        toplevel=True,
     ):
         &quot;&quot;&quot;write a post-function decorator to replace a rendering
             callable with a cached version of itself.&quot;&quot;&quot;
</failure>
			<system-out>        toplevel=False,</system-out>
		</testcase>
		<testcase name="Mutant #1613" file="mako/codegen.py" line="718">
			<system-out>        self.printer.writeline(&quot;__M_%s = %s&quot; % (name, name))</system-out>
		</testcase>
		<testcase name="Mutant #1614" file="mako/codegen.py" line="718">
			<system-out>        self.printer.writeline(&quot;__M_%s = %s&quot; % (name, name))</system-out>
		</testcase>
		<testcase name="Mutant #1615" file="mako/codegen.py" line="720">
			<system-out>            &quot;cache_key&quot;, repr(name)</system-out>
		</testcase>
		<testcase name="Mutant #1616" file="mako/codegen.py" line="721">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1617" file="mako/codegen.py" line="723">
			<system-out>        cache_args = {}</system-out>
		</testcase>
		<testcase name="Mutant #1618" file="mako/codegen.py" line="724">
			<system-out>        if self.compiler.pagetag is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1619" file="mako/codegen.py" line="726">
			<system-out>                (pa[6:], self.compiler.pagetag.parsed_attributes[pa])</system-out>
		</testcase>
		<testcase name="Mutant #1620" file="mako/codegen.py" line="728">
			<system-out>                if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1621" file="mako/codegen.py" line="728">
			<system-out>                if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1622" file="mako/codegen.py" line="728">
			<system-out>                if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1623" file="mako/codegen.py" line="728">
			<system-out>                if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1624" file="mako/codegen.py" line="731">
			<system-out>            (pa[6:], node_or_pagetag.parsed_attributes[pa])</system-out>
		</testcase>
		<testcase name="Mutant #1625" file="mako/codegen.py" line="733">
			<system-out>            if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1626" file="mako/codegen.py" line="733">
			<system-out>            if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1627" file="mako/codegen.py" line="733">
			<system-out>            if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1628" file="mako/codegen.py" line="733">
			<system-out>            if pa.startswith(&quot;cache_&quot;) and pa != &quot;cache_key&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1629" file="mako/codegen.py" line="735">
			<system-out>        if &quot;timeout&quot; in cache_args:</system-out>
		</testcase>
		<testcase name="Mutant #1630" file="mako/codegen.py" line="735">
			<system-out>        if &quot;timeout&quot; in cache_args:</system-out>
		</testcase>
		<testcase name="Mutant #1631" file="mako/codegen.py" line="736">
			<system-out>            cache_args[&quot;timeout&quot;] = int(eval(cache_args[&quot;timeout&quot;]))</system-out>
		</testcase>
		<testcase name="Mutant #1632" file="mako/codegen.py" line="736">
			<system-out>            cache_args[&quot;timeout&quot;] = int(eval(cache_args[&quot;timeout&quot;]))</system-out>
		</testcase>
		<testcase name="Mutant #1633" file="mako/codegen.py" line="736">
			<system-out>            cache_args[&quot;timeout&quot;] = int(eval(cache_args[&quot;timeout&quot;]))</system-out>
		</testcase>
		<testcase name="Mutant #1634" file="mako/codegen.py" line="738">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)))</system-out>
		</testcase>
		<testcase name="Mutant #1635" file="mako/codegen.py" line="738">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)))</system-out>
		</testcase>
		<testcase name="Mutant #1636" file="mako/codegen.py" line="738">
			<system-out>        self.printer.writeline(&quot;def %s(%s):&quot; % (name, &quot;,&quot;.join(args)))</system-out>
		</testcase>
		<testcase name="Mutant #1637" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1638" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1639" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1640" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1641" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1642" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1643" file="mako/codegen.py" line="742">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -740,7 +740,7 @@
 
         # form &quot;arg1, arg2, arg3=arg3, arg4=arg4&quot;, etc.
         pass_args = [
-            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args
+            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;XX=XX&quot; in a else a for a in args
         ]
 
         self.write_variable_declares(
</failure>
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1644" file="mako/codegen.py" line="742">
			<system-out>            &quot;%s=%s&quot; % ((a.split(&quot;=&quot;)[0],) * 2) if &quot;=&quot; in a else a for a in args</system-out>
		</testcase>
		<testcase name="Mutant #1645" file="mako/codegen.py" line="743">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #1646" file="mako/codegen.py" line="752">
			<system-out>                &quot;context.get('local').&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1647" file="mako/codegen.py" line="753">
			<system-out>                &quot;cache._ctx_get_or_create(&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1648" file="mako/codegen.py" line="754">
			<system-out>                &quot;%s, lambda:__M_%s(%s),  context, %s__M_defname=%r)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1649" file="mako/codegen.py" line="755">
			<system-out>                % (</system-out>
		</testcase>
		<testcase name="Mutant #1650" file="mako/codegen.py" line="758">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -756,7 +756,7 @@
                 % (
                     cachekey,
                     name,
-                    &quot;,&quot;.join(pass_args),
+                    &quot;XX,XX&quot;.join(pass_args),
                     &quot;&quot;.join(
                         [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]
                     ),
</failure>
			<system-out>                    &quot;,&quot;.join(pass_args),</system-out>
		</testcase>
		<testcase name="Mutant #1651" file="mako/codegen.py" line="759">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -757,7 +757,7 @@
                     cachekey,
                     name,
                     &quot;,&quot;.join(pass_args),
-                    &quot;&quot;.join(
+                    &quot;XXXX&quot;.join(
                         [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]
                     ),
                     name,
</failure>
			<system-out>                    &quot;&quot;.join(</system-out>
		</testcase>
		<testcase name="Mutant #1652" file="mako/codegen.py" line="760">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -758,7 +758,7 @@
                     name,
                     &quot;,&quot;.join(pass_args),
                     &quot;&quot;.join(
-                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]
+                        [&quot;XX%s=%s, XX&quot; % (k, v) for k, v in cache_args.items()]
                     ),
                     name,
                 )
</failure>
			<system-out>                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]</system-out>
		</testcase>
		<testcase name="Mutant #1653" file="mako/codegen.py" line="760">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -758,7 +758,7 @@
                     name,
                     &quot;,&quot;.join(pass_args),
                     &quot;&quot;.join(
-                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]
+                        [&quot;%s=%s, &quot; / (k, v) for k, v in cache_args.items()]
                     ),
                     name,
                 )
</failure>
			<system-out>                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]</system-out>
		</testcase>
		<testcase name="Mutant #1654" file="mako/codegen.py" line="764">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1655" file="mako/codegen.py" line="767">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -765,7 +765,7 @@
             )
             # apply buffer_filters
             s = self.create_filter_callable(
-                self.compiler.buffer_filters, s, False
+                self.compiler.buffer_filters, s, True
             )
             self.printer.writelines(&quot;return &quot; + s, None)
         else:
</failure>
			<system-out>                self.compiler.buffer_filters, s, False</system-out>
		</testcase>
		<testcase name="Mutant #1656" file="mako/codegen.py" line="768">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1657" file="mako/codegen.py" line="769">
			<system-out>            self.printer.writelines(&quot;return &quot; + s, None)</system-out>
		</testcase>
		<testcase name="Mutant #1658" file="mako/codegen.py" line="769">
			<system-out>            self.printer.writelines(&quot;return &quot; + s, None)</system-out>
		</testcase>
		<testcase name="Mutant #1659" file="mako/codegen.py" line="772">
			<system-out>                &quot;__M_writer(context.get('local').&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1660" file="mako/codegen.py" line="773">
			<system-out>                &quot;cache._ctx_get_or_create(&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1661" file="mako/codegen.py" line="774">
			<system-out>                &quot;%s, lambda:__M_%s(%s), context, %s__M_defname=%r))&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1662" file="mako/codegen.py" line="775">
			<system-out>                % (</system-out>
		</testcase>
		<testcase name="Mutant #1663" file="mako/codegen.py" line="778">
			<system-out>                    &quot;,&quot;.join(pass_args),</system-out>
		</testcase>
		<testcase name="Mutant #1664" file="mako/codegen.py" line="779">
			<system-out>                    &quot;&quot;.join(</system-out>
		</testcase>
		<testcase name="Mutant #1665" file="mako/codegen.py" line="780">
			<system-out>                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]</system-out>
		</testcase>
		<testcase name="Mutant #1666" file="mako/codegen.py" line="780">
			<system-out>                        [&quot;%s=%s, &quot; % (k, v) for k, v in cache_args.items()]</system-out>
		</testcase>
		<testcase name="Mutant #1667" file="mako/codegen.py" line="784">
			<system-out>                &quot;return ''&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1668" file="mako/codegen.py" line="794">
			<system-out>            if re.match(r&quot;decode\..+&quot;, name):</system-out>
		</testcase>
		<testcase name="Mutant #1669" file="mako/codegen.py" line="795">
			<system-out>                return &quot;filters.&quot; + name</system-out>
		</testcase>
		<testcase name="Mutant #1670" file="mako/codegen.py" line="795">
			<system-out>                return &quot;filters.&quot; + name</system-out>
		</testcase>
		<testcase name="Mutant #1671" file="mako/codegen.py" line="801">
			<system-out>        if &quot;n&quot; not in args:</system-out>
		</testcase>
		<testcase name="Mutant #1672" file="mako/codegen.py" line="801">
			<system-out>        if &quot;n&quot; not in args:</system-out>
		</testcase>
		<testcase name="Mutant #1673" file="mako/codegen.py" line="804">
			<system-out>                    args = self.compiler.pagetag.filter_args.args + args</system-out>
		</testcase>
		<testcase name="Mutant #1674" file="mako/codegen.py" line="804">
			<system-out>                    args = self.compiler.pagetag.filter_args.args + args</system-out>
		</testcase>
		<testcase name="Mutant #1675" file="mako/codegen.py" line="805">
			<system-out>                if self.compiler.default_filters and &quot;n&quot; not in args:</system-out>
		</testcase>
		<testcase name="Mutant #1676" file="mako/codegen.py" line="805">
			<system-out>                if self.compiler.default_filters and &quot;n&quot; not in args:</system-out>
		</testcase>
		<testcase name="Mutant #1677" file="mako/codegen.py" line="805">
			<system-out>                if self.compiler.default_filters and &quot;n&quot; not in args:</system-out>
		</testcase>
		<testcase name="Mutant #1678" file="mako/codegen.py" line="806">
			<system-out>                    args = self.compiler.default_filters + args</system-out>
		</testcase>
		<testcase name="Mutant #1679" file="mako/codegen.py" line="806">
			<system-out>                    args = self.compiler.default_filters + args</system-out>
		</testcase>
		<testcase name="Mutant #1680" file="mako/codegen.py" line="809">
			<system-out>            if e == &quot;n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1681" file="mako/codegen.py" line="809">
			<system-out>            if e == &quot;n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1682" file="mako/codegen.py" line="810">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #1683" file="mako/codegen.py" line="811">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -809,7 +809,7 @@
             # if filter given as a function, get just the identifier portion
             if e == &quot;n&quot;:
                 continue
-            m = re.match(r&quot;(.+?)(\(.*\))&quot;, e)
+            m = re.match(r&quot;XX(.+?)(\(.*\))XX&quot;, e)
             if m:
                 ident, fargs = m.group(1, 2)
                 f = locate_encode(ident)
</failure>
			<system-out>            m = re.match(r&quot;(.+?)(\(.*\))&quot;, e)</system-out>
		</testcase>
		<testcase name="Mutant #1684" file="mako/codegen.py" line="811">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -809,7 +809,7 @@
             # if filter given as a function, get just the identifier portion
             if e == &quot;n&quot;:
                 continue
-            m = re.match(r&quot;(.+?)(\(.*\))&quot;, e)
+            m = None
             if m:
                 ident, fargs = m.group(1, 2)
                 f = locate_encode(ident)
</failure>
			<system-out>            m = re.match(r&quot;(.+?)(\(.*\))&quot;, e)</system-out>
		</testcase>
		<testcase name="Mutant #1685" file="mako/codegen.py" line="813">
			<system-out>                ident, fargs = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #1686" file="mako/codegen.py" line="813">
			<system-out>                ident, fargs = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #1687" file="mako/codegen.py" line="813">
			<system-out>                ident, fargs = m.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #1688" file="mako/codegen.py" line="814">
			<system-out>                f = locate_encode(ident)</system-out>
		</testcase>
		<testcase name="Mutant #1689" file="mako/codegen.py" line="815">
			<system-out>                e = f + fargs</system-out>
		</testcase>
		<testcase name="Mutant #1690" file="mako/codegen.py" line="815">
			<system-out>                e = f + fargs</system-out>
		</testcase>
		<testcase name="Mutant #1691" file="mako/codegen.py" line="817">
			<system-out>                e = locate_encode(e)</system-out>
		</testcase>
		<testcase name="Mutant #1692" file="mako/codegen.py" line="818">
			<system-out>                assert e is not None</system-out>
		</testcase>
		<testcase name="Mutant #1693" file="mako/codegen.py" line="819">
			<system-out>            target = &quot;%s(%s)&quot; % (e, target)</system-out>
		</testcase>
		<testcase name="Mutant #1694" file="mako/codegen.py" line="819">
			<system-out>            target = &quot;%s(%s)&quot; % (e, target)</system-out>
		</testcase>
		<testcase name="Mutant #1695" file="mako/codegen.py" line="819">
			<system-out>            target = &quot;%s(%s)&quot; % (e, target)</system-out>
		</testcase>
		<testcase name="Mutant #1696" file="mako/codegen.py" line="827">
			<system-out>                self.compiler.pagetag is not None</system-out>
		</testcase>
		<testcase name="Mutant #1697" file="mako/codegen.py" line="828">
			<system-out>                and len(self.compiler.pagetag.filter_args.args)</system-out>
		</testcase>
		<testcase name="Mutant #1698" file="mako/codegen.py" line="830">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -823,8 +823,7 @@
     def visitExpression(self, node):
         self.printer.start_source(node.lineno)
         if (
-            len(node.escapes)
-            or (
+            len(node.escapes) and (
                 self.compiler.pagetag is not None
                 and len(self.compiler.pagetag.filter_args.args)
             )
</failure>
			<system-out>            or len(self.compiler.default_filters)</system-out>
		</testcase>
		<testcase name="Mutant #1699" file="mako/codegen.py" line="834">
			<system-out>                node.escapes_code.args, &quot;%s&quot; % node.text, True</system-out>
		</testcase>
		<testcase name="Mutant #1700" file="mako/codegen.py" line="834">
			<system-out>                node.escapes_code.args, &quot;%s&quot; % node.text, True</system-out>
		</testcase>
		<testcase name="Mutant #1701" file="mako/codegen.py" line="834">
			<system-out>                node.escapes_code.args, &quot;%s&quot; % node.text, True</system-out>
		</testcase>
		<testcase name="Mutant #1702" file="mako/codegen.py" line="835">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1703" file="mako/codegen.py" line="836">
			<system-out>            self.printer.writeline(&quot;__M_writer(%s)&quot; % s)</system-out>
		</testcase>
		<testcase name="Mutant #1704" file="mako/codegen.py" line="836">
			<system-out>            self.printer.writeline(&quot;__M_writer(%s)&quot; % s)</system-out>
		</testcase>
		<testcase name="Mutant #1705" file="mako/codegen.py" line="838">
			<system-out>            self.printer.writeline(&quot;__M_writer(%s)&quot; % node.text)</system-out>
		</testcase>
		<testcase name="Mutant #1706" file="mako/codegen.py" line="838">
			<system-out>            self.printer.writeline(&quot;__M_writer(%s)&quot; % node.text)</system-out>
		</testcase>
		<testcase name="Mutant #1707" file="mako/codegen.py" line="844">
			<system-out>                self.printer.writeline(&quot;finally:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1708" file="mako/codegen.py" line="845">
			<system-out>                self.printer.writeline(&quot;loop = __M_loop._exit()&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1709" file="mako/codegen.py" line="849">
			<system-out>            if self.compiler.enable_loop and node.keyword == &quot;for&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1710" file="mako/codegen.py" line="849">
			<system-out>            if self.compiler.enable_loop and node.keyword == &quot;for&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1711" file="mako/codegen.py" line="849">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -847,7 +847,7 @@
                 self.printer.writeline(None)
         else:
             self.printer.start_source(node.lineno)
-            if self.compiler.enable_loop and node.keyword == &quot;for&quot;:
+            if self.compiler.enable_loop or node.keyword == &quot;for&quot;:
                 text = mangle_mako_loop(node, self.printer)
             else:
                 text = node.text
</failure>
			<system-out>            if self.compiler.enable_loop and node.keyword == &quot;for&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1712" file="mako/codegen.py" line="850">
			<system-out>                text = mangle_mako_loop(node, self.printer)</system-out>
		</testcase>
		<testcase name="Mutant #1713" file="mako/codegen.py" line="852">
			<system-out>                text = node.text</system-out>
		</testcase>
		<testcase name="Mutant #1714" file="mako/codegen.py" line="854">
			<system-out>            children = node.get_children()</system-out>
		</testcase>
		<testcase name="Mutant #1715" file="mako/codegen.py" line="860">
			<system-out>            if not children or (</system-out>
		</testcase>
		<testcase name="Mutant #1716" file="mako/codegen.py" line="866">
			<system-out>                    (node.is_ternary(c.keyword) or c.isend)</system-out>
		</testcase>
		<testcase name="Mutant #1717" file="mako/codegen.py" line="869">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1718" file="mako/codegen.py" line="870">
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1719" file="mako/codegen.py" line="871">
			<system-out>                self.printer.writeline(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1720" file="mako/codegen.py" line="875">
			<system-out>        self.printer.writeline(&quot;__M_writer(%s)&quot; % repr(node.content))</system-out>
		</testcase>
		<testcase name="Mutant #1721" file="mako/codegen.py" line="875">
			<system-out>        self.printer.writeline(&quot;__M_writer(%s)&quot; % repr(node.content))</system-out>
		</testcase>
		<testcase name="Mutant #1722" file="mako/codegen.py" line="878">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -876,7 +876,7 @@
         self.printer.writeline(&quot;__M_writer(%s)&quot; % repr(node.content))
 
     def visitTextTag(self, node):
-        filtered = len(node.filter_args.args) &gt; 0
+        filtered = len(node.filter_args.args) &gt;= 0
         if filtered:
             self.printer.writelines(
                 &quot;__M_writer = context._push_writer()&quot;, &quot;try:&quot;
</failure>
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1723" file="mako/codegen.py" line="878">
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1724" file="mako/codegen.py" line="878">
			<system-out>        filtered = len(node.filter_args.args) &gt; 0</system-out>
		</testcase>
		<testcase name="Mutant #1725" file="mako/codegen.py" line="881">
			<system-out>                &quot;__M_writer = context._push_writer()&quot;, &quot;try:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1726" file="mako/codegen.py" line="881">
			<system-out>                &quot;__M_writer = context._push_writer()&quot;, &quot;try:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1727" file="mako/codegen.py" line="887">
			<system-out>                &quot;finally:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1728" file="mako/codegen.py" line="888">
			<system-out>                &quot;__M_buf, __M_writer = context._pop_buffer_and_writer()&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1729" file="mako/codegen.py" line="889">
			<system-out>                &quot;__M_writer(%s)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1730" file="mako/codegen.py" line="890">
			<system-out>                % self.create_filter_callable(</system-out>
		</testcase>
		<testcase name="Mutant #1731" file="mako/codegen.py" line="891">
			<system-out>                    node.filter_args.args, &quot;__M_buf.getvalue()&quot;, False</system-out>
		</testcase>
		<testcase name="Mutant #1732" file="mako/codegen.py" line="891">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -889,7 +889,7 @@
                 &quot;__M_buf, __M_writer = context._pop_buffer_and_writer()&quot;,
                 &quot;__M_writer(%s)&quot;
                 % self.create_filter_callable(
-                    node.filter_args.args, &quot;__M_buf.getvalue()&quot;, False
+                    node.filter_args.args, &quot;__M_buf.getvalue()&quot;, True
                 ),
                 None,
             )
</failure>
			<system-out>                    node.filter_args.args, &quot;__M_buf.getvalue()&quot;, False</system-out>
		</testcase>
		<testcase name="Mutant #1733" file="mako/codegen.py" line="897">
			<system-out>        if not node.ismodule:</system-out>
		</testcase>
		<testcase name="Mutant #1734" file="mako/codegen.py" line="902">
			<system-out>            if not self.in_def and len(self.identifiers.locally_assigned) &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #1735" file="mako/codegen.py" line="902">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -900,7 +900,7 @@
                 node.text, starting_lineno=node.lineno
             )
 
-            if not self.in_def and len(self.identifiers.locally_assigned) &gt; 0:
+            if not self.in_def and len(self.identifiers.locally_assigned) &gt;= 0:
                 # if we are the &quot;template&quot; def, fudge locally
                 # declared/modified variables into the &quot;__M_locals&quot; dictionary,
                 # which is used for def calls within the same template,
</failure>
			<system-out>            if not self.in_def and len(self.identifiers.locally_assigned) &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #1736" file="mako/codegen.py" line="902">
			<system-out>            if not self.in_def and len(self.identifiers.locally_assigned) &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #1737" file="mako/codegen.py" line="902">
			<system-out>            if not self.in_def and len(self.identifiers.locally_assigned) &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #1738" file="mako/codegen.py" line="908">
			<system-out>                    &quot;__M_locals_builtin_stored = __M_locals_builtin()&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1739" file="mako/codegen.py" line="911">
			<system-out>                    &quot;__M_locals.update(__M_dict_builtin([(__M_key,&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1740" file="mako/codegen.py" line="912">
			<system-out>                    &quot; __M_locals_builtin_stored[__M_key]) for __M_key in&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1741" file="mako/codegen.py" line="913">
			<system-out>                    &quot; [%s] if __M_key in __M_locals_builtin_stored]))&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1742" file="mako/codegen.py" line="914">
			<system-out>                    % &quot;,&quot;.join([repr(x) for x in node.declared_identifiers()])</system-out>
		</testcase>
		<testcase name="Mutant #1743" file="mako/codegen.py" line="914">
			<system-out>                    % &quot;,&quot;.join([repr(x) for x in node.declared_identifiers()])</system-out>
		</testcase>
		<testcase name="Mutant #1744" file="mako/codegen.py" line="919">
			<system-out>        args = node.attributes.get(&quot;args&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1745" file="mako/codegen.py" line="919">
			<system-out>        args = node.attributes.get(&quot;args&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1746" file="mako/codegen.py" line="922">
			<system-out>                &quot;runtime._include_file(context, %s, _template_uri, %s)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1747" file="mako/codegen.py" line="923">
			<system-out>                % (node.parsed_attributes[&quot;file&quot;], args)</system-out>
		</testcase>
		<testcase name="Mutant #1748" file="mako/codegen.py" line="923">
			<system-out>                % (node.parsed_attributes[&quot;file&quot;], args)</system-out>
		</testcase>
		<testcase name="Mutant #1749" file="mako/codegen.py" line="927">
			<system-out>                &quot;runtime._include_file(context, %s, _template_uri)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1750" file="mako/codegen.py" line="928">
			<system-out>                % (node.parsed_attributes[&quot;file&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #1751" file="mako/codegen.py" line="928">
			<system-out>                % (node.parsed_attributes[&quot;file&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #1752" file="mako/codegen.py" line="939">
			<system-out>            self.printer.writeline(&quot;%s()&quot; % node.funcname)</system-out>
		</testcase>
		<testcase name="Mutant #1753" file="mako/codegen.py" line="939">
			<system-out>            self.printer.writeline(&quot;%s()&quot; % node.funcname)</system-out>
		</testcase>
		<testcase name="Mutant #1754" file="mako/codegen.py" line="941">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -939,7 +939,7 @@
         if node.is_anonymous:
             self.printer.writeline(&quot;%s()&quot; % node.funcname)
         else:
-            nameargs = node.get_argument_expressions(as_call=True)
+            nameargs = node.get_argument_expressions(as_call=False)
             nameargs += [&quot;**pageargs&quot;]
             self.printer.writeline(
                 &quot;if 'parent' not in context._data or &quot;
</failure>
			<system-out>            nameargs = node.get_argument_expressions(as_call=True)</system-out>
		</testcase>
		<testcase name="Mutant #1755" file="mako/codegen.py" line="941">
			<system-out>            nameargs = node.get_argument_expressions(as_call=True)</system-out>
		</testcase>
		<testcase name="Mutant #1756" file="mako/codegen.py" line="942">
			<system-out>            nameargs += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1757" file="mako/codegen.py" line="942">
			<system-out>            nameargs += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1758" file="mako/codegen.py" line="942">
			<system-out>            nameargs += [&quot;**pageargs&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1759" file="mako/codegen.py" line="944">
			<system-out>                &quot;if 'parent' not in context._data or &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1760" file="mako/codegen.py" line="945">
			<system-out>                &quot;not hasattr(context._data['parent'], '%s'):&quot; % node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1761" file="mako/codegen.py" line="945">
			<system-out>                &quot;not hasattr(context._data['parent'], '%s'):&quot; % node.funcname</system-out>
		</testcase>
		<testcase name="Mutant #1762" file="mako/codegen.py" line="948">
			<system-out>                &quot;context['self'].%s(%s)&quot; % (node.funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1763" file="mako/codegen.py" line="948">
			<system-out>                &quot;context['self'].%s(%s)&quot; % (node.funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1764" file="mako/codegen.py" line="948">
			<system-out>                &quot;context['self'].%s(%s)&quot; % (node.funcname, &quot;,&quot;.join(nameargs))</system-out>
		</testcase>
		<testcase name="Mutant #1765" file="mako/codegen.py" line="950">
			<system-out>            self.printer.writeline(&quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1766" file="mako/codegen.py" line="959">
			<system-out>        self.printer.writeline(&quot;def ccall(caller):&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1767" file="mako/codegen.py" line="960">
			<system-out>        export = [&quot;body&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1768" file="mako/codegen.py" line="960">
			<system-out>        export = [&quot;body&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #1769" file="mako/codegen.py" line="961">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -959,7 +959,7 @@
     def visitCallTag(self, node):
         self.printer.writeline(&quot;def ccall(caller):&quot;)
         export = [&quot;body&quot;]
-        callable_identifiers = self.identifiers.branch(node, nested=True)
+        callable_identifiers = self.identifiers.branch(node, nested=False)
         body_identifiers = callable_identifiers.branch(node, nested=False)
         # we want the 'caller' passed to ccall to be used
         # for the body() function, but for other non-body()
</failure>
			<system-out>        callable_identifiers = self.identifiers.branch(node, nested=True)</system-out>
		</testcase>
		<testcase name="Mutant #1770" file="mako/codegen.py" line="961">
			<system-out>        callable_identifiers = self.identifiers.branch(node, nested=True)</system-out>
		</testcase>
		<testcase name="Mutant #1771" file="mako/codegen.py" line="962">
			<system-out>        body_identifiers = callable_identifiers.branch(node, nested=False)</system-out>
		</testcase>
		<testcase name="Mutant #1772" file="mako/codegen.py" line="962">
			<system-out>        body_identifiers = callable_identifiers.branch(node, nested=False)</system-out>
		</testcase>
		<testcase name="Mutant #1773" file="mako/codegen.py" line="967">
			<system-out>        body_identifiers.add_declared(&quot;caller&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1774" file="mako/codegen.py" line="979">
			<system-out>                self.write_inline_def(node, callable_identifiers, nested=False)</system-out>
		</testcase>
		<testcase name="Mutant #1775" file="mako/codegen.py" line="980">
			<system-out>                if not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1776" file="mako/codegen.py" line="984">
			<system-out>                if node.funcname in body_identifiers.closuredefs:</system-out>
		</testcase>
		<testcase name="Mutant #1777" file="mako/codegen.py" line="987">
			<system-out>        vis = DefVisitor()</system-out>
		</testcase>
		<testcase name="Mutant #1778" file="mako/codegen.py" line="992">
			<system-out>        bodyargs = node.body_decl.get_argument_expressions()</system-out>
		</testcase>
		<testcase name="Mutant #1779" file="mako/codegen.py" line="993">
			<system-out>        self.printer.writeline(&quot;def body(%s):&quot; % &quot;,&quot;.join(bodyargs))</system-out>
		</testcase>
		<testcase name="Mutant #1780" file="mako/codegen.py" line="993">
			<system-out>        self.printer.writeline(&quot;def body(%s):&quot; % &quot;,&quot;.join(bodyargs))</system-out>
		</testcase>
		<testcase name="Mutant #1781" file="mako/codegen.py" line="993">
			<system-out>        self.printer.writeline(&quot;def body(%s):&quot; % &quot;,&quot;.join(bodyargs))</system-out>
		</testcase>
		<testcase name="Mutant #1782" file="mako/codegen.py" line="997">
			<system-out>        buffered = False</system-out>
		</testcase>
		<testcase name="Mutant #1783" file="mako/codegen.py" line="997">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -995,7 +995,7 @@
 
         # TODO: figure out best way to specify
         # buffering/nonbuffering (at call time would be better)
-        buffered = False
+        buffered = None
         if buffered:
             self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;try:&quot;)
         self.write_variable_declares(body_identifiers)
</failure>
			<system-out>        buffered = False</system-out>
		</testcase>
		<testcase name="Mutant #1784" file="mako/codegen.py" line="999">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -997,7 +997,7 @@
         # buffering/nonbuffering (at call time would be better)
         buffered = False
         if buffered:
-            self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;try:&quot;)
+            self.printer.writelines(&quot;XXcontext._push_buffer()XX&quot;, &quot;try:&quot;)
         self.write_variable_declares(body_identifiers)
         self.identifier_stack.append(body_identifiers)
 
</failure>
			<system-out>            self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;try:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1785" file="mako/codegen.py" line="999">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -997,7 +997,7 @@
         # buffering/nonbuffering (at call time would be better)
         buffered = False
         if buffered:
-            self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;try:&quot;)
+            self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;XXtry:XX&quot;)
         self.write_variable_declares(body_identifiers)
         self.identifier_stack.append(body_identifiers)
 
</failure>
			<system-out>            self.printer.writelines(&quot;context._push_buffer()&quot;, &quot;try:&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1786" file="mako/codegen.py" line="1007">
			<system-out>        self.write_def_finish(node, buffered, False, False, callstack=False)</system-out>
		</testcase>
		<testcase name="Mutant #1787" file="mako/codegen.py" line="1007">
			<system-out>        self.write_def_finish(node, buffered, False, False, callstack=False)</system-out>
		</testcase>
		<testcase name="Mutant #1788" file="mako/codegen.py" line="1007">
			<system-out>        self.write_def_finish(node, buffered, False, False, callstack=False)</system-out>
		</testcase>
		<testcase name="Mutant #1789" file="mako/codegen.py" line="1008">
			<system-out>        self.printer.writelines(None, &quot;return [%s]&quot; % (&quot;,&quot;.join(export)), None)</system-out>
		</testcase>
		<testcase name="Mutant #1790" file="mako/codegen.py" line="1008">
			<system-out>        self.printer.writelines(None, &quot;return [%s]&quot; % (&quot;,&quot;.join(export)), None)</system-out>
		</testcase>
		<testcase name="Mutant #1791" file="mako/codegen.py" line="1008">
			<system-out>        self.printer.writelines(None, &quot;return [%s]&quot; % (&quot;,&quot;.join(export)), None)</system-out>
		</testcase>
		<testcase name="Mutant #1792" file="mako/codegen.py" line="1012">
			<system-out>            &quot;context.caller_stack.nextcaller = &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1793" file="mako/codegen.py" line="1013">
			<system-out>            &quot;runtime.Namespace('caller', context, &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1794" file="mako/codegen.py" line="1014">
			<system-out>            &quot;callables=ccall(__M_caller))&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1795" file="mako/codegen.py" line="1015">
			<system-out>            &quot;try:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1796" file="mako/codegen.py" line="1019">
			<system-out>            &quot;__M_writer(%s)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1797" file="mako/codegen.py" line="1020">
			<system-out>            % self.create_filter_callable([], node.expression, True),</system-out>
		</testcase>
		<testcase name="Mutant #1798" file="mako/codegen.py" line="1020">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1018,7 +1018,7 @@
         self.printer.start_source(node.lineno)
         self.printer.writelines(
             &quot;__M_writer(%s)&quot;
-            % self.create_filter_callable([], node.expression, True),
+            % self.create_filter_callable([], node.expression, False),
             &quot;finally:&quot;,
             &quot;context.caller_stack.nextcaller = None&quot;,
             None,
</failure>
			<system-out>            % self.create_filter_callable([], node.expression, True),</system-out>
		</testcase>
		<testcase name="Mutant #1799" file="mako/codegen.py" line="1021">
			<system-out>            &quot;finally:&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1800" file="mako/codegen.py" line="1022">
			<system-out>            &quot;context.caller_stack.nextcaller = None&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #1801" file="mako/codegen.py" line="1031">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1029,7 +1029,7 @@
 
     &quot;&quot;&quot;tracks the status of identifier names as template code is rendered.&quot;&quot;&quot;
 
-    def __init__(self, compiler, node=None, parent=None, nested=False):
+    def __init__(self, compiler, node=None, parent=None, nested=True):
         if parent is not None:
             # if we are the branch created in write_namespaces(),
             # we don't share any context from the main body().
</failure>
			<system-out>    def __init__(self, compiler, node=None, parent=None, nested=False):</system-out>
		</testcase>
		<testcase name="Mutant #1802" file="mako/codegen.py" line="1032">
			<system-out>        if parent is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1803" file="mako/codegen.py" line="1036">
			<system-out>                self.declared = set()</system-out>
		</testcase>
		<testcase name="Mutant #1804" file="mako/codegen.py" line="1037">
			<system-out>                self.topleveldefs = util.SetLikeDict()</system-out>
		</testcase>
		<testcase name="Mutant #1805" file="mako/codegen.py" line="1046">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #1806" file="mako/codegen.py" line="1053">
			<system-out>                    self.declared = self.declared.union(parent.undeclared)</system-out>
		</testcase>
		<testcase name="Mutant #1807" file="mako/codegen.py" line="1056">
			<system-out>                self.topleveldefs = util.SetLikeDict(**parent.topleveldefs)</system-out>
		</testcase>
		<testcase name="Mutant #1808" file="mako/codegen.py" line="1058">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1056,7 +1056,7 @@
                 # top level defs that are available
                 self.topleveldefs = util.SetLikeDict(**parent.topleveldefs)
         else:
-            self.declared = set()
+            self.declared = None
             self.topleveldefs = util.SetLikeDict()
 
         self.compiler = compiler
</failure>
			<system-out>            self.declared = set()</system-out>
		</testcase>
		<testcase name="Mutant #1809" file="mako/codegen.py" line="1059">
			<system-out>            self.topleveldefs = util.SetLikeDict()</system-out>
		</testcase>
		<testcase name="Mutant #1810" file="mako/codegen.py" line="1061">
			<system-out>        self.compiler = compiler</system-out>
		</testcase>
		<testcase name="Mutant #1811" file="mako/codegen.py" line="1065">
			<system-out>        self.undeclared = set()</system-out>
		</testcase>
		<testcase name="Mutant #1812" file="mako/codegen.py" line="1070">
			<system-out>        self.locally_declared = set()</system-out>
		</testcase>
		<testcase name="Mutant #1813" file="mako/codegen.py" line="1075">
			<system-out>        self.locally_assigned = set()</system-out>
		</testcase>
		<testcase name="Mutant #1814" file="mako/codegen.py" line="1079">
			<system-out>        self.argument_declared = set()</system-out>
		</testcase>
		<testcase name="Mutant #1815" file="mako/codegen.py" line="1082">
			<system-out>        self.closuredefs = util.SetLikeDict()</system-out>
		</testcase>
		<testcase name="Mutant #1816" file="mako/codegen.py" line="1084">
			<system-out>        self.node = node</system-out>
		</testcase>
		<testcase name="Mutant #1817" file="mako/codegen.py" line="1086">
			<system-out>        if node is not None:</system-out>
		</testcase>
		<testcase name="Mutant #1818" file="mako/codegen.py" line="1091">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #1819" file="mako/codegen.py" line="1094">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1092,7 +1092,7 @@
         )
         if illegal_names:
             raise exceptions.NameConflictError(
-                &quot;Reserved words declared in template: %s&quot;
+                &quot;XXReserved words declared in template: %sXX&quot;
                 % &quot;, &quot;.join(illegal_names)
             )
 
</failure>
			<system-out>                &quot;Reserved words declared in template: %s&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1820" file="mako/codegen.py" line="1095">
			<system-out>                % &quot;, &quot;.join(illegal_names)</system-out>
		</testcase>
		<testcase name="Mutant #1821" file="mako/codegen.py" line="1095">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1093,7 +1093,7 @@
         if illegal_names:
             raise exceptions.NameConflictError(
                 &quot;Reserved words declared in template: %s&quot;
-                % &quot;, &quot;.join(illegal_names)
+                % &quot;XX, XX&quot;.join(illegal_names)
             )
 
     def branch(self, node, **kwargs):
</failure>
			<system-out>                % &quot;, &quot;.join(illegal_names)</system-out>
		</testcase>
		<testcase name="Mutant #1822" file="mako/codegen.py" line="1104">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1823" file="mako/codegen.py" line="1110">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1108,7 +1108,7 @@
 
     def __repr__(self):
         return (
-            &quot;Identifiers(declared=%r, locally_declared=%r, &quot;
+            &quot;XXIdentifiers(declared=%r, locally_declared=%r, XX&quot;
             &quot;undeclared=%r, topleveldefs=%r, closuredefs=%r, &quot;
             &quot;argumentdeclared=%r)&quot;
             % (
</failure>
			<system-out>            &quot;Identifiers(declared=%r, locally_declared=%r, &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1824" file="mako/codegen.py" line="1111">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1109,7 +1109,7 @@
     def __repr__(self):
         return (
             &quot;Identifiers(declared=%r, locally_declared=%r, &quot;
-            &quot;undeclared=%r, topleveldefs=%r, closuredefs=%r, &quot;
+            &quot;XXundeclared=%r, topleveldefs=%r, closuredefs=%r, XX&quot;
             &quot;argumentdeclared=%r)&quot;
             % (
                 list(self.declared),
</failure>
			<system-out>            &quot;undeclared=%r, topleveldefs=%r, closuredefs=%r, &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1825" file="mako/codegen.py" line="1112">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1110,7 +1110,7 @@
         return (
             &quot;Identifiers(declared=%r, locally_declared=%r, &quot;
             &quot;undeclared=%r, topleveldefs=%r, closuredefs=%r, &quot;
-            &quot;argumentdeclared=%r)&quot;
+            &quot;XXargumentdeclared=%r)XX&quot;
             % (
                 list(self.declared),
                 list(self.locally_declared),
</failure>
			<system-out>            &quot;argumentdeclared=%r)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1826" file="mako/codegen.py" line="1113">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1111,7 +1111,7 @@
             &quot;Identifiers(declared=%r, locally_declared=%r, &quot;
             &quot;undeclared=%r, topleveldefs=%r, closuredefs=%r, &quot;
             &quot;argumentdeclared=%r)&quot;
-            % (
+            / (
                 list(self.declared),
                 list(self.locally_declared),
                 list(self.undeclared),
</failure>
			<system-out>            % (</system-out>
		</testcase>
		<testcase name="Mutant #1827" file="mako/codegen.py" line="1128">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1828" file="mako/codegen.py" line="1128">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1829" file="mako/codegen.py" line="1128">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1830" file="mako/codegen.py" line="1130">
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1831" file="mako/codegen.py" line="1137">
			<system-out>        if ident in self.undeclared:</system-out>
		</testcase>
		<testcase name="Mutant #1832" file="mako/codegen.py" line="1147">
			<system-out>        if not node.ismodule:</system-out>
		</testcase>
		<testcase name="Mutant #1833" file="mako/codegen.py" line="1151">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1834" file="mako/codegen.py" line="1157">
			<system-out>        if self.node is node:</system-out>
		</testcase>
		<testcase name="Mutant #1835" file="mako/codegen.py" line="1162">
			<system-out>        existing = collection.get(node.funcname)</system-out>
		</testcase>
		<testcase name="Mutant #1836" file="mako/codegen.py" line="1163">
			<system-out>        collection[node.funcname] = node</system-out>
		</testcase>
		<testcase name="Mutant #1837" file="mako/codegen.py" line="1165">
			<system-out>            existing is not None</system-out>
		</testcase>
		<testcase name="Mutant #1838" file="mako/codegen.py" line="1166">
			<system-out>            and existing is not node</system-out>
		</testcase>
		<testcase name="Mutant #1839" file="mako/codegen.py" line="1167">
			<system-out>            and (node.is_block or existing.is_block)</system-out>
		</testcase>
		<testcase name="Mutant #1840" file="mako/codegen.py" line="1167">
			<system-out>            and (node.is_block or existing.is_block)</system-out>
		</testcase>
		<testcase name="Mutant #1841" file="mako/codegen.py" line="1170">
			<system-out>                &quot;%%def or %%block named '%s' already &quot;</system-out>
		</testcase>
		<testcase name="Mutant #1842" file="mako/codegen.py" line="1171">
			<system-out>                &quot;exists in this template.&quot; % node.funcname,</system-out>
		</testcase>
		<testcase name="Mutant #1843" file="mako/codegen.py" line="1171">
			<system-out>                &quot;exists in this template.&quot; % node.funcname,</system-out>
		</testcase>
		<testcase name="Mutant #1844" file="mako/codegen.py" line="1176">
			<system-out>        if node.is_root() and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1845" file="mako/codegen.py" line="1176">
			<system-out>        if node.is_root() and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1846" file="mako/codegen.py" line="1178">
			<system-out>        elif node is not self.node:</system-out>
		</testcase>
		<testcase name="Mutant #1847" file="mako/codegen.py" line="1182">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1848" file="mako/codegen.py" line="1182">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1180,7 +1180,7 @@
             self._check_name_exists(self.closuredefs, node)
 
         for ident in node.undeclared_identifiers():
-            if ident != &quot;context&quot; and ident not in self.declared.union(
+            if ident != &quot;XXcontextXX&quot; and ident not in self.declared.union(
                 self.locally_declared
             ):
                 self.undeclared.add(ident)
</failure>
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1849" file="mako/codegen.py" line="1182">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1850" file="mako/codegen.py" line="1184">
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1851" file="mako/codegen.py" line="1188">
			<system-out>        if node is self.node:</system-out>
		</testcase>
		<testcase name="Mutant #1852" file="mako/codegen.py" line="1196">
			<system-out>        if node is not self.node and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1853" file="mako/codegen.py" line="1196">
			<system-out>        if node is not self.node and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1854" file="mako/codegen.py" line="1196">
			<system-out>        if node is not self.node and not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1855" file="mako/codegen.py" line="1200">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1198,7 +1198,7 @@
 
             if isinstance(self.node, parsetree.DefTag):
                 raise exceptions.CompileException(
-                    &quot;Named block '%s' not allowed inside of def '%s'&quot;
+                    &quot;XXNamed block '%s' not allowed inside of def '%s'XX&quot;
                     % (node.name, self.node.name),
                     **node.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Named block '%s' not allowed inside of def '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1856" file="mako/codegen.py" line="1201">
			<system-out>                    % (node.name, self.node.name),</system-out>
		</testcase>
		<testcase name="Mutant #1857" file="mako/codegen.py" line="1208">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1206,7 +1206,7 @@
                 self.node, (parsetree.CallTag, parsetree.CallNamespaceTag)
             ):
                 raise exceptions.CompileException(
-                    &quot;Named block '%s' not allowed inside of &lt;%%call&gt; tag&quot;
+                    &quot;XXNamed block '%s' not allowed inside of &lt;%%call&gt; tagXX&quot;
                     % (node.name,),
                     **node.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Named block '%s' not allowed inside of &lt;%%call&gt; tag&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1858" file="mako/codegen.py" line="1209">
			<system-out>                    % (node.name,),</system-out>
		</testcase>
		<testcase name="Mutant #1859" file="mako/codegen.py" line="1214">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1860" file="mako/codegen.py" line="1214">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1212,7 +1212,7 @@
                 )
 
         for ident in node.undeclared_identifiers():
-            if ident != &quot;context&quot; and ident not in self.declared.union(
+            if ident != &quot;XXcontextXX&quot; and ident not in self.declared.union(
                 self.locally_declared
             ):
                 self.undeclared.add(ident)
</failure>
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1861" file="mako/codegen.py" line="1214">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1862" file="mako/codegen.py" line="1216">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1212,7 +1212,7 @@
                 )
 
         for ident in node.undeclared_identifiers():
-            if ident != &quot;context&quot; and ident not in self.declared.union(
+            if ident != &quot;context&quot; or ident not in self.declared.union(
                 self.locally_declared
             ):
                 self.undeclared.add(ident)
</failure>
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1863" file="mako/codegen.py" line="1219">
			<system-out>        if not node.is_anonymous:</system-out>
		</testcase>
		<testcase name="Mutant #1864" file="mako/codegen.py" line="1222">
			<system-out>        elif node is not self.node:</system-out>
		</testcase>
		<testcase name="Mutant #1865" file="mako/codegen.py" line="1231">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1866" file="mako/codegen.py" line="1231">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1229,7 +1229,7 @@
 
     def visitTextTag(self, node):
         for ident in node.undeclared_identifiers():
-            if ident != &quot;context&quot; and ident not in self.declared.union(
+            if ident != &quot;XXcontextXX&quot; and ident not in self.declared.union(
                 self.locally_declared
             ):
                 self.undeclared.add(ident)
</failure>
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1867" file="mako/codegen.py" line="1231">
			<system-out>            if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1868" file="mako/codegen.py" line="1233">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1229,7 +1229,7 @@
 
     def visitTextTag(self, node):
         for ident in node.undeclared_identifiers():
-            if ident != &quot;context&quot; and ident not in self.declared.union(
+            if ident != &quot;context&quot; or ident not in self.declared.union(
                 self.locally_declared
             ):
                 self.undeclared.add(ident)
</failure>
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1869" file="mako/codegen.py" line="1248">
			<system-out>        if node is self.node:</system-out>
		</testcase>
		<testcase name="Mutant #1870" file="mako/codegen.py" line="1250">
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1871" file="mako/codegen.py" line="1250">
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1872" file="mako/codegen.py" line="1250">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1248,7 +1248,7 @@
     def visitCallTag(self, node):
         if node is self.node:
             for ident in node.undeclared_identifiers():
-                if ident != &quot;context&quot; and ident not in self.declared.union(
+                if ident != &quot;context&quot; and ident  in self.declared.union(
                     self.locally_declared
                 ):
                     self.undeclared.add(ident)
</failure>
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1873" file="mako/codegen.py" line="1252">
			<system-out>                ):</system-out>
		</testcase>
		<testcase name="Mutant #1874" file="mako/codegen.py" line="1260">
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1875" file="mako/codegen.py" line="1260">
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1876" file="mako/codegen.py" line="1260">
			<system-out>                if ident != &quot;context&quot; and ident not in self.declared.union(</system-out>
		</testcase>
		<testcase name="Mutant #1877" file="mako/codegen.py" line="1262">
			<system-out>                ):</system-out>
		</testcase>
		<testcase name="Mutant #1878" file="mako/codegen.py" line="1267">
			<system-out>    r&quot;^for\s+((?:\(?)\s*[A-Za-z_][A-Za-z_0-9]*&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1879" file="mako/codegen.py" line="1268">
			<system-out>    r&quot;(?:\s*,\s*(?:[A-Za-z_][A-Za-z0-9_]*),??)*\s*(?:\)?))\s+in\s+(.*):&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1880" file="mako/codegen.py" line="1269">
			<system-out>)</system-out>
		</testcase>
		<testcase name="Mutant #1881" file="mako/codegen.py" line="1276">
			<system-out>    loop_variable = LoopVariable()</system-out>
		</testcase>
		<testcase name="Mutant #1882" file="mako/codegen.py" line="1279">
			<system-out>        node.nodes[-1].has_loop_context = True</system-out>
		</testcase>
		<testcase name="Mutant #1883" file="mako/codegen.py" line="1279">
			<system-out>        node.nodes[-1].has_loop_context = True</system-out>
		</testcase>
		<testcase name="Mutant #1884" file="mako/codegen.py" line="1279">
			<system-out>        node.nodes[-1].has_loop_context = True</system-out>
		</testcase>
		<testcase name="Mutant #1885" file="mako/codegen.py" line="1279">
			<system-out>        node.nodes[-1].has_loop_context = True</system-out>
		</testcase>
		<testcase name="Mutant #1886" file="mako/codegen.py" line="1280">
			<system-out>        match = _FOR_LOOP.match(node.text)</system-out>
		</testcase>
		<testcase name="Mutant #1887" file="mako/codegen.py" line="1283">
			<system-out>                &quot;loop = __M_loop._enter(%s)&quot; % match.group(2),</system-out>
		</testcase>
		<testcase name="Mutant #1888" file="mako/codegen.py" line="1283">
			<system-out>                &quot;loop = __M_loop._enter(%s)&quot; % match.group(2),</system-out>
		</testcase>
		<testcase name="Mutant #1889" file="mako/codegen.py" line="1283">
			<system-out>                &quot;loop = __M_loop._enter(%s)&quot; % match.group(2),</system-out>
		</testcase>
		<testcase name="Mutant #1890" file="mako/codegen.py" line="1284">
			<system-out>                &quot;try:&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1891" file="mako/codegen.py" line="1287">
			<system-out>            text = &quot;for %s in loop:&quot; % match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #1892" file="mako/codegen.py" line="1287">
			<system-out>            text = &quot;for %s in loop:&quot; % match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #1893" file="mako/codegen.py" line="1287">
			<system-out>            text = &quot;for %s in loop:&quot; % match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #1894" file="mako/codegen.py" line="1287">
			<system-out>            text = &quot;for %s in loop:&quot; % match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #1895" file="mako/codegen.py" line="1289">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1287,7 +1287,7 @@
             )
             text = &quot;for %s in loop:&quot; % match.group(1)
         else:
-            raise SyntaxError(&quot;Couldn't apply loop context: %s&quot; % node.text)
+            raise SyntaxError(&quot;XXCouldn't apply loop context: %sXX&quot; % node.text)
     else:
         text = node.text
     return text
</failure>
			<system-out>            raise SyntaxError(&quot;Couldn't apply loop context: %s&quot; % node.text)</system-out>
		</testcase>
		<testcase name="Mutant #1896" file="mako/codegen.py" line="1289">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1287,7 +1287,7 @@
             )
             text = &quot;for %s in loop:&quot; % match.group(1)
         else:
-            raise SyntaxError(&quot;Couldn't apply loop context: %s&quot; % node.text)
+            raise SyntaxError(&quot;Couldn't apply loop context: %s&quot; / node.text)
     else:
         text = node.text
     return text
</failure>
			<system-out>            raise SyntaxError(&quot;Couldn't apply loop context: %s&quot; % node.text)</system-out>
		</testcase>
		<testcase name="Mutant #1897" file="mako/codegen.py" line="1291">
			<system-out>        text = node.text</system-out>
		</testcase>
		<testcase name="Mutant #1898" file="mako/codegen.py" line="1301">
			<system-out>        self.detected = False</system-out>
		</testcase>
		<testcase name="Mutant #1899" file="mako/codegen.py" line="1301">
			<failure type="failure" message="bad_survived">--- mako/codegen.py
+++ mako/codegen.py
@@ -1299,7 +1299,7 @@
     identifiers.&quot;&quot;&quot;
 
     def __init__(self):
-        self.detected = False
+        self.detected = None
 
     def _loop_reference_detected(self, node):
         if &quot;loop&quot; in node.undeclared_identifiers():
</failure>
			<system-out>        self.detected = False</system-out>
		</testcase>
		<testcase name="Mutant #1900" file="mako/codegen.py" line="1304">
			<system-out>        if &quot;loop&quot; in node.undeclared_identifiers():</system-out>
		</testcase>
		<testcase name="Mutant #1901" file="mako/codegen.py" line="1304">
			<system-out>        if &quot;loop&quot; in node.undeclared_identifiers():</system-out>
		</testcase>
		<testcase name="Mutant #1902" file="mako/codegen.py" line="1305">
			<system-out>            self.detected = True</system-out>
		</testcase>
		<testcase name="Mutant #1903" file="mako/codegen.py" line="1305">
			<system-out>            self.detected = True</system-out>
		</testcase>
		<testcase name="Mutant #1904" file="mako/lexer.py" line="16">
			<system-out>_regexp_cache = {}</system-out>
		</testcase>
		<testcase name="Mutant #1905" file="mako/lexer.py" line="24">
			<system-out>        disable_unicode=False,</system-out>
		</testcase>
		<testcase name="Mutant #1906" file="mako/lexer.py" line="28">
			<system-out>        self.text = text</system-out>
		</testcase>
		<testcase name="Mutant #1907" file="mako/lexer.py" line="29">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -27,7 +27,7 @@
         preprocessor=None,
     ):
         self.text = text
-        self.filename = filename
+        self.filename = None
         self.template = parsetree.TemplateNode(self.filename)
         self.matched_lineno = 1
         self.matched_charpos = 0
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #1908" file="mako/lexer.py" line="30">
			<system-out>        self.template = parsetree.TemplateNode(self.filename)</system-out>
		</testcase>
		<testcase name="Mutant #1909" file="mako/lexer.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -29,7 +29,7 @@
         self.text = text
         self.filename = filename
         self.template = parsetree.TemplateNode(self.filename)
-        self.matched_lineno = 1
+        self.matched_lineno = 2
         self.matched_charpos = 0
         self.lineno = 1
         self.match_position = 0
</failure>
			<system-out>        self.matched_lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #1910" file="mako/lexer.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -29,7 +29,7 @@
         self.text = text
         self.filename = filename
         self.template = parsetree.TemplateNode(self.filename)
-        self.matched_lineno = 1
+        self.matched_lineno = None
         self.matched_charpos = 0
         self.lineno = 1
         self.match_position = 0
</failure>
			<system-out>        self.matched_lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #1911" file="mako/lexer.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -30,7 +30,7 @@
         self.filename = filename
         self.template = parsetree.TemplateNode(self.filename)
         self.matched_lineno = 1
-        self.matched_charpos = 0
+        self.matched_charpos = 1
         self.lineno = 1
         self.match_position = 0
         self.tag = []
</failure>
			<system-out>        self.matched_charpos = 0</system-out>
		</testcase>
		<testcase name="Mutant #1912" file="mako/lexer.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -30,7 +30,7 @@
         self.filename = filename
         self.template = parsetree.TemplateNode(self.filename)
         self.matched_lineno = 1
-        self.matched_charpos = 0
+        self.matched_charpos = None
         self.lineno = 1
         self.match_position = 0
         self.tag = []
</failure>
			<system-out>        self.matched_charpos = 0</system-out>
		</testcase>
		<testcase name="Mutant #1913" file="mako/lexer.py" line="33">
			<system-out>        self.lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #1914" file="mako/lexer.py" line="33">
			<system-out>        self.lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #1915" file="mako/lexer.py" line="34">
			<system-out>        self.match_position = 0</system-out>
		</testcase>
		<testcase name="Mutant #1916" file="mako/lexer.py" line="34">
			<system-out>        self.match_position = 0</system-out>
		</testcase>
		<testcase name="Mutant #1917" file="mako/lexer.py" line="35">
			<system-out>        self.tag = []</system-out>
		</testcase>
		<testcase name="Mutant #1918" file="mako/lexer.py" line="36">
			<system-out>        self.control_line = []</system-out>
		</testcase>
		<testcase name="Mutant #1919" file="mako/lexer.py" line="37">
			<system-out>        self.ternary_stack = []</system-out>
		</testcase>
		<testcase name="Mutant #1920" file="mako/lexer.py" line="38">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -36,7 +36,7 @@
         self.tag = []
         self.control_line = []
         self.ternary_stack = []
-        self.disable_unicode = disable_unicode
+        self.disable_unicode = None
         self.encoding = input_encoding
 
         if compat.py3k and disable_unicode:
</failure>
			<system-out>        self.disable_unicode = disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #1921" file="mako/lexer.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -37,7 +37,7 @@
         self.control_line = []
         self.ternary_stack = []
         self.disable_unicode = disable_unicode
-        self.encoding = input_encoding
+        self.encoding = None
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>        self.encoding = input_encoding</system-out>
		</testcase>
		<testcase name="Mutant #1922" file="mako/lexer.py" line="41">
			<system-out>        if compat.py3k and disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #1923" file="mako/lexer.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -41,7 +41,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;XXMako for Python 3 does not XX&quot; &quot;support disabling Unicode&quot;
             )
 
         if preprocessor is None:
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1924" file="mako/lexer.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -41,7 +41,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;Mako for Python 3 does not &quot; &quot;XXsupport disabling UnicodeXX&quot;
             )
 
         if preprocessor is None:
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #1925" file="mako/lexer.py" line="46">
			<system-out>        if preprocessor is None:</system-out>
		</testcase>
		<testcase name="Mutant #1926" file="mako/lexer.py" line="47">
			<system-out>            self.preprocessor = []</system-out>
		</testcase>
		<testcase name="Mutant #1927" file="mako/lexer.py" line="48">
			<system-out>        elif not hasattr(preprocessor, &quot;__iter__&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #1928" file="mako/lexer.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -46,7 +46,7 @@
 
         if preprocessor is None:
             self.preprocessor = []
-        elif not hasattr(preprocessor, &quot;__iter__&quot;):
+        elif not hasattr(preprocessor, &quot;XX__iter__XX&quot;):
             self.preprocessor = [preprocessor]
         else:
             self.preprocessor = preprocessor
</failure>
			<system-out>        elif not hasattr(preprocessor, &quot;__iter__&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #1929" file="mako/lexer.py" line="49">
			<system-out>            self.preprocessor = [preprocessor]</system-out>
		</testcase>
		<testcase name="Mutant #1930" file="mako/lexer.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -49,7 +49,7 @@
         elif not hasattr(preprocessor, &quot;__iter__&quot;):
             self.preprocessor = [preprocessor]
         else:
-            self.preprocessor = preprocessor
+            self.preprocessor = None
 
     @property
     def exception_kwargs(self):
</failure>
			<system-out>            self.preprocessor = preprocessor</system-out>
		</testcase>
		<testcase name="Mutant #1931" file="mako/lexer.py" line="53">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #1932" file="mako/lexer.py" line="56">
			<system-out>            &quot;source&quot;: self.text,</system-out>
		</testcase>
		<testcase name="Mutant #1933" file="mako/lexer.py" line="57">
			<system-out>            &quot;lineno&quot;: self.matched_lineno,</system-out>
		</testcase>
		<testcase name="Mutant #1934" file="mako/lexer.py" line="58">
			<system-out>            &quot;pos&quot;: self.matched_charpos,</system-out>
		</testcase>
		<testcase name="Mutant #1935" file="mako/lexer.py" line="59">
			<system-out>            &quot;filename&quot;: self.filename,</system-out>
		</testcase>
		<testcase name="Mutant #1936" file="mako/lexer.py" line="66">
			<system-out>            reg = _regexp_cache[(regexp, flags)]</system-out>
		</testcase>
		<testcase name="Mutant #1937" file="mako/lexer.py" line="69">
			<system-out>                reg = re.compile(regexp, flags)</system-out>
		</testcase>
		<testcase name="Mutant #1938" file="mako/lexer.py" line="71">
			<system-out>                reg = re.compile(regexp)</system-out>
		</testcase>
		<testcase name="Mutant #1939" file="mako/lexer.py" line="72">
			<system-out>            _regexp_cache[(regexp, flags)] = reg</system-out>
		</testcase>
		<testcase name="Mutant #1940" file="mako/lexer.py" line="84">
			<system-out>        mp = self.match_position</system-out>
		</testcase>
		<testcase name="Mutant #1941" file="mako/lexer.py" line="86">
			<system-out>        match = reg.match(self.text, self.match_position)</system-out>
		</testcase>
		<testcase name="Mutant #1942" file="mako/lexer.py" line="88">
			<system-out>            (start, end) = match.span()</system-out>
		</testcase>
		<testcase name="Mutant #1943" file="mako/lexer.py" line="89">
			<system-out>            if end == start:</system-out>
		</testcase>
		<testcase name="Mutant #1944" file="mako/lexer.py" line="90">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -88,7 +88,7 @@
         if match:
             (start, end) = match.span()
             if end == start:
-                self.match_position = end + 1
+                self.match_position = end - 1
             else:
                 self.match_position = end
             self.matched_lineno = self.lineno
</error>
			<system-out>                self.match_position = end + 1</system-out>
		</testcase>
		<testcase name="Mutant #1945" file="mako/lexer.py" line="90">
			<system-out>                self.match_position = end + 1</system-out>
		</testcase>
		<testcase name="Mutant #1946" file="mako/lexer.py" line="90">
			<system-out>                self.match_position = end + 1</system-out>
		</testcase>
		<testcase name="Mutant #1947" file="mako/lexer.py" line="92">
			<system-out>                self.match_position = end</system-out>
		</testcase>
		<testcase name="Mutant #1948" file="mako/lexer.py" line="93">
			<system-out>            self.matched_lineno = self.lineno</system-out>
		</testcase>
		<testcase name="Mutant #1949" file="mako/lexer.py" line="94">
			<system-out>            lines = re.findall(r&quot;\n&quot;, self.text[mp : self.match_position])</system-out>
		</testcase>
		<testcase name="Mutant #1950" file="mako/lexer.py" line="94">
			<system-out>            lines = re.findall(r&quot;\n&quot;, self.text[mp : self.match_position])</system-out>
		</testcase>
		<testcase name="Mutant #1951" file="mako/lexer.py" line="95">
			<system-out>            cp = mp - 1</system-out>
		</testcase>
		<testcase name="Mutant #1952" file="mako/lexer.py" line="95">
			<system-out>            cp = mp - 1</system-out>
		</testcase>
		<testcase name="Mutant #1953" file="mako/lexer.py" line="95">
			<system-out>            cp = mp - 1</system-out>
		</testcase>
		<testcase name="Mutant #1954" file="mako/lexer.py" line="96">
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1955" file="mako/lexer.py" line="96">
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1956" file="mako/lexer.py" line="96">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -94,7 +94,7 @@
             self.matched_lineno = self.lineno
             lines = re.findall(r&quot;\n&quot;, self.text[mp : self.match_position])
             cp = mp - 1
-            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:
+            while cp &gt;= 0 and cp &lt;= self.textlength and self.text[cp] != &quot;\n&quot;:
                 cp -= 1
             self.matched_charpos = mp - cp
             self.lineno += len(lines)
</failure>
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1957" file="mako/lexer.py" line="96">
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1958" file="mako/lexer.py" line="96">
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1959" file="mako/lexer.py" line="96">
			<system-out>            while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #1960" file="mako/lexer.py" line="97">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -95,7 +95,7 @@
             lines = re.findall(r&quot;\n&quot;, self.text[mp : self.match_position])
             cp = mp - 1
             while cp &gt;= 0 and cp &lt; self.textlength and self.text[cp] != &quot;\n&quot;:
-                cp -= 1
+                cp = 1
             self.matched_charpos = mp - cp
             self.lineno += len(lines)
             # print &quot;MATCHED:&quot;, match.group(0), &quot;LINE START:&quot;,
</error>
			<system-out>                cp -= 1</system-out>
		</testcase>
		<testcase name="Mutant #1961" file="mako/lexer.py" line="97">
			<system-out>                cp -= 1</system-out>
		</testcase>
		<testcase name="Mutant #1962" file="mako/lexer.py" line="97">
			<system-out>                cp -= 1</system-out>
		</testcase>
		<testcase name="Mutant #1963" file="mako/lexer.py" line="98">
			<system-out>            self.matched_charpos = mp - cp</system-out>
		</testcase>
		<testcase name="Mutant #1964" file="mako/lexer.py" line="98">
			<system-out>            self.matched_charpos = mp - cp</system-out>
		</testcase>
		<testcase name="Mutant #1965" file="mako/lexer.py" line="99">
			<system-out>            self.lineno += len(lines)</system-out>
		</testcase>
		<testcase name="Mutant #1966" file="mako/lexer.py" line="99">
			<system-out>            self.lineno += len(lines)</system-out>
		</testcase>
		<testcase name="Mutant #1967" file="mako/lexer.py" line="107">
			<system-out>        startpos = self.match_position</system-out>
		</testcase>
		<testcase name="Mutant #1968" file="mako/lexer.py" line="108">
			<system-out>        text_re = r&quot;|&quot;.join(text)</system-out>
		</testcase>
		<testcase name="Mutant #1969" file="mako/lexer.py" line="108">
			<system-out>        text_re = r&quot;|&quot;.join(text)</system-out>
		</testcase>
		<testcase name="Mutant #1970" file="mako/lexer.py" line="109">
			<system-out>        brace_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1971" file="mako/lexer.py" line="109">
			<system-out>        brace_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1972" file="mako/lexer.py" line="110">
			<system-out>        paren_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1973" file="mako/lexer.py" line="110">
			<system-out>        paren_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1974" file="mako/lexer.py" line="111">
			<system-out>        bracket_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1975" file="mako/lexer.py" line="111">
			<system-out>        bracket_level = 0</system-out>
		</testcase>
		<testcase name="Mutant #1976" file="mako/lexer.py" line="112">
			<system-out>        while True:</system-out>
		</testcase>
		<testcase name="Mutant #1977" file="mako/lexer.py" line="113">
			<system-out>            match = self.match(r&quot;#.*\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1978" file="mako/lexer.py" line="113">
			<system-out>            match = self.match(r&quot;#.*\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #1979" file="mako/lexer.py" line="115">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #1980" file="mako/lexer.py" line="117">
			<system-out>                r&quot;(\&quot;\&quot;\&quot;|\'\'\'|\&quot;|\')[^\\]*?(\\.[^\\]*?)*\1&quot;, re.S</system-out>
		</testcase>
		<testcase name="Mutant #1981" file="mako/lexer.py" line="118">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #1982" file="mako/lexer.py" line="120">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #1983" file="mako/lexer.py" line="121">
			<system-out>            match = self.match(r&quot;(%s)&quot; % text_re)</system-out>
		</testcase>
		<testcase name="Mutant #1984" file="mako/lexer.py" line="121">
			<system-out>            match = self.match(r&quot;(%s)&quot; % text_re)</system-out>
		</testcase>
		<testcase name="Mutant #1985" file="mako/lexer.py" line="121">
			<system-out>            match = self.match(r&quot;(%s)&quot; % text_re)</system-out>
		</testcase>
		<testcase name="Mutant #1986" file="mako/lexer.py" line="122">
			<system-out>            if match and not (</system-out>
		</testcase>
		<testcase name="Mutant #1987" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1988" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1989" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1990" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1991" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1992" file="mako/lexer.py" line="124">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -122,7 +122,7 @@
             match = self.match(r&quot;(%s)&quot; % text_re)
             if match and not (
                 watch_nesting
-                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)
+                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 1)
             ):
                 return (
                     self.text[
</failure>
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1993" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1994" file="mako/lexer.py" line="124">
			<system-out>                and (brace_level &gt; 0 or paren_level &gt; 0 or bracket_level &gt; 0)</system-out>
		</testcase>
		<testcase name="Mutant #1995" file="mako/lexer.py" line="125">
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #1996" file="mako/lexer.py" line="128">
			<system-out>                        startpos : self.match_position - len(match.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #1997" file="mako/lexer.py" line="128">
			<system-out>                        startpos : self.match_position - len(match.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #1998" file="mako/lexer.py" line="130">
			<system-out>                    match.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #1999" file="mako/lexer.py" line="132">
			<system-out>            elif not match:</system-out>
		</testcase>
		<testcase name="Mutant #2000" file="mako/lexer.py" line="133">
			<system-out>                match = self.match(r&quot;(.*?)(?=\&quot;|\'|#|%s)&quot; % text_re, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2001" file="mako/lexer.py" line="133">
			<system-out>                match = self.match(r&quot;(.*?)(?=\&quot;|\'|#|%s)&quot; % text_re, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2002" file="mako/lexer.py" line="133">
			<system-out>                match = self.match(r&quot;(.*?)(?=\&quot;|\'|#|%s)&quot; % text_re, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2003" file="mako/lexer.py" line="135">
			<system-out>                brace_level += match.group(1).count(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2004" file="mako/lexer.py" line="135">
			<system-out>                brace_level += match.group(1).count(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2005" file="mako/lexer.py" line="135">
			<system-out>                brace_level += match.group(1).count(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2006" file="mako/lexer.py" line="135">
			<system-out>                brace_level += match.group(1).count(&quot;{&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2007" file="mako/lexer.py" line="136">
			<system-out>                brace_level -= match.group(1).count(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2008" file="mako/lexer.py" line="136">
			<system-out>                brace_level -= match.group(1).count(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2009" file="mako/lexer.py" line="136">
			<system-out>                brace_level -= match.group(1).count(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2010" file="mako/lexer.py" line="136">
			<system-out>                brace_level -= match.group(1).count(&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2011" file="mako/lexer.py" line="137">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -135,7 +135,7 @@
             if match:
                 brace_level += match.group(1).count(&quot;{&quot;)
                 brace_level -= match.group(1).count(&quot;}&quot;)
-                paren_level += match.group(1).count(&quot;(&quot;)
+                paren_level = match.group(1).count(&quot;(&quot;)
                 paren_level -= match.group(1).count(&quot;)&quot;)
                 bracket_level += match.group(1).count(&quot;[&quot;)
                 bracket_level -= match.group(1).count(&quot;]&quot;)
</failure>
			<system-out>                paren_level += match.group(1).count(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2012" file="mako/lexer.py" line="137">
			<system-out>                paren_level += match.group(1).count(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2013" file="mako/lexer.py" line="137">
			<system-out>                paren_level += match.group(1).count(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2014" file="mako/lexer.py" line="137">
			<system-out>                paren_level += match.group(1).count(&quot;(&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2015" file="mako/lexer.py" line="138">
			<system-out>                paren_level -= match.group(1).count(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2016" file="mako/lexer.py" line="138">
			<system-out>                paren_level -= match.group(1).count(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2017" file="mako/lexer.py" line="138">
			<system-out>                paren_level -= match.group(1).count(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2018" file="mako/lexer.py" line="138">
			<system-out>                paren_level -= match.group(1).count(&quot;)&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2019" file="mako/lexer.py" line="139">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -137,7 +137,7 @@
                 brace_level -= match.group(1).count(&quot;}&quot;)
                 paren_level += match.group(1).count(&quot;(&quot;)
                 paren_level -= match.group(1).count(&quot;)&quot;)
-                bracket_level += match.group(1).count(&quot;[&quot;)
+                bracket_level = match.group(1).count(&quot;[&quot;)
                 bracket_level -= match.group(1).count(&quot;]&quot;)
                 continue
             raise exceptions.SyntaxException(
</failure>
			<system-out>                bracket_level += match.group(1).count(&quot;[&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2020" file="mako/lexer.py" line="139">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -137,7 +137,7 @@
                 brace_level -= match.group(1).count(&quot;}&quot;)
                 paren_level += match.group(1).count(&quot;(&quot;)
                 paren_level -= match.group(1).count(&quot;)&quot;)
-                bracket_level += match.group(1).count(&quot;[&quot;)
+                bracket_level -= match.group(1).count(&quot;[&quot;)
                 bracket_level -= match.group(1).count(&quot;]&quot;)
                 continue
             raise exceptions.SyntaxException(
</failure>
			<system-out>                bracket_level += match.group(1).count(&quot;[&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2021" file="mako/lexer.py" line="139">
			<system-out>                bracket_level += match.group(1).count(&quot;[&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2022" file="mako/lexer.py" line="139">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -137,7 +137,7 @@
                 brace_level -= match.group(1).count(&quot;}&quot;)
                 paren_level += match.group(1).count(&quot;(&quot;)
                 paren_level -= match.group(1).count(&quot;)&quot;)
-                bracket_level += match.group(1).count(&quot;[&quot;)
+                bracket_level += match.group(1).count(&quot;XX[XX&quot;)
                 bracket_level -= match.group(1).count(&quot;]&quot;)
                 continue
             raise exceptions.SyntaxException(
</failure>
			<system-out>                bracket_level += match.group(1).count(&quot;[&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2023" file="mako/lexer.py" line="140">
			<system-out>                bracket_level -= match.group(1).count(&quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2024" file="mako/lexer.py" line="140">
			<system-out>                bracket_level -= match.group(1).count(&quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2025" file="mako/lexer.py" line="140">
			<system-out>                bracket_level -= match.group(1).count(&quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2026" file="mako/lexer.py" line="140">
			<system-out>                bracket_level -= match.group(1).count(&quot;]&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2027" file="mako/lexer.py" line="141">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2028" file="mako/lexer.py" line="143">
			<system-out>                &quot;Expected: %s&quot; % &quot;,&quot;.join(text), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #2029" file="mako/lexer.py" line="143">
			<system-out>                &quot;Expected: %s&quot; % &quot;,&quot;.join(text), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #2030" file="mako/lexer.py" line="143">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -141,7 +141,7 @@
                 bracket_level -= match.group(1).count(&quot;]&quot;)
                 continue
             raise exceptions.SyntaxException(
-                &quot;Expected: %s&quot; % &quot;,&quot;.join(text), **self.exception_kwargs
+                &quot;Expected: %s&quot; % &quot;XX,XX&quot;.join(text), **self.exception_kwargs
             )
 
     def append_node(self, nodecls, *args, **kwargs):
</failure>
			<system-out>                &quot;Expected: %s&quot; % &quot;,&quot;.join(text), **self.exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #2031" file="mako/lexer.py" line="147">
			<system-out>        kwargs.setdefault(&quot;source&quot;, self.text)</system-out>
		</testcase>
		<testcase name="Mutant #2032" file="mako/lexer.py" line="148">
			<system-out>        kwargs.setdefault(&quot;lineno&quot;, self.matched_lineno)</system-out>
		</testcase>
		<testcase name="Mutant #2033" file="mako/lexer.py" line="149">
			<system-out>        kwargs.setdefault(&quot;pos&quot;, self.matched_charpos)</system-out>
		</testcase>
		<testcase name="Mutant #2034" file="mako/lexer.py" line="150">
			<system-out>        kwargs[&quot;filename&quot;] = self.filename</system-out>
		</testcase>
		<testcase name="Mutant #2035" file="mako/lexer.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -148,7 +148,7 @@
         kwargs.setdefault(&quot;source&quot;, self.text)
         kwargs.setdefault(&quot;lineno&quot;, self.matched_lineno)
         kwargs.setdefault(&quot;pos&quot;, self.matched_charpos)
-        kwargs[&quot;filename&quot;] = self.filename
+        kwargs[&quot;filename&quot;] = None
         node = nodecls(*args, **kwargs)
         if len(self.tag):
             self.tag[-1].nodes.append(node)
</failure>
			<system-out>        kwargs[&quot;filename&quot;] = self.filename</system-out>
		</testcase>
		<testcase name="Mutant #2036" file="mako/lexer.py" line="151">
			<system-out>        node = nodecls(*args, **kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #2037" file="mako/lexer.py" line="153">
			<system-out>            self.tag[-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2038" file="mako/lexer.py" line="153">
			<system-out>            self.tag[-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2039" file="mako/lexer.py" line="161">
			<system-out>            control_frame = self.control_line[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2040" file="mako/lexer.py" line="161">
			<system-out>            control_frame = self.control_line[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2041" file="mako/lexer.py" line="161">
			<system-out>            control_frame = self.control_line[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2042" file="mako/lexer.py" line="163">
			<system-out>            if not (</system-out>
		</testcase>
		<testcase name="Mutant #2043" file="mako/lexer.py" line="165">
			<system-out>                and control_frame.is_ternary(node.keyword)</system-out>
		</testcase>
		<testcase name="Mutant #2044" file="mako/lexer.py" line="167">
			<system-out>                if self.ternary_stack and self.ternary_stack[-1]:</system-out>
		</testcase>
		<testcase name="Mutant #2045" file="mako/lexer.py" line="167">
			<system-out>                if self.ternary_stack and self.ternary_stack[-1]:</system-out>
		</testcase>
		<testcase name="Mutant #2046" file="mako/lexer.py" line="167">
			<system-out>                if self.ternary_stack and self.ternary_stack[-1]:</system-out>
		</testcase>
		<testcase name="Mutant #2047" file="mako/lexer.py" line="168">
			<system-out>                    self.ternary_stack[-1][-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2048" file="mako/lexer.py" line="168">
			<system-out>                    self.ternary_stack[-1][-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2049" file="mako/lexer.py" line="168">
			<system-out>                    self.ternary_stack[-1][-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2050" file="mako/lexer.py" line="168">
			<system-out>                    self.ternary_stack[-1][-1].nodes.append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2051" file="mako/lexer.py" line="171">
			<system-out>                node.parent = self.tag[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2052" file="mako/lexer.py" line="171">
			<system-out>                node.parent = self.tag[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2053" file="mako/lexer.py" line="171">
			<system-out>                node.parent = self.tag[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2054" file="mako/lexer.py" line="180">
			<system-out>            elif self.control_line and self.control_line[-1].is_ternary(</system-out>
		</testcase>
		<testcase name="Mutant #2055" file="mako/lexer.py" line="180">
			<system-out>            elif self.control_line and self.control_line[-1].is_ternary(</system-out>
		</testcase>
		<testcase name="Mutant #2056" file="mako/lexer.py" line="182">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -178,7 +178,7 @@
             elif node.is_primary:
                 self.control_line.append(node)
                 self.ternary_stack.append([])
-            elif self.control_line and self.control_line[-1].is_ternary(
+            elif self.control_line or self.control_line[-1].is_ternary(
                 node.keyword
             ):
                 self.ternary_stack[-1].append(node)
</failure>
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #2057" file="mako/lexer.py" line="183">
			<system-out>                self.ternary_stack[-1].append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2058" file="mako/lexer.py" line="183">
			<system-out>                self.ternary_stack[-1].append(node)</system-out>
		</testcase>
		<testcase name="Mutant #2059" file="mako/lexer.py" line="184">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -182,7 +182,7 @@
                 node.keyword
             ):
                 self.ternary_stack[-1].append(node)
-            elif self.control_line and not self.control_line[-1].is_ternary(
+            elif self.control_line and  self.control_line[-1].is_ternary(
                 node.keyword
             ):
                 raise exceptions.SyntaxException(
</failure>
			<system-out>            elif self.control_line and not self.control_line[-1].is_ternary(</system-out>
		</testcase>
		<testcase name="Mutant #2060" file="mako/lexer.py" line="184">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -182,7 +182,7 @@
                 node.keyword
             ):
                 self.ternary_stack[-1].append(node)
-            elif self.control_line and not self.control_line[-1].is_ternary(
+            elif self.control_line and not self.control_line[+1].is_ternary(
                 node.keyword
             ):
                 raise exceptions.SyntaxException(
</failure>
			<system-out>            elif self.control_line and not self.control_line[-1].is_ternary(</system-out>
		</testcase>
		<testcase name="Mutant #2061" file="mako/lexer.py" line="184">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -182,7 +182,7 @@
                 node.keyword
             ):
                 self.ternary_stack[-1].append(node)
-            elif self.control_line and not self.control_line[-1].is_ternary(
+            elif self.control_line and not self.control_line[-2].is_ternary(
                 node.keyword
             ):
                 raise exceptions.SyntaxException(
</failure>
			<system-out>            elif self.control_line and not self.control_line[-1].is_ternary(</system-out>
		</testcase>
		<testcase name="Mutant #2062" file="mako/lexer.py" line="186">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -182,7 +182,7 @@
                 node.keyword
             ):
                 self.ternary_stack[-1].append(node)
-            elif self.control_line and not self.control_line[-1].is_ternary(
+            elif self.control_line or not self.control_line[-1].is_ternary(
                 node.keyword
             ):
                 raise exceptions.SyntaxException(
</failure>
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #2063" file="mako/lexer.py" line="188">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -186,7 +186,7 @@
                 node.keyword
             ):
                 raise exceptions.SyntaxException(
-                    &quot;Keyword '%s' not a legal ternary for keyword '%s'&quot;
+                    &quot;XXKeyword '%s' not a legal ternary for keyword '%s'XX&quot;
                     % (node.keyword, self.control_line[-1].keyword),
                     **self.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Keyword '%s' not a legal ternary for keyword '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2064" file="mako/lexer.py" line="189">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -187,7 +187,7 @@
             ):
                 raise exceptions.SyntaxException(
                     &quot;Keyword '%s' not a legal ternary for keyword '%s'&quot;
-                    % (node.keyword, self.control_line[-1].keyword),
+                    / (node.keyword, self.control_line[-1].keyword),
                     **self.exception_kwargs
                 )
 
</failure>
			<system-out>                    % (node.keyword, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2065" file="mako/lexer.py" line="189">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -187,7 +187,7 @@
             ):
                 raise exceptions.SyntaxException(
                     &quot;Keyword '%s' not a legal ternary for keyword '%s'&quot;
-                    % (node.keyword, self.control_line[-1].keyword),
+                    % (node.keyword, self.control_line[+1].keyword),
                     **self.exception_kwargs
                 )
 
</failure>
			<system-out>                    % (node.keyword, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2066" file="mako/lexer.py" line="189">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -187,7 +187,7 @@
             ):
                 raise exceptions.SyntaxException(
                     &quot;Keyword '%s' not a legal ternary for keyword '%s'&quot;
-                    % (node.keyword, self.control_line[-1].keyword),
+                    % (node.keyword, self.control_line[-2].keyword),
                     **self.exception_kwargs
                 )
 
</failure>
			<system-out>                    % (node.keyword, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2067" file="mako/lexer.py" line="193">
			<system-out>    _coding_re = re.compile(r&quot;#.*coding[:=]\s*([-\w.]+).*\r?\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2068" file="mako/lexer.py" line="193">
			<system-out>    _coding_re = re.compile(r&quot;#.*coding[:=]\s*([-\w.]+).*\r?\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2069" file="mako/lexer.py" line="202">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -200,7 +200,7 @@
 
         &quot;&quot;&quot;
         if isinstance(text, compat.text_type):
-            m = self._coding_re.match(text)
+            m = None
             encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;
             return encoding, text
 
</failure>
			<system-out>            m = self._coding_re.match(text)</system-out>
		</testcase>
		<testcase name="Mutant #2070" file="mako/lexer.py" line="203">
			<system-out>            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2071" file="mako/lexer.py" line="203">
			<system-out>            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2072" file="mako/lexer.py" line="203">
			<system-out>            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2073" file="mako/lexer.py" line="203">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -201,7 +201,7 @@
         &quot;&quot;&quot;
         if isinstance(text, compat.text_type):
             m = self._coding_re.match(text)
-            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;
+            encoding = m and m.group(1) and known_encoding or &quot;utf-8&quot;
             return encoding, text
 
         if text.startswith(codecs.BOM_UTF8):
</failure>
			<system-out>            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2074" file="mako/lexer.py" line="203">
			<system-out>            encoding = m and m.group(1) or known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2075" file="mako/lexer.py" line="207">
			<system-out>            text = text[len(codecs.BOM_UTF8) :]</system-out>
		</testcase>
		<testcase name="Mutant #2076" file="mako/lexer.py" line="208">
			<system-out>            parsed_encoding = &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2077" file="mako/lexer.py" line="208">
			<system-out>            parsed_encoding = &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2078" file="mako/lexer.py" line="209">
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2079" file="mako/lexer.py" line="209">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -207,7 +207,7 @@
         if text.startswith(codecs.BOM_UTF8):
             text = text[len(codecs.BOM_UTF8) :]
             parsed_encoding = &quot;utf-8&quot;
-            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))
+            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;XXignoreXX&quot;))
             if m is not None and m.group(1) != &quot;utf-8&quot;:
                 raise exceptions.CompileException(
                     &quot;Found utf-8 BOM in file, with conflicting &quot;
</failure>
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2080" file="mako/lexer.py" line="209">
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2081" file="mako/lexer.py" line="210">
			<system-out>            if m is not None and m.group(1) != &quot;utf-8&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2082" file="mako/lexer.py" line="210">
			<system-out>            if m is not None and m.group(1) != &quot;utf-8&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2083" file="mako/lexer.py" line="210">
			<system-out>            if m is not None and m.group(1) != &quot;utf-8&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2084" file="mako/lexer.py" line="210">
			<system-out>            if m is not None and m.group(1) != &quot;utf-8&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2085" file="mako/lexer.py" line="210">
			<system-out>            if m is not None and m.group(1) != &quot;utf-8&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2086" file="mako/lexer.py" line="212">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -210,7 +210,7 @@
             m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))
             if m is not None and m.group(1) != &quot;utf-8&quot;:
                 raise exceptions.CompileException(
-                    &quot;Found utf-8 BOM in file, with conflicting &quot;
+                    &quot;XXFound utf-8 BOM in file, with conflicting XX&quot;
                     &quot;magic encoding comment of '%s'&quot; % m.group(1),
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
</failure>
			<system-out>                    &quot;Found utf-8 BOM in file, with conflicting &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2087" file="mako/lexer.py" line="213">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -211,7 +211,7 @@
             if m is not None and m.group(1) != &quot;utf-8&quot;:
                 raise exceptions.CompileException(
                     &quot;Found utf-8 BOM in file, with conflicting &quot;
-                    &quot;magic encoding comment of '%s'&quot; % m.group(1),
+                    &quot;XXmagic encoding comment of '%s'XX&quot; % m.group(1),
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
                     0,
</failure>
			<system-out>                    &quot;magic encoding comment of '%s'&quot; % m.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #2088" file="mako/lexer.py" line="213">
			<system-out>                    &quot;magic encoding comment of '%s'&quot; % m.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #2089" file="mako/lexer.py" line="213">
			<system-out>                    &quot;magic encoding comment of '%s'&quot; % m.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #2090" file="mako/lexer.py" line="214">
			<system-out>                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #2091" file="mako/lexer.py" line="214">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -212,7 +212,7 @@
                 raise exceptions.CompileException(
                     &quot;Found utf-8 BOM in file, with conflicting &quot;
                     &quot;magic encoding comment of '%s'&quot; % m.group(1),
-                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
+                    text.decode(&quot;utf-8&quot;, &quot;XXignoreXX&quot;),
                     0,
                     0,
                     filename,
</failure>
			<system-out>                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #2092" file="mako/lexer.py" line="215">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -213,7 +213,7 @@
                     &quot;Found utf-8 BOM in file, with conflicting &quot;
                     &quot;magic encoding comment of '%s'&quot; % m.group(1),
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
-                    0,
+                    1,
                     0,
                     filename,
                 )
</failure>
			<system-out>                    0,</system-out>
		</testcase>
		<testcase name="Mutant #2093" file="mako/lexer.py" line="216">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -214,7 +214,7 @@
                     &quot;magic encoding comment of '%s'&quot; % m.group(1),
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
-                    0,
+                    1,
                     filename,
                 )
         else:
</failure>
			<system-out>                    0,</system-out>
		</testcase>
		<testcase name="Mutant #2094" file="mako/lexer.py" line="220">
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2095" file="mako/lexer.py" line="220">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -218,7 +218,7 @@
                     filename,
                 )
         else:
-            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))
+            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;XXignoreXX&quot;))
             if m:
                 parsed_encoding = m.group(1)
             else:
</failure>
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2096" file="mako/lexer.py" line="220">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -218,7 +218,7 @@
                     filename,
                 )
         else:
-            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))
+            m = None
             if m:
                 parsed_encoding = m.group(1)
             else:
</failure>
			<system-out>            m = self._coding_re.match(text.decode(&quot;utf-8&quot;, &quot;ignore&quot;))</system-out>
		</testcase>
		<testcase name="Mutant #2097" file="mako/lexer.py" line="222">
			<system-out>                parsed_encoding = m.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2098" file="mako/lexer.py" line="222">
			<system-out>                parsed_encoding = m.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2099" file="mako/lexer.py" line="224">
			<system-out>                parsed_encoding = known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2100" file="mako/lexer.py" line="224">
			<system-out>                parsed_encoding = known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2101" file="mako/lexer.py" line="224">
			<system-out>                parsed_encoding = known_encoding or &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2102" file="mako/lexer.py" line="228">
			<system-out>                text = text.decode(parsed_encoding)</system-out>
		</testcase>
		<testcase name="Mutant #2103" file="mako/lexer.py" line="231">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -229,7 +229,7 @@
                 text = text.decode(parsed_encoding)
             except UnicodeDecodeError:
                 raise exceptions.CompileException(
-                    &quot;Unicode decode operation of encoding '%s' failed&quot;
+                    &quot;XXUnicode decode operation of encoding '%s' failedXX&quot;
                     % parsed_encoding,
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
</failure>
			<system-out>                    &quot;Unicode decode operation of encoding '%s' failed&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2104" file="mako/lexer.py" line="232">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -230,7 +230,7 @@
             except UnicodeDecodeError:
                 raise exceptions.CompileException(
                     &quot;Unicode decode operation of encoding '%s' failed&quot;
-                    % parsed_encoding,
+                    / parsed_encoding,
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
                     0,
</failure>
			<system-out>                    % parsed_encoding,</system-out>
		</testcase>
		<testcase name="Mutant #2105" file="mako/lexer.py" line="233">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -231,7 +231,7 @@
                 raise exceptions.CompileException(
                     &quot;Unicode decode operation of encoding '%s' failed&quot;
                     % parsed_encoding,
-                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
+                    text.decode(&quot;XXutf-8XX&quot;, &quot;ignore&quot;),
                     0,
                     0,
                     filename,
</failure>
			<system-out>                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #2106" file="mako/lexer.py" line="233">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -231,7 +231,7 @@
                 raise exceptions.CompileException(
                     &quot;Unicode decode operation of encoding '%s' failed&quot;
                     % parsed_encoding,
-                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
+                    text.decode(&quot;utf-8&quot;, &quot;XXignoreXX&quot;),
                     0,
                     0,
                     filename,
</failure>
			<system-out>                    text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #2107" file="mako/lexer.py" line="234">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -232,7 +232,7 @@
                     &quot;Unicode decode operation of encoding '%s' failed&quot;
                     % parsed_encoding,
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
-                    0,
+                    1,
                     0,
                     filename,
                 )
</failure>
			<system-out>                    0,</system-out>
		</testcase>
		<testcase name="Mutant #2108" file="mako/lexer.py" line="235">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -233,7 +233,7 @@
                     % parsed_encoding,
                     text.decode(&quot;utf-8&quot;, &quot;ignore&quot;),
                     0,
-                    0,
+                    1,
                     filename,
                 )
 
</failure>
			<system-out>                    0,</system-out>
		</testcase>
		<testcase name="Mutant #2109" file="mako/lexer.py" line="243">
			<system-out>            self.text, not self.disable_unicode, self.encoding, self.filename</system-out>
		</testcase>
		<testcase name="Mutant #2110" file="mako/lexer.py" line="244">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2111" file="mako/lexer.py" line="247">
			<system-out>            self.text = preproc(self.text)</system-out>
		</testcase>
		<testcase name="Mutant #2112" file="mako/lexer.py" line="253">
			<system-out>        self.textlength = len(self.text)</system-out>
		</testcase>
		<testcase name="Mutant #2113" file="mako/lexer.py" line="255">
			<system-out>        while True:</system-out>
		</testcase>
		<testcase name="Mutant #2114" file="mako/lexer.py" line="256">
			<system-out>            if self.match_position &gt; self.textlength:</system-out>
		</testcase>
		<testcase name="Mutant #2115" file="mako/lexer.py" line="257">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -255,7 +255,7 @@
 
         while True:
             if self.match_position &gt; self.textlength:
-                break
+                continue
 
             if self.match_end():
                 break
</failure>
			<system-out>                break</system-out>
		</testcase>
		<testcase name="Mutant #2116" file="mako/lexer.py" line="260">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -258,7 +258,7 @@
                 break
 
             if self.match_end():
-                break
+                continue
             if self.match_expression():
                 continue
             if self.match_control_line():
</failure>
			<system-out>                break</system-out>
		</testcase>
		<testcase name="Mutant #2117" file="mako/lexer.py" line="262">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2118" file="mako/lexer.py" line="264">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2119" file="mako/lexer.py" line="266">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2120" file="mako/lexer.py" line="268">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2121" file="mako/lexer.py" line="270">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2122" file="mako/lexer.py" line="272">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2123" file="mako/lexer.py" line="274">
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #2124" file="mako/lexer.py" line="276">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -274,7 +274,7 @@
             if self.match_text():
                 continue
 
-            if self.match_position &gt; self.textlength:
+            if self.match_position &gt;= self.textlength:
                 break
             raise exceptions.CompileException(&quot;assertion failed&quot;)
 
</failure>
			<system-out>            if self.match_position &gt; self.textlength:</system-out>
		</testcase>
		<testcase name="Mutant #2125" file="mako/lexer.py" line="277">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -275,7 +275,7 @@
                 continue
 
             if self.match_position &gt; self.textlength:
-                break
+                continue
             raise exceptions.CompileException(&quot;assertion failed&quot;)
 
         if len(self.tag):
</failure>
			<system-out>                break</system-out>
		</testcase>
		<testcase name="Mutant #2126" file="mako/lexer.py" line="278">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -276,7 +276,7 @@
 
             if self.match_position &gt; self.textlength:
                 break
-            raise exceptions.CompileException(&quot;assertion failed&quot;)
+            raise exceptions.CompileException(&quot;XXassertion failedXX&quot;)
 
         if len(self.tag):
             raise exceptions.SyntaxException(
</failure>
			<system-out>            raise exceptions.CompileException(&quot;assertion failed&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2127" file="mako/lexer.py" line="282">
			<system-out>                &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2128" file="mako/lexer.py" line="282">
			<system-out>                &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2129" file="mako/lexer.py" line="282">
			<system-out>                &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2130" file="mako/lexer.py" line="282">
			<system-out>                &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2131" file="mako/lexer.py" line="287">
			<system-out>                &quot;Unterminated control keyword: '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2132" file="mako/lexer.py" line="288">
			<system-out>                % self.control_line[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2133" file="mako/lexer.py" line="288">
			<system-out>                % self.control_line[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2134" file="mako/lexer.py" line="288">
			<system-out>                % self.control_line[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2135" file="mako/lexer.py" line="290">
			<system-out>                self.control_line[-1].lineno,</system-out>
		</testcase>
		<testcase name="Mutant #2136" file="mako/lexer.py" line="290">
			<system-out>                self.control_line[-1].lineno,</system-out>
		</testcase>
		<testcase name="Mutant #2137" file="mako/lexer.py" line="291">
			<system-out>                self.control_line[-1].pos,</system-out>
		</testcase>
		<testcase name="Mutant #2138" file="mako/lexer.py" line="291">
			<system-out>                self.control_line[-1].pos,</system-out>
		</testcase>
		<testcase name="Mutant #2139" file="mako/lexer.py" line="311">
			<system-out>            re.I | re.S | re.X,</system-out>
		</testcase>
		<testcase name="Mutant #2140" file="mako/lexer.py" line="311">
			<system-out>            re.I | re.S | re.X,</system-out>
		</testcase>
		<testcase name="Mutant #2141" file="mako/lexer.py" line="312">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2142" file="mako/lexer.py" line="315">
			<system-out>            keyword, attr, isend = match.groups()</system-out>
		</testcase>
		<testcase name="Mutant #2143" file="mako/lexer.py" line="316">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -314,7 +314,7 @@
 
         if match:
             keyword, attr, isend = match.groups()
-            self.keyword = keyword
+            self.keyword = None
             attributes = {}
             if attr:
                 for att in re.findall(
</failure>
			<system-out>            self.keyword = keyword</system-out>
		</testcase>
		<testcase name="Mutant #2144" file="mako/lexer.py" line="317">
			<system-out>            attributes = {}</system-out>
		</testcase>
		<testcase name="Mutant #2145" file="mako/lexer.py" line="320">
			<system-out>                    r&quot;\s*(\w+)\s*=\s*(?:'([^']*)'|\&quot;([^\&quot;]*)\&quot;)&quot;, attr</system-out>
		</testcase>
		<testcase name="Mutant #2146" file="mako/lexer.py" line="322">
			<system-out>                    key, val1, val2 = att</system-out>
		</testcase>
		<testcase name="Mutant #2147" file="mako/lexer.py" line="323">
			<system-out>                    text = val1 or val2</system-out>
		</testcase>
		<testcase name="Mutant #2148" file="mako/lexer.py" line="323">
			<system-out>                    text = val1 or val2</system-out>
		</testcase>
		<testcase name="Mutant #2149" file="mako/lexer.py" line="324">
			<system-out>                    text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2150" file="mako/lexer.py" line="324">
			<system-out>                    text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2151" file="mako/lexer.py" line="324">
			<system-out>                    text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2152" file="mako/lexer.py" line="325">
			<system-out>                    attributes[key] = text</system-out>
		</testcase>
		<testcase name="Mutant #2153" file="mako/lexer.py" line="330">
			<system-out>                if keyword == &quot;text&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2154" file="mako/lexer.py" line="330">
			<system-out>                if keyword == &quot;text&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2155" file="mako/lexer.py" line="331">
			<system-out>                    match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2156" file="mako/lexer.py" line="331">
			<system-out>                    match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2157" file="mako/lexer.py" line="332">
			<system-out>                    if not match:</system-out>
		</testcase>
		<testcase name="Mutant #2158" file="mako/lexer.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -332,7 +332,7 @@
                     match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)
                     if not match:
                         raise exceptions.SyntaxException(
-                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,
+                            &quot;XXUnclosed tag: &lt;%%%s&gt;XX&quot; % self.tag[-1].keyword,
                             **self.exception_kwargs
                         )
                     self.append_node(parsetree.Text, match.group(1))
</failure>
			<system-out>                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2159" file="mako/lexer.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -332,7 +332,7 @@
                     match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)
                     if not match:
                         raise exceptions.SyntaxException(
-                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,
+                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; / self.tag[-1].keyword,
                             **self.exception_kwargs
                         )
                     self.append_node(parsetree.Text, match.group(1))
</failure>
			<system-out>                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2160" file="mako/lexer.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -332,7 +332,7 @@
                     match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)
                     if not match:
                         raise exceptions.SyntaxException(
-                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,
+                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[+1].keyword,
                             **self.exception_kwargs
                         )
                     self.append_node(parsetree.Text, match.group(1))
</failure>
			<system-out>                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2161" file="mako/lexer.py" line="334">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -332,7 +332,7 @@
                     match = self.match(r&quot;(.*?)(?=\&lt;/%text&gt;)&quot;, re.S)
                     if not match:
                         raise exceptions.SyntaxException(
-                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,
+                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-2].keyword,
                             **self.exception_kwargs
                         )
                     self.append_node(parsetree.Text, match.group(1))
</failure>
			<system-out>                            &quot;Unclosed tag: &lt;%%%s&gt;&quot; % self.tag[-1].keyword,</system-out>
		</testcase>
		<testcase name="Mutant #2162" file="mako/lexer.py" line="337">
			<system-out>                    self.append_node(parsetree.Text, match.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #2163" file="mako/lexer.py" line="339">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2164" file="mako/lexer.py" line="341">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -339,7 +339,7 @@
                     return self.match_tag_end()
             return True
         else:
-            return False
+            return True
 
     def match_tag_end(self):
         match = self.match(r&quot;\&lt;/%[\t ]*(.+?)[\t ]*&gt;&quot;)
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2165" file="mako/lexer.py" line="344">
			<system-out>        match = self.match(r&quot;\&lt;/%[\t ]*(.+?)[\t ]*&gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2166" file="mako/lexer.py" line="344">
			<system-out>        match = self.match(r&quot;\&lt;/%[\t ]*(.+?)[\t ]*&gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2167" file="mako/lexer.py" line="346">
			<system-out>            if not len(self.tag):</system-out>
		</testcase>
		<testcase name="Mutant #2168" file="mako/lexer.py" line="348">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -346,7 +346,7 @@
         if match:
             if not len(self.tag):
                 raise exceptions.SyntaxException(
-                    &quot;Closing tag without opening tag: &lt;/%%%s&gt;&quot;
+                    &quot;XXClosing tag without opening tag: &lt;/%%%s&gt;XX&quot;
                     % match.group(1),
                     **self.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Closing tag without opening tag: &lt;/%%%s&gt;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2169" file="mako/lexer.py" line="349">
			<system-out>                    % match.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #2170" file="mako/lexer.py" line="349">
			<system-out>                    % match.group(1),</system-out>
		</testcase>
		<testcase name="Mutant #2171" file="mako/lexer.py" line="352">
			<system-out>            elif self.tag[-1].keyword != match.group(1):</system-out>
		</testcase>
		<testcase name="Mutant #2172" file="mako/lexer.py" line="352">
			<system-out>            elif self.tag[-1].keyword != match.group(1):</system-out>
		</testcase>
		<testcase name="Mutant #2173" file="mako/lexer.py" line="352">
			<system-out>            elif self.tag[-1].keyword != match.group(1):</system-out>
		</testcase>
		<testcase name="Mutant #2174" file="mako/lexer.py" line="352">
			<system-out>            elif self.tag[-1].keyword != match.group(1):</system-out>
		</testcase>
		<testcase name="Mutant #2175" file="mako/lexer.py" line="354">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -352,7 +352,7 @@
                 )
             elif self.tag[-1].keyword != match.group(1):
                 raise exceptions.SyntaxException(
-                    &quot;Closing tag &lt;/%%%s&gt; does not match tag: &lt;%%%s&gt;&quot;
+                    &quot;XXClosing tag &lt;/%%%s&gt; does not match tag: &lt;%%%s&gt;XX&quot;
                     % (match.group(1), self.tag[-1].keyword),
                     **self.exception_kwargs
                 )
</failure>
			<system-out>                    &quot;Closing tag &lt;/%%%s&gt; does not match tag: &lt;%%%s&gt;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2176" file="mako/lexer.py" line="355">
			<system-out>                    % (match.group(1), self.tag[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2177" file="mako/lexer.py" line="355">
			<system-out>                    % (match.group(1), self.tag[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2178" file="mako/lexer.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -353,7 +353,7 @@
             elif self.tag[-1].keyword != match.group(1):
                 raise exceptions.SyntaxException(
                     &quot;Closing tag &lt;/%%%s&gt; does not match tag: &lt;%%%s&gt;&quot;
-                    % (match.group(1), self.tag[-1].keyword),
+                    % (match.group(1), self.tag[+1].keyword),
                     **self.exception_kwargs
                 )
             self.tag.pop()
</failure>
			<system-out>                    % (match.group(1), self.tag[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2179" file="mako/lexer.py" line="355">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -353,7 +353,7 @@
             elif self.tag[-1].keyword != match.group(1):
                 raise exceptions.SyntaxException(
                     &quot;Closing tag &lt;/%%%s&gt; does not match tag: &lt;%%%s&gt;&quot;
-                    % (match.group(1), self.tag[-1].keyword),
+                    % (match.group(1), self.tag[-2].keyword),
                     **self.exception_kwargs
                 )
             self.tag.pop()
</failure>
			<system-out>                    % (match.group(1), self.tag[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2180" file="mako/lexer.py" line="359">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2181" file="mako/lexer.py" line="361">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -359,7 +359,7 @@
             self.tag.pop()
             return True
         else:
-            return False
+            return True
 
     def match_end(self):
         match = self.match(r&quot;\Z&quot;, re.S)
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2182" file="mako/lexer.py" line="364">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -362,7 +362,7 @@
             return False
 
     def match_end(self):
-        match = self.match(r&quot;\Z&quot;, re.S)
+        match = self.match(r&quot;XX\ZXX&quot;, re.S)
         if match:
             string = match.group()
             if string:
</failure>
			<system-out>        match = self.match(r&quot;\Z&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2183" file="mako/lexer.py" line="364">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -362,7 +362,7 @@
             return False
 
     def match_end(self):
-        match = self.match(r&quot;\Z&quot;, re.S)
+        match = None
         if match:
             string = match.group()
             if string:
</failure>
			<system-out>        match = self.match(r&quot;\Z&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2184" file="mako/lexer.py" line="366">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -364,7 +364,7 @@
     def match_end(self):
         match = self.match(r&quot;\Z&quot;, re.S)
         if match:
-            string = match.group()
+            string = None
             if string:
                 return string
             else:
</failure>
			<system-out>            string = match.group()</system-out>
		</testcase>
		<testcase name="Mutant #2185" file="mako/lexer.py" line="370">
			<system-out>                return True</system-out>
		</testcase>
		<testcase name="Mutant #2186" file="mako/lexer.py" line="372">
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2187" file="mako/lexer.py" line="392">
			<system-out>            re.X | re.S,</system-out>
		</testcase>
		<testcase name="Mutant #2188" file="mako/lexer.py" line="393">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2189" file="mako/lexer.py" line="396">
			<system-out>            text = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2190" file="mako/lexer.py" line="396">
			<system-out>            text = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2191" file="mako/lexer.py" line="399">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2192" file="mako/lexer.py" line="401">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -399,7 +399,7 @@
                 self.append_node(parsetree.Text, text)
             return True
         else:
-            return False
+            return True
 
     def match_python_block(self):
         match = self.match(r&quot;&lt;%(!)?&quot;)
</failure>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2193" file="mako/lexer.py" line="404">
			<system-out>        match = self.match(r&quot;&lt;%(!)?&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2194" file="mako/lexer.py" line="404">
			<system-out>        match = self.match(r&quot;&lt;%(!)?&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2195" file="mako/lexer.py" line="406">
			<system-out>            line, pos = self.matched_lineno, self.matched_charpos</system-out>
		</testcase>
		<testcase name="Mutant #2196" file="mako/lexer.py" line="407">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -405,7 +405,7 @@
         match = self.match(r&quot;&lt;%(!)?&quot;)
         if match:
             line, pos = self.matched_lineno, self.matched_charpos
-            text, end = self.parse_until_text(False, r&quot;%&gt;&quot;)
+            text, end = self.parse_until_text(True, r&quot;%&gt;&quot;)
             # the trailing newline helps
             # compiler.parse() not complain about indentation
             text = adjust_whitespace(text) + &quot;\n&quot;
</failure>
			<system-out>            text, end = self.parse_until_text(False, r&quot;%&gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2197" file="mako/lexer.py" line="407">
			<system-out>            text, end = self.parse_until_text(False, r&quot;%&gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2198" file="mako/lexer.py" line="407">
			<system-out>            text, end = self.parse_until_text(False, r&quot;%&gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2199" file="mako/lexer.py" line="410">
			<system-out>            text = adjust_whitespace(text) + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2200" file="mako/lexer.py" line="410">
			<system-out>            text = adjust_whitespace(text) + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2201" file="mako/lexer.py" line="410">
			<system-out>            text = adjust_whitespace(text) + &quot;\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2202" file="mako/lexer.py" line="414">
			<system-out>                match.group(1) == &quot;!&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2203" file="mako/lexer.py" line="414">
			<system-out>                match.group(1) == &quot;!&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2204" file="mako/lexer.py" line="414">
			<system-out>                match.group(1) == &quot;!&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2205" file="mako/lexer.py" line="418">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2206" file="mako/lexer.py" line="420">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -418,7 +418,7 @@
             )
             return True
         else:
-            return False
+            return True
 
     def match_expression(self):
         match = self.match(r&quot;\${&quot;)
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2207" file="mako/lexer.py" line="423">
			<system-out>        match = self.match(r&quot;\${&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2208" file="mako/lexer.py" line="423">
			<system-out>        match = self.match(r&quot;\${&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2209" file="mako/lexer.py" line="425">
			<system-out>            line, pos = self.matched_lineno, self.matched_charpos</system-out>
		</testcase>
		<testcase name="Mutant #2210" file="mako/lexer.py" line="426">
			<system-out>            text, end = self.parse_until_text(True, r&quot;\|&quot;, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2211" file="mako/lexer.py" line="426">
			<system-out>            text, end = self.parse_until_text(True, r&quot;\|&quot;, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2212" file="mako/lexer.py" line="426">
			<system-out>            text, end = self.parse_until_text(True, r&quot;\|&quot;, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2213" file="mako/lexer.py" line="426">
			<system-out>            text, end = self.parse_until_text(True, r&quot;\|&quot;, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2214" file="mako/lexer.py" line="427">
			<system-out>            if end == &quot;|&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2215" file="mako/lexer.py" line="427">
			<system-out>            if end == &quot;|&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2216" file="mako/lexer.py" line="428">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -426,7 +426,7 @@
             line, pos = self.matched_lineno, self.matched_charpos
             text, end = self.parse_until_text(True, r&quot;\|&quot;, r&quot;}&quot;)
             if end == &quot;|&quot;:
-                escapes, end = self.parse_until_text(True, r&quot;}&quot;)
+                escapes, end = self.parse_until_text(False, r&quot;}&quot;)
             else:
                 escapes = &quot;&quot;
             text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)
</failure>
			<system-out>                escapes, end = self.parse_until_text(True, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2217" file="mako/lexer.py" line="428">
			<system-out>                escapes, end = self.parse_until_text(True, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2218" file="mako/lexer.py" line="428">
			<system-out>                escapes, end = self.parse_until_text(True, r&quot;}&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2219" file="mako/lexer.py" line="430">
			<system-out>                escapes = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2220" file="mako/lexer.py" line="430">
			<system-out>                escapes = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2221" file="mako/lexer.py" line="431">
			<system-out>            text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2222" file="mako/lexer.py" line="431">
			<system-out>            text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2223" file="mako/lexer.py" line="431">
			<system-out>            text = text.replace(&quot;\r\n&quot;, &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2224" file="mako/lexer.py" line="439">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -437,7 +437,7 @@
                 lineno=line,
                 pos=pos,
             )
-            return True
+            return False
         else:
             return False
 
</failure>
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2225" file="mako/lexer.py" line="441">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -439,7 +439,7 @@
             )
             return True
         else:
-            return False
+            return True
 
     def match_control_line(self):
         match = self.match(
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2226" file="mako/lexer.py" line="445">
			<system-out>            r&quot;(?&lt;=^)[\t ]*(%(?!%)|##)[\t ]*((?:(?:\\r?\n)|[^\r\n])*)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2227" file="mako/lexer.py" line="446">
			<system-out>            r&quot;(?:\r?\n|\Z)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2228" file="mako/lexer.py" line="448">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2229" file="mako/lexer.py" line="450">
			<system-out>            operator = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2230" file="mako/lexer.py" line="450">
			<system-out>            operator = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2231" file="mako/lexer.py" line="451">
			<system-out>            text = match.group(2)</system-out>
		</testcase>
		<testcase name="Mutant #2232" file="mako/lexer.py" line="451">
			<system-out>            text = match.group(2)</system-out>
		</testcase>
		<testcase name="Mutant #2233" file="mako/lexer.py" line="452">
			<system-out>            if operator == &quot;%&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2234" file="mako/lexer.py" line="452">
			<system-out>            if operator == &quot;%&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2235" file="mako/lexer.py" line="453">
			<system-out>                m2 = re.match(r&quot;(end)?(\w+)\s*(.*)&quot;, text)</system-out>
		</testcase>
		<testcase name="Mutant #2236" file="mako/lexer.py" line="453">
			<system-out>                m2 = re.match(r&quot;(end)?(\w+)\s*(.*)&quot;, text)</system-out>
		</testcase>
		<testcase name="Mutant #2237" file="mako/lexer.py" line="454">
			<system-out>                if not m2:</system-out>
		</testcase>
		<testcase name="Mutant #2238" file="mako/lexer.py" line="456">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -454,7 +454,7 @@
                 m2 = re.match(r&quot;(end)?(\w+)\s*(.*)&quot;, text)
                 if not m2:
                     raise exceptions.SyntaxException(
-                        &quot;Invalid control line: '%s'&quot; % text,
+                        &quot;XXInvalid control line: '%s'XX&quot; % text,
                         **self.exception_kwargs
                     )
                 isend, keyword = m2.group(1, 2)
</failure>
			<system-out>                        &quot;Invalid control line: '%s'&quot; % text,</system-out>
		</testcase>
		<testcase name="Mutant #2239" file="mako/lexer.py" line="456">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -454,7 +454,7 @@
                 m2 = re.match(r&quot;(end)?(\w+)\s*(.*)&quot;, text)
                 if not m2:
                     raise exceptions.SyntaxException(
-                        &quot;Invalid control line: '%s'&quot; % text,
+                        &quot;Invalid control line: '%s'&quot; / text,
                         **self.exception_kwargs
                     )
                 isend, keyword = m2.group(1, 2)
</failure>
			<system-out>                        &quot;Invalid control line: '%s'&quot; % text,</system-out>
		</testcase>
		<testcase name="Mutant #2240" file="mako/lexer.py" line="459">
			<system-out>                isend, keyword = m2.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #2241" file="mako/lexer.py" line="459">
			<system-out>                isend, keyword = m2.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #2242" file="mako/lexer.py" line="459">
			<system-out>                isend, keyword = m2.group(1, 2)</system-out>
		</testcase>
		<testcase name="Mutant #2243" file="mako/lexer.py" line="460">
			<system-out>                isend = isend is not None</system-out>
		</testcase>
		<testcase name="Mutant #2244" file="mako/lexer.py" line="460">
			<system-out>                isend = isend is not None</system-out>
		</testcase>
		<testcase name="Mutant #2245" file="mako/lexer.py" line="463">
			<system-out>                    if not len(self.control_line):</system-out>
		</testcase>
		<testcase name="Mutant #2246" file="mako/lexer.py" line="465">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -463,7 +463,7 @@
                 if isend:
                     if not len(self.control_line):
                         raise exceptions.SyntaxException(
-                            &quot;No starting keyword '%s' for '%s'&quot;
+                            &quot;XXNo starting keyword '%s' for '%s'XX&quot;
                             % (keyword, text),
                             **self.exception_kwargs
                         )
</failure>
			<system-out>                            &quot;No starting keyword '%s' for '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2247" file="mako/lexer.py" line="466">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -464,7 +464,7 @@
                     if not len(self.control_line):
                         raise exceptions.SyntaxException(
                             &quot;No starting keyword '%s' for '%s'&quot;
-                            % (keyword, text),
+                            / (keyword, text),
                             **self.exception_kwargs
                         )
                     elif self.control_line[-1].keyword != keyword:
</failure>
			<system-out>                            % (keyword, text),</system-out>
		</testcase>
		<testcase name="Mutant #2248" file="mako/lexer.py" line="469">
			<system-out>                    elif self.control_line[-1].keyword != keyword:</system-out>
		</testcase>
		<testcase name="Mutant #2249" file="mako/lexer.py" line="469">
			<system-out>                    elif self.control_line[-1].keyword != keyword:</system-out>
		</testcase>
		<testcase name="Mutant #2250" file="mako/lexer.py" line="469">
			<system-out>                    elif self.control_line[-1].keyword != keyword:</system-out>
		</testcase>
		<testcase name="Mutant #2251" file="mako/lexer.py" line="471">
			<system-out>                            &quot;Keyword '%s' doesn't match keyword '%s'&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2252" file="mako/lexer.py" line="472">
			<system-out>                            % (text, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2253" file="mako/lexer.py" line="472">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -470,7 +470,7 @@
                     elif self.control_line[-1].keyword != keyword:
                         raise exceptions.SyntaxException(
                             &quot;Keyword '%s' doesn't match keyword '%s'&quot;
-                            % (text, self.control_line[-1].keyword),
+                            % (text, self.control_line[+1].keyword),
                             **self.exception_kwargs
                         )
                 self.append_node(parsetree.ControlLine, keyword, isend, text)
</failure>
			<system-out>                            % (text, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2254" file="mako/lexer.py" line="472">
			<system-out>                            % (text, self.control_line[-1].keyword),</system-out>
		</testcase>
		<testcase name="Mutant #2255" file="mako/lexer.py" line="478">
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2256" file="mako/lexer.py" line="480">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -478,7 +478,7 @@
                 self.append_node(parsetree.Comment, text)
             return True
         else:
-            return False
+            return True
 
     def match_comment(self):
         &quot;&quot;&quot;matches the multiline version of a comment&quot;&quot;&quot;
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2257" file="mako/lexer.py" line="484">
			<system-out>        match = self.match(r&quot;&lt;%doc&gt;(.*?)&lt;/%doc&gt;&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2258" file="mako/lexer.py" line="484">
			<system-out>        match = self.match(r&quot;&lt;%doc&gt;(.*?)&lt;/%doc&gt;&quot;, re.S)</system-out>
		</testcase>
		<testcase name="Mutant #2259" file="mako/lexer.py" line="486">
			<system-out>            self.append_node(parsetree.Comment, match.group(1))</system-out>
		</testcase>
		<testcase name="Mutant #2260" file="mako/lexer.py" line="487">
			<failure type="failure" message="bad_survived">--- mako/lexer.py
+++ mako/lexer.py
@@ -485,7 +485,7 @@
         match = self.match(r&quot;&lt;%doc&gt;(.*?)&lt;/%doc&gt;&quot;, re.S)
         if match:
             self.append_node(parsetree.Comment, match.group(1))
-            return True
-        else:
-            return False
-
+            return False
+        else:
+            return False
+
</failure>
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2261" file="mako/lexer.py" line="489">
			<error type="timeout" message="bad_timeout">--- mako/lexer.py
+++ mako/lexer.py
@@ -487,5 +487,5 @@
             self.append_node(parsetree.Comment, match.group(1))
             return True
         else:
-            return False
-
+            return True
+
</error>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2262" file="mako/lookup.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -46,7 +46,7 @@
         &quot;&quot;&quot;
         try:
             self.get_template(uri)
-            return True
+            return False
         except exceptions.TemplateLookupException:
             return False
 
</failure>
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #2263" file="mako/lookup.py" line="50">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -48,7 +48,7 @@
             self.get_template(uri)
             return True
         except exceptions.TemplateLookupException:
-            return False
+            return True
 
     def get_template(self, uri, relativeto=None):
         &quot;&quot;&quot;Return a :class:`.Template` object corresponding to the given
</failure>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2264" file="mako/lookup.py" line="159">
			<system-out>        filesystem_checks=True,</system-out>
		</testcase>
		<testcase name="Mutant #2265" file="mako/lookup.py" line="160">
			<system-out>        collection_size=-1,</system-out>
		</testcase>
		<testcase name="Mutant #2266" file="mako/lookup.py" line="160">
			<error type="timeout" message="bad_timeout">--- mako/lookup.py
+++ mako/lookup.py
@@ -158,7 +158,7 @@
         directories=None,
         module_directory=None,
         filesystem_checks=True,
-        collection_size=-1,
+        collection_size=-2,
         format_exceptions=False,
         error_handler=None,
         disable_unicode=False,
</error>
			<system-out>        collection_size=-1,</system-out>
		</testcase>
		<testcase name="Mutant #2267" file="mako/lookup.py" line="161">
			<system-out>        format_exceptions=False,</system-out>
		</testcase>
		<testcase name="Mutant #2268" file="mako/lookup.py" line="163">
			<system-out>        disable_unicode=False,</system-out>
		</testcase>
		<testcase name="Mutant #2269" file="mako/lookup.py" line="164">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -162,7 +162,7 @@
         format_exceptions=False,
         error_handler=None,
         disable_unicode=False,
-        bytestring_passthrough=False,
+        bytestring_passthrough=True,
         output_encoding=None,
         encoding_errors=&quot;strict&quot;,
         cache_args=None,
</failure>
			<system-out>        bytestring_passthrough=False,</system-out>
		</testcase>
		<testcase name="Mutant #2270" file="mako/lookup.py" line="166">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -164,7 +164,7 @@
         disable_unicode=False,
         bytestring_passthrough=False,
         output_encoding=None,
-        encoding_errors=&quot;strict&quot;,
+        encoding_errors=&quot;XXstrictXX&quot;,
         cache_args=None,
         cache_impl=&quot;beaker&quot;,
         cache_enabled=True,
</failure>
			<system-out>        encoding_errors=&quot;strict&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2271" file="mako/lookup.py" line="168">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -166,7 +166,7 @@
         output_encoding=None,
         encoding_errors=&quot;strict&quot;,
         cache_args=None,
-        cache_impl=&quot;beaker&quot;,
+        cache_impl=&quot;XXbeakerXX&quot;,
         cache_enabled=True,
         cache_type=None,
         cache_dir=None,
</failure>
			<system-out>        cache_impl=&quot;beaker&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2272" file="mako/lookup.py" line="169">
			<system-out>        cache_enabled=True,</system-out>
		</testcase>
		<testcase name="Mutant #2273" file="mako/lookup.py" line="177">
			<system-out>        strict_undefined=False,</system-out>
		</testcase>
		<testcase name="Mutant #2274" file="mako/lookup.py" line="180">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -178,7 +178,7 @@
         strict_undefined=False,
         imports=None,
         future_imports=None,
-        enable_loop=True,
+        enable_loop=False,
         input_encoding=None,
         preprocessor=None,
         lexer_cls=None,
</failure>
			<system-out>        enable_loop=True,</system-out>
		</testcase>
		<testcase name="Mutant #2275" file="mako/lookup.py" line="189">
			<system-out>        ]</system-out>
		</testcase>
		<testcase name="Mutant #2276" file="mako/lookup.py" line="190">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -188,7 +188,7 @@
         self.directories = [
             posixpath.normpath(d) for d in util.to_list(directories, ())
         ]
-        self.module_directory = module_directory
+        self.module_directory = None
         self.modulename_callable = modulename_callable
         self.filesystem_checks = filesystem_checks
         self.collection_size = collection_size
</failure>
			<system-out>        self.module_directory = module_directory</system-out>
		</testcase>
		<testcase name="Mutant #2277" file="mako/lookup.py" line="191">
			<system-out>        self.modulename_callable = modulename_callable</system-out>
		</testcase>
		<testcase name="Mutant #2278" file="mako/lookup.py" line="192">
			<system-out>        self.filesystem_checks = filesystem_checks</system-out>
		</testcase>
		<testcase name="Mutant #2279" file="mako/lookup.py" line="193">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -191,7 +191,7 @@
         self.module_directory = module_directory
         self.modulename_callable = modulename_callable
         self.filesystem_checks = filesystem_checks
-        self.collection_size = collection_size
+        self.collection_size = None
 
         if cache_args is None:
             cache_args = {}
</failure>
			<system-out>        self.collection_size = collection_size</system-out>
		</testcase>
		<testcase name="Mutant #2280" file="mako/lookup.py" line="195">
			<system-out>        if cache_args is None:</system-out>
		</testcase>
		<testcase name="Mutant #2281" file="mako/lookup.py" line="196">
			<system-out>            cache_args = {}</system-out>
		</testcase>
		<testcase name="Mutant #2282" file="mako/lookup.py" line="199">
			<system-out>            cache_args.setdefault(&quot;dir&quot;, cache_dir)</system-out>
		</testcase>
		<testcase name="Mutant #2283" file="mako/lookup.py" line="201">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -199,7 +199,7 @@
         if cache_dir:
             cache_args.setdefault(&quot;dir&quot;, cache_dir)
         if cache_url:
-            cache_args.setdefault(&quot;url&quot;, cache_url)
+            cache_args.setdefault(&quot;XXurlXX&quot;, cache_url)
         if cache_type:
             cache_args.setdefault(&quot;type&quot;, cache_type)
 
</failure>
			<system-out>            cache_args.setdefault(&quot;url&quot;, cache_url)</system-out>
		</testcase>
		<testcase name="Mutant #2284" file="mako/lookup.py" line="203">
			<system-out>            cache_args.setdefault(&quot;type&quot;, cache_type)</system-out>
		</testcase>
		<testcase name="Mutant #2285" file="mako/lookup.py" line="206">
			<system-out>            &quot;format_exceptions&quot;: format_exceptions,</system-out>
		</testcase>
		<testcase name="Mutant #2286" file="mako/lookup.py" line="207">
			<system-out>            &quot;error_handler&quot;: error_handler,</system-out>
		</testcase>
		<testcase name="Mutant #2287" file="mako/lookup.py" line="208">
			<system-out>            &quot;include_error_handler&quot;: include_error_handler,</system-out>
		</testcase>
		<testcase name="Mutant #2288" file="mako/lookup.py" line="209">
			<system-out>            &quot;disable_unicode&quot;: disable_unicode,</system-out>
		</testcase>
		<testcase name="Mutant #2289" file="mako/lookup.py" line="210">
			<system-out>            &quot;bytestring_passthrough&quot;: bytestring_passthrough,</system-out>
		</testcase>
		<testcase name="Mutant #2290" file="mako/lookup.py" line="211">
			<system-out>            &quot;output_encoding&quot;: output_encoding,</system-out>
		</testcase>
		<testcase name="Mutant #2291" file="mako/lookup.py" line="212">
			<system-out>            &quot;cache_impl&quot;: cache_impl,</system-out>
		</testcase>
		<testcase name="Mutant #2292" file="mako/lookup.py" line="213">
			<system-out>            &quot;encoding_errors&quot;: encoding_errors,</system-out>
		</testcase>
		<testcase name="Mutant #2293" file="mako/lookup.py" line="214">
			<system-out>            &quot;input_encoding&quot;: input_encoding,</system-out>
		</testcase>
		<testcase name="Mutant #2294" file="mako/lookup.py" line="215">
			<system-out>            &quot;module_directory&quot;: module_directory,</system-out>
		</testcase>
		<testcase name="Mutant #2295" file="mako/lookup.py" line="216">
			<system-out>            &quot;module_writer&quot;: module_writer,</system-out>
		</testcase>
		<testcase name="Mutant #2296" file="mako/lookup.py" line="217">
			<system-out>            &quot;cache_args&quot;: cache_args,</system-out>
		</testcase>
		<testcase name="Mutant #2297" file="mako/lookup.py" line="218">
			<system-out>            &quot;cache_enabled&quot;: cache_enabled,</system-out>
		</testcase>
		<testcase name="Mutant #2298" file="mako/lookup.py" line="219">
			<system-out>            &quot;default_filters&quot;: default_filters,</system-out>
		</testcase>
		<testcase name="Mutant #2299" file="mako/lookup.py" line="220">
			<system-out>            &quot;buffer_filters&quot;: buffer_filters,</system-out>
		</testcase>
		<testcase name="Mutant #2300" file="mako/lookup.py" line="221">
			<system-out>            &quot;strict_undefined&quot;: strict_undefined,</system-out>
		</testcase>
		<testcase name="Mutant #2301" file="mako/lookup.py" line="222">
			<system-out>            &quot;imports&quot;: imports,</system-out>
		</testcase>
		<testcase name="Mutant #2302" file="mako/lookup.py" line="223">
			<system-out>            &quot;future_imports&quot;: future_imports,</system-out>
		</testcase>
		<testcase name="Mutant #2303" file="mako/lookup.py" line="224">
			<system-out>            &quot;enable_loop&quot;: enable_loop,</system-out>
		</testcase>
		<testcase name="Mutant #2304" file="mako/lookup.py" line="225">
			<system-out>            &quot;preprocessor&quot;: preprocessor,</system-out>
		</testcase>
		<testcase name="Mutant #2305" file="mako/lookup.py" line="226">
			<system-out>            &quot;lexer_cls&quot;: lexer_cls,</system-out>
		</testcase>
		<testcase name="Mutant #2306" file="mako/lookup.py" line="227">
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #2307" file="mako/lookup.py" line="229">
			<error type="timeout" message="bad_timeout">--- mako/lookup.py
+++ mako/lookup.py
@@ -227,7 +227,7 @@
             &quot;lexer_cls&quot;: lexer_cls,
         }
 
-        if collection_size == -1:
+        if collection_size != -1:
             self._collection = {}
             self._uri_cache = {}
         else:
</error>
			<system-out>        if collection_size == -1:</system-out>
		</testcase>
		<testcase name="Mutant #2308" file="mako/lookup.py" line="229">
			<error type="timeout" message="bad_timeout">--- mako/lookup.py
+++ mako/lookup.py
@@ -227,7 +227,7 @@
             &quot;lexer_cls&quot;: lexer_cls,
         }
 
-        if collection_size == -1:
+        if collection_size == +1:
             self._collection = {}
             self._uri_cache = {}
         else:
</error>
			<system-out>        if collection_size == -1:</system-out>
		</testcase>
		<testcase name="Mutant #2309" file="mako/lookup.py" line="229">
			<error type="timeout" message="bad_timeout">--- mako/lookup.py
+++ mako/lookup.py
@@ -227,7 +227,7 @@
             &quot;lexer_cls&quot;: lexer_cls,
         }
 
-        if collection_size == -1:
+        if collection_size == -2:
             self._collection = {}
             self._uri_cache = {}
         else:
</error>
			<system-out>        if collection_size == -1:</system-out>
		</testcase>
		<testcase name="Mutant #2310" file="mako/lookup.py" line="230">
			<system-out>            self._collection = {}</system-out>
		</testcase>
		<testcase name="Mutant #2311" file="mako/lookup.py" line="231">
			<system-out>            self._uri_cache = {}</system-out>
		</testcase>
		<testcase name="Mutant #2312" file="mako/lookup.py" line="233">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -231,7 +231,7 @@
             self._collection = {}
             self._uri_cache = {}
         else:
-            self._collection = util.LRUCache(collection_size)
+            self._collection = None
             self._uri_cache = util.LRUCache(collection_size)
         self._mutex = threading.Lock()
 
</failure>
			<system-out>            self._collection = util.LRUCache(collection_size)</system-out>
		</testcase>
		<testcase name="Mutant #2313" file="mako/lookup.py" line="234">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -232,7 +232,7 @@
             self._uri_cache = {}
         else:
             self._collection = util.LRUCache(collection_size)
-            self._uri_cache = util.LRUCache(collection_size)
+            self._uri_cache = None
         self._mutex = threading.Lock()
 
     def get_template(self, uri):
</failure>
			<system-out>            self._uri_cache = util.LRUCache(collection_size)</system-out>
		</testcase>
		<testcase name="Mutant #2314" file="mako/lookup.py" line="235">
			<system-out>        self._mutex = threading.Lock()</system-out>
		</testcase>
		<testcase name="Mutant #2315" file="mako/lookup.py" line="252">
			<system-out>            u = re.sub(r&quot;^\/+&quot;, &quot;&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2316" file="mako/lookup.py" line="252">
			<system-out>            u = re.sub(r&quot;^\/+&quot;, &quot;&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2317" file="mako/lookup.py" line="252">
			<system-out>            u = re.sub(r&quot;^\/+&quot;, &quot;&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2318" file="mako/lookup.py" line="256">
			<system-out>                dir_ = dir_.replace(os.path.sep, posixpath.sep)</system-out>
		</testcase>
		<testcase name="Mutant #2319" file="mako/lookup.py" line="257">
			<system-out>                srcfile = posixpath.normpath(posixpath.join(dir_, u))</system-out>
		</testcase>
		<testcase name="Mutant #2320" file="mako/lookup.py" line="262">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -260,7 +260,7 @@
                     return self._load(srcfile, uri)
             else:
                 raise exceptions.TopLevelLookupException(
-                    &quot;Cant locate template for uri %r&quot; % uri
+                    &quot;XXCant locate template for uri %rXX&quot; % uri
                 )
 
     def adjust_uri(self, uri, relativeto):
</failure>
			<system-out>                    &quot;Cant locate template for uri %r&quot; % uri</system-out>
		</testcase>
		<testcase name="Mutant #2321" file="mako/lookup.py" line="262">
			<system-out>                    &quot;Cant locate template for uri %r&quot; % uri</system-out>
		</testcase>
		<testcase name="Mutant #2322" file="mako/lookup.py" line="268">
			<system-out>        key = (uri, relativeto)</system-out>
		</testcase>
		<testcase name="Mutant #2323" file="mako/lookup.py" line="269">
			<system-out>        if key in self._uri_cache:</system-out>
		</testcase>
		<testcase name="Mutant #2324" file="mako/lookup.py" line="272">
			<system-out>        if uri[0] != &quot;/&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2325" file="mako/lookup.py" line="272">
			<system-out>        if uri[0] != &quot;/&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2326" file="mako/lookup.py" line="272">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -270,7 +270,7 @@
         if key in self._uri_cache:
             return self._uri_cache[key]
 
-        if uri[0] != &quot;/&quot;:
+        if uri[0] != &quot;XX/XX&quot;:
             if relativeto is not None:
                 v = self._uri_cache[key] = posixpath.join(
                     posixpath.dirname(relativeto), uri
</failure>
			<system-out>        if uri[0] != &quot;/&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #2327" file="mako/lookup.py" line="273">
			<system-out>            if relativeto is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2328" file="mako/lookup.py" line="276">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #2329" file="mako/lookup.py" line="278">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -276,7 +276,7 @@
                     posixpath.dirname(relativeto), uri
                 )
             else:
-                v = self._uri_cache[key] = &quot;/&quot; + uri
+                v = self._uri_cache[key] = &quot;XX/XX&quot; + uri
         else:
             v = self._uri_cache[key] = uri
         return v
</failure>
			<system-out>                v = self._uri_cache[key] = &quot;/&quot; + uri</system-out>
		</testcase>
		<testcase name="Mutant #2330" file="mako/lookup.py" line="278">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -276,7 +276,7 @@
                     posixpath.dirname(relativeto), uri
                 )
             else:
-                v = self._uri_cache[key] = &quot;/&quot; + uri
+                v = self._uri_cache[key] = &quot;/&quot; - uri
         else:
             v = self._uri_cache[key] = uri
         return v
</failure>
			<system-out>                v = self._uri_cache[key] = &quot;/&quot; + uri</system-out>
		</testcase>
		<testcase name="Mutant #2331" file="mako/lookup.py" line="278">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -276,7 +276,7 @@
                     posixpath.dirname(relativeto), uri
                 )
             else:
-                v = self._uri_cache[key] = &quot;/&quot; + uri
+                v = self._uri_cache[key] = None
         else:
             v = self._uri_cache[key] = uri
         return v
</failure>
			<system-out>                v = self._uri_cache[key] = &quot;/&quot; + uri</system-out>
		</testcase>
		<testcase name="Mutant #2332" file="mako/lookup.py" line="280">
			<system-out>            v = self._uri_cache[key] = uri</system-out>
		</testcase>
		<testcase name="Mutant #2333" file="mako/lookup.py" line="290">
			<system-out>            value = self._relativeize(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2334" file="mako/lookup.py" line="291">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -289,7 +289,7 @@
             return self._uri_cache[filename]
         except KeyError:
             value = self._relativeize(filename)
-            self._uri_cache[filename] = value
+            self._uri_cache[filename] = None
             return value
 
     def _relativeize(self, filename):
</failure>
			<system-out>            self._uri_cache[filename] = value</system-out>
		</testcase>
		<testcase name="Mutant #2335" file="mako/lookup.py" line="300">
			<system-out>        filename = posixpath.normpath(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2336" file="mako/lookup.py" line="302">
			<system-out>            if filename[0 : len(dir_)] == dir_:</system-out>
		</testcase>
		<testcase name="Mutant #2337" file="mako/lookup.py" line="302">
			<system-out>            if filename[0 : len(dir_)] == dir_:</system-out>
		</testcase>
		<testcase name="Mutant #2338" file="mako/lookup.py" line="317">
			<system-out>                if self.modulename_callable is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2339" file="mako/lookup.py" line="318">
			<system-out>                    module_filename = self.modulename_callable(filename, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2340" file="mako/lookup.py" line="320">
			<system-out>                    module_filename = None</system-out>
		</testcase>
		<testcase name="Mutant #2341" file="mako/lookup.py" line="327">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #2342" file="mako/lookup.py" line="339">
			<system-out>        if template.filename is None:</system-out>
		</testcase>
		<testcase name="Mutant #2343" file="mako/lookup.py" line="343">
			<system-out>            template_stat = os.stat(template.filename)</system-out>
		</testcase>
		<testcase name="Mutant #2344" file="mako/lookup.py" line="344">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -342,7 +342,7 @@
 
         try:
             template_stat = os.stat(template.filename)
-            if template.module._modified_time &lt; template_stat[stat.ST_MTIME]:
+            if template.module._modified_time &lt;= template_stat[stat.ST_MTIME]:
                 self._collection.pop(uri, None)
                 return self._load(template.filename, uri)
             else:
</failure>
			<system-out>            if template.module._modified_time &lt; template_stat[stat.ST_MTIME]:</system-out>
		</testcase>
		<testcase name="Mutant #2345" file="mako/lookup.py" line="352">
			<failure type="failure" message="bad_survived">--- mako/lookup.py
+++ mako/lookup.py
@@ -350,7 +350,7 @@
         except OSError:
             self._collection.pop(uri, None)
             raise exceptions.TemplateLookupException(
-                &quot;Cant locate template for uri %r&quot; % uri
+                &quot;XXCant locate template for uri %rXX&quot; % uri
             )
 
     def put_string(self, uri, text):
</failure>
			<system-out>                &quot;Cant locate template for uri %r&quot; % uri</system-out>
		</testcase>
		<testcase name="Mutant #2346" file="mako/lookup.py" line="352">
			<system-out>                &quot;Cant locate template for uri %r&quot; % uri</system-out>
		</testcase>
		<testcase name="Mutant #2347" file="mako/lookup.py" line="363">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2348" file="mako/lookup.py" line="371">
			<system-out>        self._collection[uri] = template</system-out>
		</testcase>
		<testcase name="Mutant #2349" file="mako/exceptions.py" line="24">
			<system-out>    if filename is None:</system-out>
		</testcase>
		<testcase name="Mutant #2350" file="mako/exceptions.py" line="25">
			<system-out>        return &quot; at line: %d char: %d&quot; % (lineno, pos)</system-out>
		</testcase>
		<testcase name="Mutant #2351" file="mako/exceptions.py" line="25">
			<system-out>        return &quot; at line: %d char: %d&quot; % (lineno, pos)</system-out>
		</testcase>
		<testcase name="Mutant #2352" file="mako/exceptions.py" line="27">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -25,7 +25,7 @@
     if filename is None:
         return &quot; at line: %d char: %d&quot; % (lineno, pos)
     else:
-        return &quot; in file '%s' at line: %d char: %d&quot; % (filename, lineno, pos)
+        return &quot;XX in file '%s' at line: %d char: %dXX&quot; % (filename, lineno, pos)
 
 
 class CompileException(MakoException):
</failure>
			<system-out>        return &quot; in file '%s' at line: %d char: %d&quot; % (filename, lineno, pos)</system-out>
		</testcase>
		<testcase name="Mutant #2353" file="mako/exceptions.py" line="27">
			<system-out>        return &quot; in file '%s' at line: %d char: %d&quot; % (filename, lineno, pos)</system-out>
		</testcase>
		<testcase name="Mutant #2354" file="mako/exceptions.py" line="33">
			<system-out>            self, message + _format_filepos(lineno, pos, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2355" file="mako/exceptions.py" line="35">
			<system-out>        self.lineno = lineno</system-out>
		</testcase>
		<testcase name="Mutant #2356" file="mako/exceptions.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -34,7 +34,7 @@
             self, message + _format_filepos(lineno, pos, filename)
         )
         self.lineno = lineno
-        self.pos = pos
+        self.pos = None
         self.filename = filename
         self.source = source
 
</failure>
			<system-out>        self.pos = pos</system-out>
		</testcase>
		<testcase name="Mutant #2357" file="mako/exceptions.py" line="37">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -35,7 +35,7 @@
         )
         self.lineno = lineno
         self.pos = pos
-        self.filename = filename
+        self.filename = None
         self.source = source
 
 
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #2358" file="mako/exceptions.py" line="38">
			<system-out>        self.source = source</system-out>
		</testcase>
		<testcase name="Mutant #2359" file="mako/exceptions.py" line="44">
			<system-out>            self, message + _format_filepos(lineno, pos, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2360" file="mako/exceptions.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -44,7 +44,7 @@
         MakoException.__init__(
             self, message + _format_filepos(lineno, pos, filename)
         )
-        self.lineno = lineno
+        self.lineno = None
         self.pos = pos
         self.filename = filename
         self.source = source
</failure>
			<system-out>        self.lineno = lineno</system-out>
		</testcase>
		<testcase name="Mutant #2361" file="mako/exceptions.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -45,7 +45,7 @@
             self, message + _format_filepos(lineno, pos, filename)
         )
         self.lineno = lineno
-        self.pos = pos
+        self.pos = None
         self.filename = filename
         self.source = source
 
</failure>
			<system-out>        self.pos = pos</system-out>
		</testcase>
		<testcase name="Mutant #2362" file="mako/exceptions.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -46,7 +46,7 @@
         )
         self.lineno = lineno
         self.pos = pos
-        self.filename = filename
+        self.filename = None
         self.source = source
 
 
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #2363" file="mako/exceptions.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -47,7 +47,7 @@
         self.lineno = lineno
         self.pos = pos
         self.filename = filename
-        self.source = source
+        self.source = None
 
 
 class UnsupportedError(MakoException):
</failure>
			<system-out>        self.source = source</system-out>
		</testcase>
		<testcase name="Mutant #2364" file="mako/exceptions.py" line="80">
			<system-out>        self.source, self.lineno = &quot;&quot;, 0</system-out>
		</testcase>
		<testcase name="Mutant #2365" file="mako/exceptions.py" line="80">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -78,7 +78,7 @@
     &quot;&quot;&quot;
 
     def __init__(self, error=None, traceback=None):
-        self.source, self.lineno = &quot;&quot;, 0
+        self.source, self.lineno = &quot;&quot;, 1
 
         if error is None or traceback is None:
             t, value, tback = sys.exc_info()
</failure>
			<system-out>        self.source, self.lineno = &quot;&quot;, 0</system-out>
		</testcase>
		<testcase name="Mutant #2366" file="mako/exceptions.py" line="80">
			<system-out>        self.source, self.lineno = &quot;&quot;, 0</system-out>
		</testcase>
		<testcase name="Mutant #2367" file="mako/exceptions.py" line="82">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -80,7 +80,7 @@
     def __init__(self, error=None, traceback=None):
         self.source, self.lineno = &quot;&quot;, 0
 
-        if error is None or traceback is None:
+        if error is not None or traceback is None:
             t, value, tback = sys.exc_info()
 
         if error is None:
</failure>
			<system-out>        if error is None or traceback is None:</system-out>
		</testcase>
		<testcase name="Mutant #2368" file="mako/exceptions.py" line="82">
			<system-out>        if error is None or traceback is None:</system-out>
		</testcase>
		<testcase name="Mutant #2369" file="mako/exceptions.py" line="82">
			<system-out>        if error is None or traceback is None:</system-out>
		</testcase>
		<testcase name="Mutant #2370" file="mako/exceptions.py" line="83">
			<system-out>            t, value, tback = sys.exc_info()</system-out>
		</testcase>
		<testcase name="Mutant #2371" file="mako/exceptions.py" line="85">
			<system-out>        if error is None:</system-out>
		</testcase>
		<testcase name="Mutant #2372" file="mako/exceptions.py" line="86">
			<system-out>            error = value or t</system-out>
		</testcase>
		<testcase name="Mutant #2373" file="mako/exceptions.py" line="86">
			<system-out>            error = value or t</system-out>
		</testcase>
		<testcase name="Mutant #2374" file="mako/exceptions.py" line="88">
			<system-out>        if traceback is None:</system-out>
		</testcase>
		<testcase name="Mutant #2375" file="mako/exceptions.py" line="89">
			<system-out>            traceback = tback</system-out>
		</testcase>
		<testcase name="Mutant #2376" file="mako/exceptions.py" line="91">
			<system-out>        self.error = error</system-out>
		</testcase>
		<testcase name="Mutant #2377" file="mako/exceptions.py" line="92">
			<system-out>        self.records = self._init(traceback)</system-out>
		</testcase>
		<testcase name="Mutant #2378" file="mako/exceptions.py" line="95">
			<system-out>            self.source = self.error.source</system-out>
		</testcase>
		<testcase name="Mutant #2379" file="mako/exceptions.py" line="96">
			<system-out>            self.lineno = self.error.lineno</system-out>
		</testcase>
		<testcase name="Mutant #2380" file="mako/exceptions.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -95,7 +95,7 @@
         if isinstance(self.error, (CompileException, SyntaxException)):
             self.source = self.error.source
             self.lineno = self.error.lineno
-            self._has_source = True
+            self._has_source = False
 
         self._init_message()
 
</failure>
			<system-out>            self._has_source = True</system-out>
		</testcase>
		<testcase name="Mutant #2381" file="mako/exceptions.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -95,7 +95,7 @@
         if isinstance(self.error, (CompileException, SyntaxException)):
             self.source = self.error.source
             self.lineno = self.error.lineno
-            self._has_source = True
+            self._has_source = None
 
         self._init_message()
 
</failure>
			<system-out>            self._has_source = True</system-out>
		</testcase>
		<testcase name="Mutant #2382" file="mako/exceptions.py" line="101">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2383" file="mako/exceptions.py" line="108">
			<system-out>            self.message = compat.text_type(self.error)</system-out>
		</testcase>
		<testcase name="Mutant #2384" file="mako/exceptions.py" line="111">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -109,7 +109,7 @@
             self.message = compat.text_type(self.error)
         except UnicodeError:
             try:
-                self.message = str(self.error)
+                self.message = None
             except UnicodeEncodeError:
                 # Fallback to args as neither unicode nor
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
</failure>
			<system-out>                self.message = str(self.error)</system-out>
		</testcase>
		<testcase name="Mutant #2385" file="mako/exceptions.py" line="115">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -113,7 +113,7 @@
             except UnicodeEncodeError:
                 # Fallback to args as neither unicode nor
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
-                self.message = self.error.args[0]
+                self.message = self.error.args[1]
         if not isinstance(self.message, compat.text_type):
             self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)
 
</failure>
			<system-out>                self.message = self.error.args[0]</system-out>
		</testcase>
		<testcase name="Mutant #2386" file="mako/exceptions.py" line="115">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -113,7 +113,7 @@
             except UnicodeEncodeError:
                 # Fallback to args as neither unicode nor
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
-                self.message = self.error.args[0]
+                self.message = None
         if not isinstance(self.message, compat.text_type):
             self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)
 
</failure>
			<system-out>                self.message = self.error.args[0]</system-out>
		</testcase>
		<testcase name="Mutant #2387" file="mako/exceptions.py" line="116">
			<system-out>        if not isinstance(self.message, compat.text_type):</system-out>
		</testcase>
		<testcase name="Mutant #2388" file="mako/exceptions.py" line="117">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -115,7 +115,7 @@
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
                 self.message = self.error.args[0]
         if not isinstance(self.message, compat.text_type):
-            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)
+            self.message = compat.text_type(self.message, &quot;XXasciiXX&quot;, &quot;replace&quot;)
 
     def _get_reformatted_records(self, records):
         for rec in records:
</failure>
			<system-out>            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2389" file="mako/exceptions.py" line="117">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -115,7 +115,7 @@
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
                 self.message = self.error.args[0]
         if not isinstance(self.message, compat.text_type):
-            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)
+            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;XXreplaceXX&quot;)
 
     def _get_reformatted_records(self, records):
         for rec in records:
</failure>
			<system-out>            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2390" file="mako/exceptions.py" line="117">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -115,7 +115,7 @@
                 # str(Exception(u'\xe6')) work in Python &lt; 2.6
                 self.message = self.error.args[0]
         if not isinstance(self.message, compat.text_type):
-            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)
+            self.message = None
 
     def _get_reformatted_records(self, records):
         for rec in records:
</failure>
			<system-out>            self.message = compat.text_type(self.message, &quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2391" file="mako/exceptions.py" line="121">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -119,7 +119,7 @@
 
     def _get_reformatted_records(self, records):
         for rec in records:
-            if rec[6] is not None:
+            if rec[7] is not None:
                 yield (rec[4], rec[5], rec[2], rec[6])
             else:
                 yield tuple(rec[0:4])
</failure>
			<system-out>            if rec[6] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2392" file="mako/exceptions.py" line="121">
			<system-out>            if rec[6] is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2393" file="mako/exceptions.py" line="122">
			<system-out>                yield (rec[4], rec[5], rec[2], rec[6])</system-out>
		</testcase>
		<testcase name="Mutant #2394" file="mako/exceptions.py" line="122">
			<system-out>                yield (rec[4], rec[5], rec[2], rec[6])</system-out>
		</testcase>
		<testcase name="Mutant #2395" file="mako/exceptions.py" line="122">
			<system-out>                yield (rec[4], rec[5], rec[2], rec[6])</system-out>
		</testcase>
		<testcase name="Mutant #2396" file="mako/exceptions.py" line="122">
			<system-out>                yield (rec[4], rec[5], rec[2], rec[6])</system-out>
		</testcase>
		<testcase name="Mutant #2397" file="mako/exceptions.py" line="124">
			<system-out>                yield tuple(rec[0:4])</system-out>
		</testcase>
		<testcase name="Mutant #2398" file="mako/exceptions.py" line="124">
			<system-out>                yield tuple(rec[0:4])</system-out>
		</testcase>
		<testcase name="Mutant #2399" file="mako/exceptions.py" line="126">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2400" file="mako/exceptions.py" line="135">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2401" file="mako/exceptions.py" line="139">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2402" file="mako/exceptions.py" line="154">
			<system-out>        mods = {}</system-out>
		</testcase>
		<testcase name="Mutant #2403" file="mako/exceptions.py" line="155">
			<system-out>        rawrecords = traceback.extract_tb(trcback)</system-out>
		</testcase>
		<testcase name="Mutant #2404" file="mako/exceptions.py" line="156">
			<system-out>        new_trcback = []</system-out>
		</testcase>
		<testcase name="Mutant #2405" file="mako/exceptions.py" line="158">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -156,7 +156,7 @@
         rawrecords = traceback.extract_tb(trcback)
         new_trcback = []
         for filename, lineno, function, line in rawrecords:
-            if not line:
+            if  line:
                 line = &quot;&quot;
             try:
                 (line_map, template_lines, template_filename) = mods[filename]
</failure>
			<system-out>            if not line:</system-out>
		</testcase>
		<testcase name="Mutant #2406" file="mako/exceptions.py" line="159">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -157,7 +157,7 @@
         new_trcback = []
         for filename, lineno, function, line in rawrecords:
             if not line:
-                line = &quot;&quot;
+                line = &quot;XXXX&quot;
             try:
                 (line_map, template_lines, template_filename) = mods[filename]
             except KeyError:
</failure>
			<system-out>                line = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2407" file="mako/exceptions.py" line="159">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -157,7 +157,7 @@
         new_trcback = []
         for filename, lineno, function, line in rawrecords:
             if not line:
-                line = &quot;&quot;
+                line = None
             try:
                 (line_map, template_lines, template_filename) = mods[filename]
             except KeyError:
</failure>
			<system-out>                line = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2408" file="mako/exceptions.py" line="161">
			<system-out>                (line_map, template_lines, template_filename) = mods[filename]</system-out>
		</testcase>
		<testcase name="Mutant #2409" file="mako/exceptions.py" line="164">
			<system-out>                    info = mako.template._get_module_info(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2410" file="mako/exceptions.py" line="165">
			<system-out>                    module_source = info.code</system-out>
		</testcase>
		<testcase name="Mutant #2411" file="mako/exceptions.py" line="166">
			<system-out>                    template_source = info.source</system-out>
		</testcase>
		<testcase name="Mutant #2412" file="mako/exceptions.py" line="168">
			<system-out>                        info.template_filename or info.template_uri or filename</system-out>
		</testcase>
		<testcase name="Mutant #2413" file="mako/exceptions.py" line="169">
			<system-out>                    )</system-out>
		</testcase>
		<testcase name="Mutant #2414" file="mako/exceptions.py" line="172">
			<system-out>                    if not compat.py3k:</system-out>
		</testcase>
		<testcase name="Mutant #2415" file="mako/exceptions.py" line="174">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -172,7 +172,7 @@
                     # A normal .py file (not a Template)
                     if not compat.py3k:
                         try:
-                            fp = open(filename, &quot;rb&quot;)
+                            fp = open(filename, &quot;XXrbXX&quot;)
                             encoding = util.parse_encoding(fp)
                             fp.close()
                         except IOError:
</failure>
			<system-out>                            fp = open(filename, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2416" file="mako/exceptions.py" line="174">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -172,7 +172,7 @@
                     # A normal .py file (not a Template)
                     if not compat.py3k:
                         try:
-                            fp = open(filename, &quot;rb&quot;)
+                            fp = None
                             encoding = util.parse_encoding(fp)
                             fp.close()
                         except IOError:
</failure>
			<system-out>                            fp = open(filename, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2417" file="mako/exceptions.py" line="175">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -173,7 +173,7 @@
                     if not compat.py3k:
                         try:
                             fp = open(filename, &quot;rb&quot;)
-                            encoding = util.parse_encoding(fp)
+                            encoding = None
                             fp.close()
                         except IOError:
                             encoding = None
</failure>
			<system-out>                            encoding = util.parse_encoding(fp)</system-out>
		</testcase>
		<testcase name="Mutant #2418" file="mako/exceptions.py" line="178">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -176,7 +176,7 @@
                             encoding = util.parse_encoding(fp)
                             fp.close()
                         except IOError:
-                            encoding = None
+                            encoding = &quot;&quot;
                         if encoding:
                             line = line.decode(encoding)
                         else:
</failure>
			<system-out>                            encoding = None</system-out>
		</testcase>
		<testcase name="Mutant #2419" file="mako/exceptions.py" line="180">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -178,7 +178,7 @@
                         except IOError:
                             encoding = None
                         if encoding:
-                            line = line.decode(encoding)
+                            line = None
                         else:
                             line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)
                     new_trcback.append(
</failure>
			<system-out>                            line = line.decode(encoding)</system-out>
		</testcase>
		<testcase name="Mutant #2420" file="mako/exceptions.py" line="182">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -180,7 +180,7 @@
                         if encoding:
                             line = line.decode(encoding)
                         else:
-                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)
+                            line = line.decode(&quot;XXasciiXX&quot;, &quot;replace&quot;)
                     new_trcback.append(
                         (
                             filename,
</failure>
			<system-out>                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2421" file="mako/exceptions.py" line="182">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -180,7 +180,7 @@
                         if encoding:
                             line = line.decode(encoding)
                         else:
-                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)
+                            line = line.decode(&quot;ascii&quot;, &quot;XXreplaceXX&quot;)
                     new_trcback.append(
                         (
                             filename,
</failure>
			<system-out>                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2422" file="mako/exceptions.py" line="182">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -180,7 +180,7 @@
                         if encoding:
                             line = line.decode(encoding)
                         else:
-                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)
+                            line = None
                     new_trcback.append(
                         (
                             filename,
</failure>
			<system-out>                            line = line.decode(&quot;ascii&quot;, &quot;replace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2423" file="mako/exceptions.py" line="195">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #2424" file="mako/exceptions.py" line="197">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -195,7 +195,7 @@
                     )
                     continue
 
-                template_ln = 1
+                template_ln = 2
 
                 mtm = mako.template.ModuleInfo
                 source_map = mtm.get_module_source_metadata(
</failure>
			<system-out>                template_ln = 1</system-out>
		</testcase>
		<testcase name="Mutant #2425" file="mako/exceptions.py" line="197">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -195,7 +195,7 @@
                     )
                     continue
 
-                template_ln = 1
+                template_ln = None
 
                 mtm = mako.template.ModuleInfo
                 source_map = mtm.get_module_source_metadata(
</failure>
			<system-out>                template_ln = 1</system-out>
		</testcase>
		<testcase name="Mutant #2426" file="mako/exceptions.py" line="199">
			<system-out>                mtm = mako.template.ModuleInfo</system-out>
		</testcase>
		<testcase name="Mutant #2427" file="mako/exceptions.py" line="201">
			<system-out>                    module_source, full_line_map=True</system-out>
		</testcase>
		<testcase name="Mutant #2428" file="mako/exceptions.py" line="202">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #2429" file="mako/exceptions.py" line="203">
			<system-out>                line_map = source_map[&quot;full_line_map&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2430" file="mako/exceptions.py" line="203">
			<system-out>                line_map = source_map[&quot;full_line_map&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2431" file="mako/exceptions.py" line="206">
			<system-out>                    line_ for line_ in template_source.split(&quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2432" file="mako/exceptions.py" line="207">
			<system-out>                ]</system-out>
		</testcase>
		<testcase name="Mutant #2433" file="mako/exceptions.py" line="208">
			<system-out>                mods[filename] = (line_map, template_lines, template_filename)</system-out>
		</testcase>
		<testcase name="Mutant #2434" file="mako/exceptions.py" line="210">
			<system-out>            template_ln = line_map[lineno - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2435" file="mako/exceptions.py" line="210">
			<system-out>            template_ln = line_map[lineno - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2436" file="mako/exceptions.py" line="210">
			<system-out>            template_ln = line_map[lineno - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2437" file="mako/exceptions.py" line="212">
			<system-out>            if template_ln &lt;= len(template_lines):</system-out>
		</testcase>
		<testcase name="Mutant #2438" file="mako/exceptions.py" line="213">
			<system-out>                template_line = template_lines[template_ln - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2439" file="mako/exceptions.py" line="213">
			<system-out>                template_line = template_lines[template_ln - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2440" file="mako/exceptions.py" line="213">
			<system-out>                template_line = template_lines[template_ln - 1]</system-out>
		</testcase>
		<testcase name="Mutant #2441" file="mako/exceptions.py" line="215">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -213,7 +213,7 @@
             if template_ln &lt;= len(template_lines):
                 template_line = template_lines[template_ln - 1]
             else:
-                template_line = None
+                template_line = &quot;&quot;
             new_trcback.append(
                 (
                     filename,
</failure>
			<system-out>                template_line = None</system-out>
		</testcase>
		<testcase name="Mutant #2442" file="mako/exceptions.py" line="228">
			<system-out>        if not self.source:</system-out>
		</testcase>
		<testcase name="Mutant #2443" file="mako/exceptions.py" line="229">
			<system-out>            for l in range(len(new_trcback) - 1, 0, -1):</system-out>
		</testcase>
		<testcase name="Mutant #2444" file="mako/exceptions.py" line="229">
			<system-out>            for l in range(len(new_trcback) - 1, 0, -1):</system-out>
		</testcase>
		<testcase name="Mutant #2445" file="mako/exceptions.py" line="229">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -227,7 +227,7 @@
                 )
             )
         if not self.source:
-            for l in range(len(new_trcback) - 1, 0, -1):
+            for l in range(len(new_trcback) - 1, 1, -1):
                 if new_trcback[l][5]:
                     self.source = new_trcback[l][7]
                     self.lineno = new_trcback[l][5]
</failure>
			<system-out>            for l in range(len(new_trcback) - 1, 0, -1):</system-out>
		</testcase>
		<testcase name="Mutant #2446" file="mako/exceptions.py" line="229">
			<system-out>            for l in range(len(new_trcback) - 1, 0, -1):</system-out>
		</testcase>
		<testcase name="Mutant #2447" file="mako/exceptions.py" line="229">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -227,7 +227,7 @@
                 )
             )
         if not self.source:
-            for l in range(len(new_trcback) - 1, 0, -1):
+            for l in range(len(new_trcback) - 1, 0, -2):
                 if new_trcback[l][5]:
                     self.source = new_trcback[l][7]
                     self.lineno = new_trcback[l][5]
</failure>
			<system-out>            for l in range(len(new_trcback) - 1, 0, -1):</system-out>
		</testcase>
		<testcase name="Mutant #2448" file="mako/exceptions.py" line="230">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -228,7 +228,7 @@
             )
         if not self.source:
             for l in range(len(new_trcback) - 1, 0, -1):
-                if new_trcback[l][5]:
+                if new_trcback[l][6]:
                     self.source = new_trcback[l][7]
                     self.lineno = new_trcback[l][5]
                     break
</failure>
			<system-out>                if new_trcback[l][5]:</system-out>
		</testcase>
		<testcase name="Mutant #2449" file="mako/exceptions.py" line="231">
			<system-out>                    self.source = new_trcback[l][7]</system-out>
		</testcase>
		<testcase name="Mutant #2450" file="mako/exceptions.py" line="231">
			<system-out>                    self.source = new_trcback[l][7]</system-out>
		</testcase>
		<testcase name="Mutant #2451" file="mako/exceptions.py" line="232">
			<system-out>                    self.lineno = new_trcback[l][5]</system-out>
		</testcase>
		<testcase name="Mutant #2452" file="mako/exceptions.py" line="232">
			<system-out>                    self.lineno = new_trcback[l][5]</system-out>
		</testcase>
		<testcase name="Mutant #2453" file="mako/exceptions.py" line="233">
			<system-out>                    break</system-out>
		</testcase>
		<testcase name="Mutant #2454" file="mako/exceptions.py" line="238">
			<system-out>                        fp = open(new_trcback[-1][0], &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2455" file="mako/exceptions.py" line="238">
			<system-out>                        fp = open(new_trcback[-1][0], &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2456" file="mako/exceptions.py" line="238">
			<system-out>                        fp = open(new_trcback[-1][0], &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2457" file="mako/exceptions.py" line="238">
			<system-out>                        fp = open(new_trcback[-1][0], &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2458" file="mako/exceptions.py" line="238">
			<system-out>                        fp = open(new_trcback[-1][0], &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2459" file="mako/exceptions.py" line="239">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -237,7 +237,7 @@
                     try:
                         # A normal .py file (not a Template)
                         fp = open(new_trcback[-1][0], &quot;rb&quot;)
-                        encoding = util.parse_encoding(fp)
+                        encoding = None
                         if compat.py3k and not encoding:
                             encoding = &quot;utf-8&quot;
                         fp.seek(0)
</failure>
			<system-out>                        encoding = util.parse_encoding(fp)</system-out>
		</testcase>
		<testcase name="Mutant #2460" file="mako/exceptions.py" line="240">
			<system-out>                        if compat.py3k and not encoding:</system-out>
		</testcase>
		<testcase name="Mutant #2461" file="mako/exceptions.py" line="240">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -238,7 +238,7 @@
                         # A normal .py file (not a Template)
                         fp = open(new_trcback[-1][0], &quot;rb&quot;)
                         encoding = util.parse_encoding(fp)
-                        if compat.py3k and not encoding:
+                        if compat.py3k or not encoding:
                             encoding = &quot;utf-8&quot;
                         fp.seek(0)
                         self.source = fp.read()
</failure>
			<system-out>                        if compat.py3k and not encoding:</system-out>
		</testcase>
		<testcase name="Mutant #2462" file="mako/exceptions.py" line="241">
			<system-out>                            encoding = &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2463" file="mako/exceptions.py" line="241">
			<system-out>                            encoding = &quot;utf-8&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2464" file="mako/exceptions.py" line="242">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -240,7 +240,7 @@
                         encoding = util.parse_encoding(fp)
                         if compat.py3k and not encoding:
                             encoding = &quot;utf-8&quot;
-                        fp.seek(0)
+                        fp.seek(1)
                         self.source = fp.read()
                         fp.close()
                         if encoding:
</failure>
			<system-out>                        fp.seek(0)</system-out>
		</testcase>
		<testcase name="Mutant #2465" file="mako/exceptions.py" line="243">
			<system-out>                        self.source = fp.read()</system-out>
		</testcase>
		<testcase name="Mutant #2466" file="mako/exceptions.py" line="246">
			<system-out>                            self.source = self.source.decode(encoding)</system-out>
		</testcase>
		<testcase name="Mutant #2467" file="mako/exceptions.py" line="248">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -246,7 +246,7 @@
                         if encoding:
                             self.source = self.source.decode(encoding)
                     except IOError:
-                        self.source = &quot;&quot;
+                        self.source = &quot;XXXX&quot;
                     self.lineno = new_trcback[-1][1]
         return new_trcback
 
</failure>
			<system-out>                        self.source = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2468" file="mako/exceptions.py" line="248">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -246,7 +246,7 @@
                         if encoding:
                             self.source = self.source.decode(encoding)
                     except IOError:
-                        self.source = &quot;&quot;
+                        self.source = None
                     self.lineno = new_trcback[-1][1]
         return new_trcback
 
</failure>
			<system-out>                        self.source = &quot;&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2469" file="mako/exceptions.py" line="249">
			<system-out>                    self.lineno = new_trcback[-1][1]</system-out>
		</testcase>
		<testcase name="Mutant #2470" file="mako/exceptions.py" line="249">
			<system-out>                    self.lineno = new_trcback[-1][1]</system-out>
		</testcase>
		<testcase name="Mutant #2471" file="mako/exceptions.py" line="249">
			<system-out>                    self.lineno = new_trcback[-1][1]</system-out>
		</testcase>
		<testcase name="Mutant #2472" file="mako/exceptions.py" line="249">
			<system-out>                    self.lineno = new_trcback[-1][1]</system-out>
		</testcase>
		<testcase name="Mutant #2473" file="mako/exceptions.py" line="291">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -289,7 +289,7 @@
     global syntax_highlight, pygments_html_formatter
     from mako.filters import html_escape
 
-    pygments_html_formatter = None
+    pygments_html_formatter = &quot;&quot;
 
     def syntax_highlight(filename=&quot;&quot;, language=None):
         return html_escape
</failure>
			<system-out>    pygments_html_formatter = None</system-out>
		</testcase>
		<testcase name="Mutant #2474" file="mako/exceptions.py" line="293">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -291,7 +291,7 @@
 
     pygments_html_formatter = None
 
-    def syntax_highlight(filename=&quot;&quot;, language=None):
+    def syntax_highlight(filename=&quot;XXXX&quot;, language=None):
         return html_escape
 
 
</failure>
			<system-out>    def syntax_highlight(filename=&quot;&quot;, language=None):</system-out>
		</testcase>
		<testcase name="Mutant #2475" file="mako/exceptions.py" line="428">
			<failure type="failure" message="bad_survived">--- mako/exceptions.py
+++ mako/exceptions.py
@@ -426,6 +426,6 @@
 % endif
 &quot;&quot;&quot;,
         output_encoding=sys.getdefaultencoding(),
-        encoding_errors=&quot;htmlentityreplace&quot;,
+        encoding_errors=&quot;XXhtmlentityreplaceXX&quot;,
     )
 
</failure>
			<system-out>        encoding_errors=&quot;htmlentityreplace&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2476" file="mako/pygen.py" line="16">
			<system-out>        self.indent = 0</system-out>
		</testcase>
		<testcase name="Mutant #2477" file="mako/pygen.py" line="16">
			<system-out>        self.indent = 0</system-out>
		</testcase>
		<testcase name="Mutant #2478" file="mako/pygen.py" line="21">
			<system-out>        self.indent_detail = []</system-out>
		</testcase>
		<testcase name="Mutant #2479" file="mako/pygen.py" line="25">
			<system-out>        self.indentstring = &quot;    &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2480" file="mako/pygen.py" line="25">
			<system-out>        self.indentstring = &quot;    &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2481" file="mako/pygen.py" line="28">
			<system-out>        self.stream = stream</system-out>
		</testcase>
		<testcase name="Mutant #2482" file="mako/pygen.py" line="31">
			<system-out>        self.lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #2483" file="mako/pygen.py" line="31">
			<system-out>        self.lineno = 1</system-out>
		</testcase>
		<testcase name="Mutant #2484" file="mako/pygen.py" line="35">
			<system-out>        self.line_buffer = []</system-out>
		</testcase>
		<testcase name="Mutant #2485" file="mako/pygen.py" line="37">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -35,7 +35,7 @@
         # which can be later printed relative to an indent level
         self.line_buffer = []
 
-        self.in_indent_lines = False
+        self.in_indent_lines = True
 
         self._reset_multi_line_flags()
 
</failure>
			<system-out>        self.in_indent_lines = False</system-out>
		</testcase>
		<testcase name="Mutant #2486" file="mako/pygen.py" line="37">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -35,7 +35,7 @@
         # which can be later printed relative to an indent level
         self.line_buffer = []
 
-        self.in_indent_lines = False
+        self.in_indent_lines = None
 
         self._reset_multi_line_flags()
 
</failure>
			<system-out>        self.in_indent_lines = False</system-out>
		</testcase>
		<testcase name="Mutant #2487" file="mako/pygen.py" line="43">
			<system-out>        self.source_map = {}</system-out>
		</testcase>
		<testcase name="Mutant #2488" file="mako/pygen.py" line="46">
			<system-out>        self.lineno += num</system-out>
		</testcase>
		<testcase name="Mutant #2489" file="mako/pygen.py" line="46">
			<system-out>        self.lineno += num</system-out>
		</testcase>
		<testcase name="Mutant #2490" file="mako/pygen.py" line="49">
			<system-out>        if self.lineno not in self.source_map:</system-out>
		</testcase>
		<testcase name="Mutant #2491" file="mako/pygen.py" line="50">
			<system-out>            self.source_map[self.lineno] = lineno</system-out>
		</testcase>
		<testcase name="Mutant #2492" file="mako/pygen.py" line="53">
			<system-out>        self.stream.write(&quot;\n&quot; * num)</system-out>
		</testcase>
		<testcase name="Mutant #2493" file="mako/pygen.py" line="53">
			<system-out>        self.stream.write(&quot;\n&quot; * num)</system-out>
		</testcase>
		<testcase name="Mutant #2494" file="mako/pygen.py" line="61">
			<system-out>        self.in_indent_lines = False</system-out>
		</testcase>
		<testcase name="Mutant #2495" file="mako/pygen.py" line="61">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -59,7 +59,7 @@
 
         The indentation of the total block of lines will be adjusted to that of
         the current indent level.&quot;&quot;&quot;
-        self.in_indent_lines = False
+        self.in_indent_lines = None
         for i, l in enumerate(re.split(r&quot;\r?\n&quot;, block)):
             self.line_buffer.append(l)
             if starting_lineno is not None:
</failure>
			<system-out>        self.in_indent_lines = False</system-out>
		</testcase>
		<testcase name="Mutant #2496" file="mako/pygen.py" line="62">
			<system-out>        for i, l in enumerate(re.split(r&quot;\r?\n&quot;, block)):</system-out>
		</testcase>
		<testcase name="Mutant #2497" file="mako/pygen.py" line="64">
			<system-out>            if starting_lineno is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2498" file="mako/pygen.py" line="65">
			<system-out>                self.start_source(starting_lineno + i)</system-out>
		</testcase>
		<testcase name="Mutant #2499" file="mako/pygen.py" line="66">
			<system-out>            self._update_lineno(1)</system-out>
		</testcase>
		<testcase name="Mutant #2500" file="mako/pygen.py" line="82">
			<system-out>        if not self.in_indent_lines:</system-out>
		</testcase>
		<testcase name="Mutant #2501" file="mako/pygen.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -82,7 +82,7 @@
 
         if not self.in_indent_lines:
             self._flush_adjusted_lines()
-            self.in_indent_lines = True
+            self.in_indent_lines = False
 
         if (
             line is None
</failure>
			<system-out>            self.in_indent_lines = True</system-out>
		</testcase>
		<testcase name="Mutant #2502" file="mako/pygen.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -82,7 +82,7 @@
 
         if not self.in_indent_lines:
             self._flush_adjusted_lines()
-            self.in_indent_lines = True
+            self.in_indent_lines = None
 
         if (
             line is None
</failure>
			<system-out>            self.in_indent_lines = True</system-out>
		</testcase>
		<testcase name="Mutant #2503" file="mako/pygen.py" line="87">
			<system-out>            line is None</system-out>
		</testcase>
		<testcase name="Mutant #2504" file="mako/pygen.py" line="88">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -86,7 +86,7 @@
 
         if (
             line is None
-            or re.match(r&quot;^\s*#&quot;, line)
+            or re.match(r&quot;XX^\s*#XX&quot;, line)
             or re.match(r&quot;^\s*$&quot;, line)
         ):
             hastext = False
</failure>
			<system-out>            or re.match(r&quot;^\s*#&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2505" file="mako/pygen.py" line="89">
			<system-out>            or re.match(r&quot;^\s*$&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2506" file="mako/pygen.py" line="89">
			<system-out>            or re.match(r&quot;^\s*$&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2507" file="mako/pygen.py" line="91">
			<system-out>            hastext = False</system-out>
		</testcase>
		<testcase name="Mutant #2508" file="mako/pygen.py" line="91">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -89,7 +89,7 @@
             or re.match(r&quot;^\s*#&quot;, line)
             or re.match(r&quot;^\s*$&quot;, line)
         ):
-            hastext = False
+            hastext = None
         else:
             hastext = True
 
</failure>
			<system-out>            hastext = False</system-out>
		</testcase>
		<testcase name="Mutant #2509" file="mako/pygen.py" line="93">
			<system-out>            hastext = True</system-out>
		</testcase>
		<testcase name="Mutant #2510" file="mako/pygen.py" line="93">
			<system-out>            hastext = True</system-out>
		</testcase>
		<testcase name="Mutant #2511" file="mako/pygen.py" line="95">
			<system-out>        is_comment = line and len(line) and line[0] == &quot;#&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2512" file="mako/pygen.py" line="95">
			<system-out>        is_comment = line and len(line) and line[0] == &quot;#&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2513" file="mako/pygen.py" line="95">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -93,7 +93,7 @@
         else:
             hastext = True
 
-        is_comment = line and len(line) and line[0] == &quot;#&quot;
+        is_comment = line and len(line) and line[0] == &quot;XX#XX&quot;
 
         # see if this line should decrease the indentation level
         if not is_comment and (not hastext or self._is_unindentor(line)):
</failure>
			<system-out>        is_comment = line and len(line) and line[0] == &quot;#&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2514" file="mako/pygen.py" line="95">
			<system-out>        is_comment = line and len(line) and line[0] == &quot;#&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2515" file="mako/pygen.py" line="95">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -93,7 +93,7 @@
         else:
             hastext = True
 
-        is_comment = line and len(line) and line[0] == &quot;#&quot;
+        is_comment = None
 
         # see if this line should decrease the indentation level
         if not is_comment and (not hastext or self._is_unindentor(line)):
</failure>
			<system-out>        is_comment = line and len(line) and line[0] == &quot;#&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2516" file="mako/pygen.py" line="98">
			<system-out>        if not is_comment and (not hastext or self._is_unindentor(line)):</system-out>
		</testcase>
		<testcase name="Mutant #2517" file="mako/pygen.py" line="98">
			<system-out>        if not is_comment and (not hastext or self._is_unindentor(line)):</system-out>
		</testcase>
		<testcase name="Mutant #2518" file="mako/pygen.py" line="98">
			<system-out>        if not is_comment and (not hastext or self._is_unindentor(line)):</system-out>
		</testcase>
		<testcase name="Mutant #2519" file="mako/pygen.py" line="98">
			<system-out>        if not is_comment and (not hastext or self._is_unindentor(line)):</system-out>
		</testcase>
		<testcase name="Mutant #2520" file="mako/pygen.py" line="100">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -98,7 +98,7 @@
         # see if this line should decrease the indentation level
         if not is_comment and (not hastext or self._is_unindentor(line)):
 
-            if self.indent &gt; 0:
+            if self.indent &gt;= 0:
                 self.indent -= 1
                 # if the indent_detail stack is empty, the user
                 # probably put extra closures - the resulting
</failure>
			<system-out>            if self.indent &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #2521" file="mako/pygen.py" line="100">
			<system-out>            if self.indent &gt; 0:</system-out>
		</testcase>
		<testcase name="Mutant #2522" file="mako/pygen.py" line="101">
			<system-out>                self.indent -= 1</system-out>
		</testcase>
		<testcase name="Mutant #2523" file="mako/pygen.py" line="101">
			<system-out>                self.indent -= 1</system-out>
		</testcase>
		<testcase name="Mutant #2524" file="mako/pygen.py" line="101">
			<system-out>                self.indent -= 1</system-out>
		</testcase>
		<testcase name="Mutant #2525" file="mako/pygen.py" line="105">
			<system-out>                if len(self.indent_detail) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2526" file="mako/pygen.py" line="105">
			<system-out>                if len(self.indent_detail) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2527" file="mako/pygen.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -105,7 +105,7 @@
                 # module wont compile.
                 if len(self.indent_detail) == 0:
                     raise exceptions.SyntaxException(
-                        &quot;Too many whitespace closures&quot;
+                        &quot;XXToo many whitespace closuresXX&quot;
                     )
                 self.indent_detail.pop()
 
</failure>
			<system-out>                        &quot;Too many whitespace closures&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2528" file="mako/pygen.py" line="111">
			<system-out>        if line is None:</system-out>
		</testcase>
		<testcase name="Mutant #2529" file="mako/pygen.py" line="115">
			<system-out>        self.stream.write(self._indent_line(line) + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2530" file="mako/pygen.py" line="115">
			<system-out>        self.stream.write(self._indent_line(line) + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2531" file="mako/pygen.py" line="116">
			<system-out>        self._update_lineno(len(line.split(&quot;\n&quot;)))</system-out>
		</testcase>
		<testcase name="Mutant #2532" file="mako/pygen.py" line="122">
			<system-out>        if re.search(r&quot;:[ \t]*(?:#.*)?$&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2533" file="mako/pygen.py" line="127">
			<system-out>            match = re.match(r&quot;^\s*(if|try|elif|while|for|with)&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2534" file="mako/pygen.py" line="127">
			<system-out>            match = re.match(r&quot;^\s*(if|try|elif|while|for|with)&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2535" file="mako/pygen.py" line="130">
			<system-out>                indentor = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2536" file="mako/pygen.py" line="130">
			<system-out>                indentor = match.group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2537" file="mako/pygen.py" line="131">
			<system-out>                self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2538" file="mako/pygen.py" line="131">
			<system-out>                self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2539" file="mako/pygen.py" line="131">
			<system-out>                self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2540" file="mako/pygen.py" line="134">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -132,7 +132,7 @@
                 self.indent += 1
                 self.indent_detail.append(indentor)
             else:
-                indentor = None
+                indentor = &quot;&quot;
                 # its not a &quot;compound&quot; keyword.  but lets also
                 # test for valid Python keywords that might be indenting us,
                 # else assume its a non-indenting line
</failure>
			<system-out>                indentor = None</system-out>
		</testcase>
		<testcase name="Mutant #2541" file="mako/pygen.py" line="139">
			<system-out>                    r&quot;^\s*(def|class|else|elif|except|finally)&quot;, line</system-out>
		</testcase>
		<testcase name="Mutant #2542" file="mako/pygen.py" line="140">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #2543" file="mako/pygen.py" line="142">
			<system-out>                    self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2544" file="mako/pygen.py" line="142">
			<system-out>                    self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2545" file="mako/pygen.py" line="142">
			<system-out>                    self.indent += 1</system-out>
		</testcase>
		<testcase name="Mutant #2546" file="mako/pygen.py" line="156">
			<system-out>        if len(self.indent_detail) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2547" file="mako/pygen.py" line="156">
			<system-out>        if len(self.indent_detail) == 0:</system-out>
		</testcase>
		<testcase name="Mutant #2548" file="mako/pygen.py" line="157">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -155,7 +155,7 @@
 
         # no indentation detail has been pushed on; return False
         if len(self.indent_detail) == 0:
-            return False
+            return True
 
         indentor = self.indent_detail[-1]
 
</failure>
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2549" file="mako/pygen.py" line="159">
			<system-out>        indentor = self.indent_detail[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2550" file="mako/pygen.py" line="159">
			<system-out>        indentor = self.indent_detail[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2551" file="mako/pygen.py" line="159">
			<system-out>        indentor = self.indent_detail[-1]</system-out>
		</testcase>
		<testcase name="Mutant #2552" file="mako/pygen.py" line="163">
			<system-out>        if indentor is None:</system-out>
		</testcase>
		<testcase name="Mutant #2553" file="mako/pygen.py" line="164">
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2554" file="mako/pygen.py" line="168">
			<system-out>        match = re.match(r&quot;^\s*(else|elif|except|finally).*\:&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2555" file="mako/pygen.py" line="168">
			<system-out>        match = re.match(r&quot;^\s*(else|elif|except|finally).*\:&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2556" file="mako/pygen.py" line="169">
			<system-out>        if not match:</system-out>
		</testcase>
		<testcase name="Mutant #2557" file="mako/pygen.py" line="170">
			<system-out>            return False</system-out>
		</testcase>
		<testcase name="Mutant #2558" file="mako/pygen.py" line="175">
			<system-out>        return True</system-out>
		</testcase>
		<testcase name="Mutant #2559" file="mako/pygen.py" line="192">
			<system-out>    def _indent_line(self, line, stripspace=&quot;&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #2560" file="mako/pygen.py" line="199">
			<system-out>            r&quot;^%s&quot; % stripspace, self.indentstring * self.indent, line</system-out>
		</testcase>
		<testcase name="Mutant #2561" file="mako/pygen.py" line="199">
			<system-out>            r&quot;^%s&quot; % stripspace, self.indentstring * self.indent, line</system-out>
		</testcase>
		<testcase name="Mutant #2562" file="mako/pygen.py" line="199">
			<system-out>            r&quot;^%s&quot; % stripspace, self.indentstring * self.indent, line</system-out>
		</testcase>
		<testcase name="Mutant #2563" file="mako/pygen.py" line="206">
			<system-out>        self.backslashed, self.triplequoted = False, False</system-out>
		</testcase>
		<testcase name="Mutant #2564" file="mako/pygen.py" line="206">
			<system-out>        self.backslashed, self.triplequoted = False, False</system-out>
		</testcase>
		<testcase name="Mutant #2565" file="mako/pygen.py" line="206">
			<system-out>        self.backslashed, self.triplequoted = False, False</system-out>
		</testcase>
		<testcase name="Mutant #2566" file="mako/pygen.py" line="218">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -216,7 +216,7 @@
         # a literal multiline string with unfortunately placed
         # whitespace
 
-        current_state = self.backslashed or self.triplequoted
+        current_state = self.backslashed and self.triplequoted
 
         if re.search(r&quot;\\$&quot;, line):
             self.backslashed = True
</failure>
			<system-out>        current_state = self.backslashed or self.triplequoted</system-out>
		</testcase>
		<testcase name="Mutant #2567" file="mako/pygen.py" line="218">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -216,7 +216,7 @@
         # a literal multiline string with unfortunately placed
         # whitespace
 
-        current_state = self.backslashed or self.triplequoted
+        current_state = None
 
         if re.search(r&quot;\\$&quot;, line):
             self.backslashed = True
</failure>
			<system-out>        current_state = self.backslashed or self.triplequoted</system-out>
		</testcase>
		<testcase name="Mutant #2568" file="mako/pygen.py" line="220">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -218,7 +218,7 @@
 
         current_state = self.backslashed or self.triplequoted
 
-        if re.search(r&quot;\\$&quot;, line):
+        if re.search(r&quot;XX\\$XX&quot;, line):
             self.backslashed = True
         else:
             self.backslashed = False
</failure>
			<system-out>        if re.search(r&quot;\\$&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2569" file="mako/pygen.py" line="221">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -219,7 +219,7 @@
         current_state = self.backslashed or self.triplequoted
 
         if re.search(r&quot;\\$&quot;, line):
-            self.backslashed = True
+            self.backslashed = False
         else:
             self.backslashed = False
 
</failure>
			<system-out>            self.backslashed = True</system-out>
		</testcase>
		<testcase name="Mutant #2570" file="mako/pygen.py" line="221">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -219,7 +219,7 @@
         current_state = self.backslashed or self.triplequoted
 
         if re.search(r&quot;\\$&quot;, line):
-            self.backslashed = True
+            self.backslashed = None
         else:
             self.backslashed = False
 
</failure>
			<system-out>            self.backslashed = True</system-out>
		</testcase>
		<testcase name="Mutant #2571" file="mako/pygen.py" line="223">
			<system-out>            self.backslashed = False</system-out>
		</testcase>
		<testcase name="Mutant #2572" file="mako/pygen.py" line="223">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -221,7 +221,7 @@
         if re.search(r&quot;\\$&quot;, line):
             self.backslashed = True
         else:
-            self.backslashed = False
+            self.backslashed = None
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
         if triples == 1 or triples % 2 != 0:
</failure>
			<system-out>            self.backslashed = False</system-out>
		</testcase>
		<testcase name="Mutant #2573" file="mako/pygen.py" line="225">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -223,7 +223,7 @@
         else:
             self.backslashed = False
 
-        triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
+        triples = len(re.findall(r&quot;XX\&quot;\&quot;\&quot;|\'\'\'XX&quot;, line))
         if triples == 1 or triples % 2 != 0:
             self.triplequoted = not self.triplequoted
 
</failure>
			<system-out>        triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))</system-out>
		</testcase>
		<testcase name="Mutant #2574" file="mako/pygen.py" line="225">
			<system-out>        triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))</system-out>
		</testcase>
		<testcase name="Mutant #2575" file="mako/pygen.py" line="226">
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2576" file="mako/pygen.py" line="226">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -224,7 +224,7 @@
             self.backslashed = False
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
-        if triples == 1 or triples % 2 != 0:
+        if triples == 2 or triples % 2 != 0:
             self.triplequoted = not self.triplequoted
 
         return current_state
</failure>
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2577" file="mako/pygen.py" line="226">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -224,7 +224,7 @@
             self.backslashed = False
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
-        if triples == 1 or triples % 2 != 0:
+        if triples == 1 or triples / 2 != 0:
             self.triplequoted = not self.triplequoted
 
         return current_state
</failure>
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2578" file="mako/pygen.py" line="226">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -224,7 +224,7 @@
             self.backslashed = False
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
-        if triples == 1 or triples % 2 != 0:
+        if triples == 1 or triples % 3 != 0:
             self.triplequoted = not self.triplequoted
 
         return current_state
</failure>
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2579" file="mako/pygen.py" line="226">
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2580" file="mako/pygen.py" line="226">
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2581" file="mako/pygen.py" line="226">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -224,7 +224,7 @@
             self.backslashed = False
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
-        if triples == 1 or triples % 2 != 0:
+        if triples == 1 and triples % 2 != 0:
             self.triplequoted = not self.triplequoted
 
         return current_state
</failure>
			<system-out>        if triples == 1 or triples % 2 != 0:</system-out>
		</testcase>
		<testcase name="Mutant #2582" file="mako/pygen.py" line="227">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -225,7 +225,7 @@
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
         if triples == 1 or triples % 2 != 0:
-            self.triplequoted = not self.triplequoted
+            self.triplequoted =  self.triplequoted
 
         return current_state
 
</failure>
			<system-out>            self.triplequoted = not self.triplequoted</system-out>
		</testcase>
		<testcase name="Mutant #2583" file="mako/pygen.py" line="227">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -225,7 +225,7 @@
 
         triples = len(re.findall(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line))
         if triples == 1 or triples % 2 != 0:
-            self.triplequoted = not self.triplequoted
+            self.triplequoted = None
 
         return current_state
 
</failure>
			<system-out>            self.triplequoted = not self.triplequoted</system-out>
		</testcase>
		<testcase name="Mutant #2584" file="mako/pygen.py" line="232">
			<system-out>        stripspace = None</system-out>
		</testcase>
		<testcase name="Mutant #2585" file="mako/pygen.py" line="237">
			<system-out>                self.stream.write(entry + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2586" file="mako/pygen.py" line="237">
			<system-out>                self.stream.write(entry + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2587" file="mako/pygen.py" line="239">
			<system-out>                entry = entry.expandtabs()</system-out>
		</testcase>
		<testcase name="Mutant #2588" file="mako/pygen.py" line="240">
			<system-out>                if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, entry):</system-out>
		</testcase>
		<testcase name="Mutant #2589" file="mako/pygen.py" line="240">
			<system-out>                if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, entry):</system-out>
		</testcase>
		<testcase name="Mutant #2590" file="mako/pygen.py" line="240">
			<system-out>                if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, entry):</system-out>
		</testcase>
		<testcase name="Mutant #2591" file="mako/pygen.py" line="241">
			<system-out>                    stripspace = re.match(r&quot;^([ \t]*)&quot;, entry).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2592" file="mako/pygen.py" line="241">
			<system-out>                    stripspace = re.match(r&quot;^([ \t]*)&quot;, entry).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2593" file="mako/pygen.py" line="241">
			<system-out>                    stripspace = re.match(r&quot;^([ \t]*)&quot;, entry).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2594" file="mako/pygen.py" line="242">
			<system-out>                self.stream.write(self._indent_line(entry, stripspace) + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2595" file="mako/pygen.py" line="242">
			<system-out>                self.stream.write(self._indent_line(entry, stripspace) + &quot;\n&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2596" file="mako/pygen.py" line="244">
			<system-out>        self.line_buffer = []</system-out>
		</testcase>
		<testcase name="Mutant #2597" file="mako/pygen.py" line="251">
			<system-out>    state = [False, False]</system-out>
		</testcase>
		<testcase name="Mutant #2598" file="mako/pygen.py" line="251">
			<system-out>    state = [False, False]</system-out>
		</testcase>
		<testcase name="Mutant #2599" file="mako/pygen.py" line="251">
			<system-out>    state = [False, False]</system-out>
		</testcase>
		<testcase name="Mutant #2600" file="mako/pygen.py" line="252">
			<system-out>    (backslashed, triplequoted) = (0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #2601" file="mako/pygen.py" line="252">
			<system-out>    (backslashed, triplequoted) = (0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #2602" file="mako/pygen.py" line="252">
			<system-out>    (backslashed, triplequoted) = (0, 1)</system-out>
		</testcase>
		<testcase name="Mutant #2603" file="mako/pygen.py" line="255">
			<system-out>        start_state = state[backslashed] or state[triplequoted]</system-out>
		</testcase>
		<testcase name="Mutant #2604" file="mako/pygen.py" line="255">
			<system-out>        start_state = state[backslashed] or state[triplequoted]</system-out>
		</testcase>
		<testcase name="Mutant #2605" file="mako/pygen.py" line="257">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -255,7 +255,7 @@
     def in_multi_line(line):
         start_state = state[backslashed] or state[triplequoted]
 
-        if re.search(r&quot;\\$&quot;, line):
+        if re.search(r&quot;XX\\$XX&quot;, line):
             state[backslashed] = True
         else:
             state[backslashed] = False
</failure>
			<system-out>        if re.search(r&quot;\\$&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2606" file="mako/pygen.py" line="258">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -256,7 +256,7 @@
         start_state = state[backslashed] or state[triplequoted]
 
         if re.search(r&quot;\\$&quot;, line):
-            state[backslashed] = True
+            state[backslashed] = False
         else:
             state[backslashed] = False
 
</failure>
			<system-out>            state[backslashed] = True</system-out>
		</testcase>
		<testcase name="Mutant #2607" file="mako/pygen.py" line="258">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -256,7 +256,7 @@
         start_state = state[backslashed] or state[triplequoted]
 
         if re.search(r&quot;\\$&quot;, line):
-            state[backslashed] = True
+            state[backslashed] = None
         else:
             state[backslashed] = False
 
</failure>
			<system-out>            state[backslashed] = True</system-out>
		</testcase>
		<testcase name="Mutant #2608" file="mako/pygen.py" line="260">
			<system-out>            state[backslashed] = False</system-out>
		</testcase>
		<testcase name="Mutant #2609" file="mako/pygen.py" line="260">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -258,7 +258,7 @@
         if re.search(r&quot;\\$&quot;, line):
             state[backslashed] = True
         else:
-            state[backslashed] = False
+            state[backslashed] = None
 
         def match(reg, t):
             m = re.match(reg, t)
</failure>
			<system-out>            state[backslashed] = False</system-out>
		</testcase>
		<testcase name="Mutant #2610" file="mako/pygen.py" line="263">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -261,7 +261,7 @@
             state[backslashed] = False
 
         def match(reg, t):
-            m = re.match(reg, t)
+            m = None
             if m:
                 return m, t[len(m.group(0)) :]
             else:
</error>
			<system-out>            m = re.match(reg, t)</system-out>
		</testcase>
		<testcase name="Mutant #2611" file="mako/pygen.py" line="265">
			<system-out>                return m, t[len(m.group(0)) :]</system-out>
		</testcase>
		<testcase name="Mutant #2612" file="mako/pygen.py" line="271">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -269,7 +269,7 @@
 
         while line:
             if state[triplequoted]:
-                m, line = match(r&quot;%s&quot; % state[triplequoted], line)
+                m, line = match(r&quot;XX%sXX&quot; % state[triplequoted], line)
                 if m:
                     state[triplequoted] = False
                 else:
</error>
			<system-out>                m, line = match(r&quot;%s&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2613" file="mako/pygen.py" line="271">
			<system-out>                m, line = match(r&quot;%s&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2614" file="mako/pygen.py" line="271">
			<system-out>                m, line = match(r&quot;%s&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2615" file="mako/pygen.py" line="273">
			<system-out>                    state[triplequoted] = False</system-out>
		</testcase>
		<testcase name="Mutant #2616" file="mako/pygen.py" line="273">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -271,7 +271,7 @@
             if state[triplequoted]:
                 m, line = match(r&quot;%s&quot; % state[triplequoted], line)
                 if m:
-                    state[triplequoted] = False
+                    state[triplequoted] = None
                 else:
                     m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)
             else:
</failure>
			<system-out>                    state[triplequoted] = False</system-out>
		</testcase>
		<testcase name="Mutant #2617" file="mako/pygen.py" line="275">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -273,7 +273,7 @@
                 if m:
                     state[triplequoted] = False
                 else:
-                    m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)
+                    m, line = match(r&quot;XX.*?(?=%s|$)XX&quot; % state[triplequoted], line)
             else:
                 m, line = match(r&quot;#&quot;, line)
                 if m:
</error>
			<system-out>                    m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2618" file="mako/pygen.py" line="275">
			<system-out>                    m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2619" file="mako/pygen.py" line="275">
			<system-out>                    m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)</system-out>
		</testcase>
		<testcase name="Mutant #2620" file="mako/pygen.py" line="277">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -275,7 +275,7 @@
                 else:
                     m, line = match(r&quot;.*?(?=%s|$)&quot; % state[triplequoted], line)
             else:
-                m, line = match(r&quot;#&quot;, line)
+                m, line = match(r&quot;XX#XX&quot;, line)
                 if m:
                     return start_state
 
</error>
			<system-out>                m, line = match(r&quot;#&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2621" file="mako/pygen.py" line="277">
			<system-out>                m, line = match(r&quot;#&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2622" file="mako/pygen.py" line="281">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -279,7 +279,7 @@
                 if m:
                     return start_state
 
-                m, line = match(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line)
+                m, line = match(r&quot;XX\&quot;\&quot;\&quot;|\'\'\'XX&quot;, line)
                 if m:
                     state[triplequoted] = m.group(0)
                     continue
</error>
			<system-out>                m, line = match(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2623" file="mako/pygen.py" line="281">
			<system-out>                m, line = match(r&quot;\&quot;\&quot;\&quot;|\'\'\'&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2624" file="mako/pygen.py" line="283">
			<system-out>                    state[triplequoted] = m.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #2625" file="mako/pygen.py" line="283">
			<system-out>                    state[triplequoted] = m.group(0)</system-out>
		</testcase>
		<testcase name="Mutant #2626" file="mako/pygen.py" line="284">
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #2627" file="mako/pygen.py" line="286">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -284,7 +284,7 @@
                     state[triplequoted] = m.group(0)
                     continue
 
-                m, line = match(r&quot;.*?(?=\&quot;\&quot;\&quot;|\'\'\'|#|$)&quot;, line)
+                m, line = match(r&quot;XX.*?(?=\&quot;\&quot;\&quot;|\'\'\'|#|$)XX&quot;, line)
 
         return start_state
 
</error>
			<system-out>                m, line = match(r&quot;.*?(?=\&quot;\&quot;\&quot;|\'\'\'|#|$)&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2628" file="mako/pygen.py" line="286">
			<system-out>                m, line = match(r&quot;.*?(?=\&quot;\&quot;\&quot;|\'\'\'|#|$)&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2629" file="mako/pygen.py" line="290">
			<failure type="failure" message="bad_survived">--- mako/pygen.py
+++ mako/pygen.py
@@ -288,7 +288,7 @@
 
         return start_state
 
-    def _indent_line(line, stripspace=&quot;&quot;):
+    def _indent_line(line, stripspace=&quot;XXXX&quot;):
         return re.sub(r&quot;^%s&quot; % stripspace, &quot;&quot;, line)
 
     lines = []
</failure>
			<system-out>    def _indent_line(line, stripspace=&quot;&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #2630" file="mako/pygen.py" line="291">
			<system-out>        return re.sub(r&quot;^%s&quot; % stripspace, &quot;&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2631" file="mako/pygen.py" line="291">
			<system-out>        return re.sub(r&quot;^%s&quot; % stripspace, &quot;&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2632" file="mako/pygen.py" line="291">
			<system-out>        return re.sub(r&quot;^%s&quot; % stripspace, &quot;&quot;, line)</system-out>
		</testcase>
		<testcase name="Mutant #2633" file="mako/pygen.py" line="293">
			<system-out>    lines = []</system-out>
		</testcase>
		<testcase name="Mutant #2634" file="mako/pygen.py" line="294">
			<system-out>    stripspace = None</system-out>
		</testcase>
		<testcase name="Mutant #2635" file="mako/pygen.py" line="296">
			<error type="timeout" message="bad_timeout">--- mako/pygen.py
+++ mako/pygen.py
@@ -294,7 +294,7 @@
     lines = []
     stripspace = None
 
-    for line in re.split(r&quot;\r?\n&quot;, text):
+    for line in re.split(r&quot;XX\r?\nXX&quot;, text):
         if in_multi_line(line):
             lines.append(line)
         else:
</error>
			<system-out>    for line in re.split(r&quot;\r?\n&quot;, text):</system-out>
		</testcase>
		<testcase name="Mutant #2636" file="mako/pygen.py" line="300">
			<system-out>            line = line.expandtabs()</system-out>
		</testcase>
		<testcase name="Mutant #2637" file="mako/pygen.py" line="301">
			<system-out>            if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2638" file="mako/pygen.py" line="301">
			<system-out>            if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2639" file="mako/pygen.py" line="301">
			<system-out>            if stripspace is None and re.search(r&quot;^[ \t]*[^# \t]&quot;, line):</system-out>
		</testcase>
		<testcase name="Mutant #2640" file="mako/pygen.py" line="302">
			<system-out>                stripspace = re.match(r&quot;^([ \t]*)&quot;, line).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2641" file="mako/pygen.py" line="302">
			<system-out>                stripspace = re.match(r&quot;^([ \t]*)&quot;, line).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2642" file="mako/pygen.py" line="302">
			<system-out>                stripspace = re.match(r&quot;^([ \t]*)&quot;, line).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #2643" file="mako/pygen.py" line="304">
			<system-out>    return &quot;\n&quot;.join(lines)</system-out>
		</testcase>
		<testcase name="Mutant #2644" file="mako/compat.py" line="10">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -8,7 +8,7 @@
 import inspect
 import sys
 
-py3k = sys.version_info &gt;= (3, 0)
+py3k = sys.version_info &gt; (3, 0)
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
</failure>
			<system-out>py3k = sys.version_info &gt;= (3, 0)</system-out>
		</testcase>
		<testcase name="Mutant #2645" file="mako/compat.py" line="10">
			<system-out>py3k = sys.version_info &gt;= (3, 0)</system-out>
		</testcase>
		<testcase name="Mutant #2646" file="mako/compat.py" line="10">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -8,7 +8,7 @@
 import inspect
 import sys
 
-py3k = sys.version_info &gt;= (3, 0)
+py3k = sys.version_info &gt;= (3, 1)
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
</failure>
			<system-out>py3k = sys.version_info &gt;= (3, 0)</system-out>
		</testcase>
		<testcase name="Mutant #2647" file="mako/compat.py" line="10">
			<system-out>py3k = sys.version_info &gt;= (3, 0)</system-out>
		</testcase>
		<testcase name="Mutant #2648" file="mako/compat.py" line="11">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -9,7 +9,7 @@
 import sys
 
 py3k = sys.version_info &gt;= (3, 0)
-py2k = sys.version_info &lt; (3,)
+py2k = sys.version_info &lt;= (3,)
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
</failure>
			<system-out>py2k = sys.version_info &lt; (3,)</system-out>
		</testcase>
		<testcase name="Mutant #2649" file="mako/compat.py" line="11">
			<system-out>py2k = sys.version_info &lt; (3,)</system-out>
		</testcase>
		<testcase name="Mutant #2650" file="mako/compat.py" line="11">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -9,7 +9,7 @@
 import sys
 
 py3k = sys.version_info &gt;= (3, 0)
-py2k = sys.version_info &lt; (3,)
+py2k = None
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
</failure>
			<system-out>py2k = sys.version_info &lt; (3,)</system-out>
		</testcase>
		<testcase name="Mutant #2651" file="mako/compat.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -10,7 +10,7 @@
 
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
-py27 = sys.version_info &gt;= (2, 7)
+py27 = sys.version_info &gt; (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
</failure>
			<system-out>py27 = sys.version_info &gt;= (2, 7)</system-out>
		</testcase>
		<testcase name="Mutant #2652" file="mako/compat.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -10,7 +10,7 @@
 
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
-py27 = sys.version_info &gt;= (2, 7)
+py27 = sys.version_info &gt;= (3, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
</failure>
			<system-out>py27 = sys.version_info &gt;= (2, 7)</system-out>
		</testcase>
		<testcase name="Mutant #2653" file="mako/compat.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -10,7 +10,7 @@
 
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
-py27 = sys.version_info &gt;= (2, 7)
+py27 = sys.version_info &gt;= (2, 8)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
</failure>
			<system-out>py27 = sys.version_info &gt;= (2, 7)</system-out>
		</testcase>
		<testcase name="Mutant #2654" file="mako/compat.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -10,7 +10,7 @@
 
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
-py27 = sys.version_info &gt;= (2, 7)
+py27 = None
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
</failure>
			<system-out>py27 = sys.version_info &gt;= (2, 7)</system-out>
		</testcase>
		<testcase name="Mutant #2655" file="mako/compat.py" line="13">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -11,7 +11,7 @@
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
-jython = sys.platform.startswith(&quot;java&quot;)
+jython = sys.platform.startswith(&quot;XXjavaXX&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
</failure>
			<system-out>jython = sys.platform.startswith(&quot;java&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2656" file="mako/compat.py" line="13">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -11,7 +11,7 @@
 py3k = sys.version_info &gt;= (3, 0)
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
-jython = sys.platform.startswith(&quot;java&quot;)
+jython = None
 win32 = sys.platform.startswith(&quot;win&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
</failure>
			<system-out>jython = sys.platform.startswith(&quot;java&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2657" file="mako/compat.py" line="14">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -12,7 +12,7 @@
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
-win32 = sys.platform.startswith(&quot;win&quot;)
+win32 = sys.platform.startswith(&quot;XXwinXX&quot;)
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
</failure>
			<system-out>win32 = sys.platform.startswith(&quot;win&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2658" file="mako/compat.py" line="14">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -12,7 +12,7 @@
 py2k = sys.version_info &lt; (3,)
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
-win32 = sys.platform.startswith(&quot;win&quot;)
+win32 = None
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
</failure>
			<system-out>win32 = sys.platform.startswith(&quot;win&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2659" file="mako/compat.py" line="15">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -13,7 +13,7 @@
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
-pypy = hasattr(sys, &quot;pypy_version_info&quot;)
+pypy = hasattr(sys, &quot;XXpypy_version_infoXX&quot;)
 
 ArgSpec = collections.namedtuple(
     &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
</failure>
			<system-out>pypy = hasattr(sys, &quot;pypy_version_info&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2660" file="mako/compat.py" line="15">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -13,7 +13,7 @@
 py27 = sys.version_info &gt;= (2, 7)
 jython = sys.platform.startswith(&quot;java&quot;)
 win32 = sys.platform.startswith(&quot;win&quot;)
-pypy = hasattr(sys, &quot;pypy_version_info&quot;)
+pypy = None
 
 ArgSpec = collections.namedtuple(
     &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
</failure>
			<system-out>pypy = hasattr(sys, &quot;pypy_version_info&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2661" file="mako/compat.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -16,7 +16,7 @@
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
-    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
+    &quot;XXArgSpecXX&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
 )
 
 
</failure>
			<system-out>    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2662" file="mako/compat.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -16,7 +16,7 @@
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
-    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
+    &quot;ArgSpec&quot;, [&quot;XXargsXX&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
 )
 
 
</failure>
			<system-out>    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2663" file="mako/compat.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -16,7 +16,7 @@
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
-    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
+    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;XXvarargsXX&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
 )
 
 
</failure>
			<system-out>    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2664" file="mako/compat.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -16,7 +16,7 @@
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
-    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
+    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;XXkeywordsXX&quot;, &quot;defaults&quot;]
 )
 
 
</failure>
			<system-out>    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2665" file="mako/compat.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -16,7 +16,7 @@
 pypy = hasattr(sys, &quot;pypy_version_info&quot;)
 
 ArgSpec = collections.namedtuple(
-    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]
+    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;XXdefaultsXX&quot;]
 )
 
 
</failure>
			<system-out>    &quot;ArgSpec&quot;, [&quot;args&quot;, &quot;varargs&quot;, &quot;keywords&quot;, &quot;defaults&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2666" file="mako/compat.py" line="19">
			<system-out>)</system-out>
		</testcase>
		<testcase name="Mutant #2667" file="mako/compat.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -24,7 +24,7 @@
     &quot;&quot;&quot;getargspec based on fully vendored getfullargspec from Python 3.3.&quot;&quot;&quot;
 
     if inspect.ismethod(func):
-        func = func.__func__
+        func = None
     if not inspect.isfunction(func):
         raise TypeError(&quot;{!r} is not a Python function&quot;.format(func))
 
</failure>
			<system-out>        func = func.__func__</system-out>
		</testcase>
		<testcase name="Mutant #2668" file="mako/compat.py" line="27">
			<system-out>    if not inspect.isfunction(func):</system-out>
		</testcase>
		<testcase name="Mutant #2669" file="mako/compat.py" line="28">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -26,7 +26,7 @@
     if inspect.ismethod(func):
         func = func.__func__
     if not inspect.isfunction(func):
-        raise TypeError(&quot;{!r} is not a Python function&quot;.format(func))
+        raise TypeError(&quot;XX{!r} is not a Python functionXX&quot;.format(func))
 
     co = func.__code__
     if not inspect.iscode(co):
</failure>
			<system-out>        raise TypeError(&quot;{!r} is not a Python function&quot;.format(func))</system-out>
		</testcase>
		<testcase name="Mutant #2670" file="mako/compat.py" line="30">
			<system-out>    co = func.__code__</system-out>
		</testcase>
		<testcase name="Mutant #2671" file="mako/compat.py" line="31">
			<system-out>    if not inspect.iscode(co):</system-out>
		</testcase>
		<testcase name="Mutant #2672" file="mako/compat.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -30,7 +30,7 @@
 
     co = func.__code__
     if not inspect.iscode(co):
-        raise TypeError(&quot;{!r} is not a code object&quot;.format(co))
+        raise TypeError(&quot;XX{!r} is not a code objectXX&quot;.format(co))
 
     nargs = co.co_argcount
     names = co.co_varnames
</failure>
			<system-out>        raise TypeError(&quot;{!r} is not a code object&quot;.format(co))</system-out>
		</testcase>
		<testcase name="Mutant #2673" file="mako/compat.py" line="34">
			<system-out>    nargs = co.co_argcount</system-out>
		</testcase>
		<testcase name="Mutant #2674" file="mako/compat.py" line="35">
			<system-out>    names = co.co_varnames</system-out>
		</testcase>
		<testcase name="Mutant #2675" file="mako/compat.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -34,7 +34,7 @@
 
     nargs = co.co_argcount
     names = co.co_varnames
-    nkwargs = co.co_kwonlyargcount if py3k else 0
+    nkwargs = co.co_kwonlyargcount if py3k else 1
     args = list(names[:nargs])
 
     nargs += nkwargs
</failure>
			<system-out>    nkwargs = co.co_kwonlyargcount if py3k else 0</system-out>
		</testcase>
		<testcase name="Mutant #2676" file="mako/compat.py" line="36">
			<system-out>    nkwargs = co.co_kwonlyargcount if py3k else 0</system-out>
		</testcase>
		<testcase name="Mutant #2677" file="mako/compat.py" line="37">
			<system-out>    args = list(names[:nargs])</system-out>
		</testcase>
		<testcase name="Mutant #2678" file="mako/compat.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -37,7 +37,7 @@
     nkwargs = co.co_kwonlyargcount if py3k else 0
     args = list(names[:nargs])
 
-    nargs += nkwargs
+    nargs = nkwargs
     varargs = None
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
</failure>
			<system-out>    nargs += nkwargs</system-out>
		</testcase>
		<testcase name="Mutant #2679" file="mako/compat.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -37,7 +37,7 @@
     nkwargs = co.co_kwonlyargcount if py3k else 0
     args = list(names[:nargs])
 
-    nargs += nkwargs
+    nargs -= nkwargs
     varargs = None
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
</failure>
			<system-out>    nargs += nkwargs</system-out>
		</testcase>
		<testcase name="Mutant #2680" file="mako/compat.py" line="40">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -38,7 +38,7 @@
     args = list(names[:nargs])
 
     nargs += nkwargs
-    varargs = None
+    varargs = &quot;&quot;
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
         nargs = nargs + 1
</failure>
			<system-out>    varargs = None</system-out>
		</testcase>
		<testcase name="Mutant #2681" file="mako/compat.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -39,7 +39,7 @@
 
     nargs += nkwargs
     varargs = None
-    if co.co_flags &amp; inspect.CO_VARARGS:
+    if co.co_flags | inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
         nargs = nargs + 1
     varkw = None
</failure>
			<system-out>    if co.co_flags &amp; inspect.CO_VARARGS:</system-out>
		</testcase>
		<testcase name="Mutant #2682" file="mako/compat.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -40,7 +40,7 @@
     nargs += nkwargs
     varargs = None
     if co.co_flags &amp; inspect.CO_VARARGS:
-        varargs = co.co_varnames[nargs]
+        varargs = None
         nargs = nargs + 1
     varkw = None
     if co.co_flags &amp; inspect.CO_VARKEYWORDS:
</failure>
			<system-out>        varargs = co.co_varnames[nargs]</system-out>
		</testcase>
		<testcase name="Mutant #2683" file="mako/compat.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -41,7 +41,7 @@
     varargs = None
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
-        nargs = nargs + 1
+        nargs = nargs - 1
     varkw = None
     if co.co_flags &amp; inspect.CO_VARKEYWORDS:
         varkw = co.co_varnames[nargs]
</failure>
			<system-out>        nargs = nargs + 1</system-out>
		</testcase>
		<testcase name="Mutant #2684" file="mako/compat.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -41,7 +41,7 @@
     varargs = None
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
-        nargs = nargs + 1
+        nargs = nargs + 2
     varkw = None
     if co.co_flags &amp; inspect.CO_VARKEYWORDS:
         varkw = co.co_varnames[nargs]
</failure>
			<system-out>        nargs = nargs + 1</system-out>
		</testcase>
		<testcase name="Mutant #2685" file="mako/compat.py" line="43">
			<system-out>        nargs = nargs + 1</system-out>
		</testcase>
		<testcase name="Mutant #2686" file="mako/compat.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -42,7 +42,7 @@
     if co.co_flags &amp; inspect.CO_VARARGS:
         varargs = co.co_varnames[nargs]
         nargs = nargs + 1
-    varkw = None
+    varkw = &quot;&quot;
     if co.co_flags &amp; inspect.CO_VARKEYWORDS:
         varkw = co.co_varnames[nargs]
 
</failure>
			<system-out>    varkw = None</system-out>
		</testcase>
		<testcase name="Mutant #2687" file="mako/compat.py" line="45">
			<system-out>    if co.co_flags &amp; inspect.CO_VARKEYWORDS:</system-out>
		</testcase>
		<testcase name="Mutant #2688" file="mako/compat.py" line="46">
			<system-out>        varkw = co.co_varnames[nargs]</system-out>
		</testcase>
		<testcase name="Mutant #2689" file="mako/compat.py" line="57">
			<system-out>    string_types = (str,)</system-out>
		</testcase>
		<testcase name="Mutant #2690" file="mako/compat.py" line="58">
			<system-out>    binary_type = bytes</system-out>
		</testcase>
		<testcase name="Mutant #2691" file="mako/compat.py" line="59">
			<system-out>    text_type = str</system-out>
		</testcase>
		<testcase name="Mutant #2692" file="mako/compat.py" line="67">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -65,7 +65,7 @@
         return s
 
     def b(s):
-        return s.encode(&quot;latin-1&quot;)
+        return s.encode(&quot;XXlatin-1XX&quot;)
 
     def octal(lit):
         return eval(&quot;0o&quot; + lit)
</failure>
			<system-out>        return s.encode(&quot;latin-1&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2693" file="mako/compat.py" line="70">
			<system-out>        return eval(&quot;0o&quot; + lit)</system-out>
		</testcase>
		<testcase name="Mutant #2694" file="mako/compat.py" line="70">
			<system-out>        return eval(&quot;0o&quot; + lit)</system-out>
		</testcase>
		<testcase name="Mutant #2695" file="mako/compat.py" line="81">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -79,7 +79,7 @@
     except:
         from StringIO import StringIO
 
-    byte_buffer = StringIO
+    byte_buffer = None
 
     from urllib import quote_plus, unquote_plus  # noqa
     from htmlentitydefs import codepoint2name, name2codepoint  # noqa
</failure>
			<system-out>    byte_buffer = StringIO</system-out>
		</testcase>
		<testcase name="Mutant #2696" file="mako/compat.py" line="86">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -84,7 +84,7 @@
     from urllib import quote_plus, unquote_plus  # noqa
     from htmlentitydefs import codepoint2name, name2codepoint  # noqa
 
-    string_types = (basestring,)  # noqa
+    string_types = None  # noqa
     binary_type = str
     text_type = unicode  # noqa
 
</failure>
			<system-out>    string_types = (basestring,)  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #2697" file="mako/compat.py" line="87">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -85,7 +85,7 @@
     from htmlentitydefs import codepoint2name, name2codepoint  # noqa
 
     string_types = (basestring,)  # noqa
-    binary_type = str
+    binary_type = None
     text_type = unicode  # noqa
 
     def u(s):
</failure>
			<system-out>    binary_type = str</system-out>
		</testcase>
		<testcase name="Mutant #2698" file="mako/compat.py" line="88">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -86,7 +86,7 @@
 
     string_types = (basestring,)  # noqa
     binary_type = str
-    text_type = unicode  # noqa
+    text_type = None  # noqa
 
     def u(s):
         return unicode(s, &quot;utf-8&quot;)  # noqa
</failure>
			<system-out>    text_type = unicode  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #2699" file="mako/compat.py" line="91">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -89,7 +89,7 @@
     text_type = unicode  # noqa
 
     def u(s):
-        return unicode(s, &quot;utf-8&quot;)  # noqa
+        return unicode(s, &quot;XXutf-8XX&quot;)  # noqa
 
     def b(s):
         return s
</failure>
			<system-out>        return unicode(s, &quot;utf-8&quot;)  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #2700" file="mako/compat.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -95,7 +95,7 @@
         return s
 
     def octal(lit):
-        return eval(&quot;0&quot; + lit)
+        return eval(&quot;XX0XX&quot; + lit)
 
 
 if py3k:
</failure>
			<system-out>        return eval(&quot;0&quot; + lit)</system-out>
		</testcase>
		<testcase name="Mutant #2701" file="mako/compat.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -95,7 +95,7 @@
         return s
 
     def octal(lit):
-        return eval(&quot;0&quot; + lit)
+        return eval(&quot;0&quot; - lit)
 
 
 if py3k:
</failure>
			<system-out>        return eval(&quot;0&quot; + lit)</system-out>
		</testcase>
		<testcase name="Mutant #2702" file="mako/compat.py" line="103">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -101,7 +101,7 @@
 if py3k:
     from importlib import machinery, util
 
-    if hasattr(util, 'module_from_spec'):
+    if hasattr(util, 'XXmodule_from_specXX'):
         # Python 3.5+
         def load_module(module_id, path):
             spec = util.spec_from_file_location(module_id, path)
</failure>
			<system-out>    if hasattr(util, 'module_from_spec'):</system-out>
		</testcase>
		<testcase name="Mutant #2703" file="mako/compat.py" line="106">
			<system-out>            spec = util.spec_from_file_location(module_id, path)</system-out>
		</testcase>
		<testcase name="Mutant #2704" file="mako/compat.py" line="107">
			<system-out>            module = util.module_from_spec(spec)</system-out>
		</testcase>
		<testcase name="Mutant #2705" file="mako/compat.py" line="112">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -110,7 +110,7 @@
             return module
     else:
         def load_module(module_id, path):
-            module = machinery.SourceFileLoader(module_id, path).load_module()
+            module = None
             del sys.modules[module_id]
             return module
 
</failure>
			<system-out>            module = machinery.SourceFileLoader(module_id, path).load_module()</system-out>
		</testcase>
		<testcase name="Mutant #2706" file="mako/compat.py" line="120">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -118,7 +118,7 @@
     import imp
 
     def load_module(module_id, path):
-        fp = open(path, &quot;rb&quot;)
+        fp = open(path, &quot;XXrbXX&quot;)
         try:
             module = imp.load_source(module_id, path, fp)
             del sys.modules[module_id]
</failure>
			<system-out>        fp = open(path, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2707" file="mako/compat.py" line="120">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -118,7 +118,7 @@
     import imp
 
     def load_module(module_id, path):
-        fp = open(path, &quot;rb&quot;)
+        fp = None
         try:
             module = imp.load_source(module_id, path, fp)
             del sys.modules[module_id]
</failure>
			<system-out>        fp = open(path, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2708" file="mako/compat.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -120,7 +120,7 @@
     def load_module(module_id, path):
         fp = open(path, &quot;rb&quot;)
         try:
-            module = imp.load_source(module_id, path, fp)
+            module = None
             del sys.modules[module_id]
             return module
         finally:
</failure>
			<system-out>            module = imp.load_source(module_id, path, fp)</system-out>
		</testcase>
		<testcase name="Mutant #2709" file="mako/compat.py" line="132">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -130,7 +130,7 @@
 if py3k:
 
     def reraise(tp, value, tb=None, cause=None):
-        if cause is not None:
+        if cause is  None:
             value.__cause__ = cause
         if value.__traceback__ is not tb:
             raise value.with_traceback(tb)
</failure>
			<system-out>        if cause is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2710" file="mako/compat.py" line="133">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -131,7 +131,7 @@
 
     def reraise(tp, value, tb=None, cause=None):
         if cause is not None:
-            value.__cause__ = cause
+            value.__cause__ = None
         if value.__traceback__ is not tb:
             raise value.with_traceback(tb)
         raise value
</failure>
			<system-out>            value.__cause__ = cause</system-out>
		</testcase>
		<testcase name="Mutant #2711" file="mako/compat.py" line="134">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -132,7 +132,7 @@
     def reraise(tp, value, tb=None, cause=None):
         if cause is not None:
             value.__cause__ = cause
-        if value.__traceback__ is not tb:
+        if value.__traceback__ is  tb:
             raise value.with_traceback(tb)
         raise value
 
</failure>
			<system-out>        if value.__traceback__ is not tb:</system-out>
		</testcase>
		<testcase name="Mutant #2712" file="mako/compat.py" line="141">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -139,7 +139,7 @@
 
 else:
     exec(
-        &quot;def reraise(tp, value, tb=None, cause=None):\n&quot;
+        &quot;XXdef reraise(tp, value, tb=None, cause=None):\nXX&quot;
         &quot;    raise tp, value, tb\n&quot;
     )
 
</failure>
			<system-out>        &quot;def reraise(tp, value, tb=None, cause=None):\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2713" file="mako/compat.py" line="142">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -140,7 +140,7 @@
 else:
     exec(
         &quot;def reraise(tp, value, tb=None, cause=None):\n&quot;
-        &quot;    raise tp, value, tb\n&quot;
+        &quot;XX    raise tp, value, tb\nXX&quot;
     )
 
 
</failure>
			<system-out>        &quot;    raise tp, value, tb\n&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2714" file="mako/compat.py" line="147">
			<system-out>    return sys.exc_info()[1]</system-out>
		</testcase>
		<testcase name="Mutant #2715" file="mako/compat.py" line="150">
			<system-out>all = all  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #2716" file="mako/compat.py" line="162">
			<failure type="failure" message="bad_survived">--- mako/compat.py
+++ mako/compat.py
@@ -160,7 +160,7 @@
 # Copyright (c) 2010-2012 Benjamin Peterson
 def with_metaclass(meta, base=object):
     &quot;&quot;&quot;Create a base class with a metaclass.&quot;&quot;&quot;
-    return meta(&quot;%sBase&quot; % meta.__name__, (base,), {})
+    return meta(&quot;XX%sBaseXX&quot; % meta.__name__, (base,), {})
 
 
 ################################################
</failure>
			<system-out>    return meta(&quot;%sBase&quot; % meta.__name__, (base,), {})</system-out>
		</testcase>
		<testcase name="Mutant #2717" file="mako/compat.py" line="162">
			<system-out>    return meta(&quot;%sBase&quot; % meta.__name__, (base,), {})</system-out>
		</testcase>
		<testcase name="Mutant #2718" file="mako/compat.py" line="173">
			<system-out>    if hasattr(func_arg, &quot;arg&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #2719" file="mako/filters.py" line="17">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -15,7 +15,7 @@
 from mako.compat import unquote_plus
 
 xml_escapes = {
-    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
+    &quot;XX&amp;XX&quot;: &quot;&amp;amp;&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
</failure>
			<system-out>    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2720" file="mako/filters.py" line="17">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -15,7 +15,7 @@
 from mako.compat import unquote_plus
 
 xml_escapes = {
-    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
+    &quot;&amp;&quot;: &quot;XX&amp;amp;XX&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
</failure>
			<system-out>    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2721" file="mako/filters.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -16,7 +16,7 @@
 
 xml_escapes = {
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
-    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
+    &quot;XX&gt;XX&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
</failure>
			<system-out>    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2722" file="mako/filters.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -16,7 +16,7 @@
 
 xml_escapes = {
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
-    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
+    &quot;&gt;&quot;: &quot;XX&amp;gt;XX&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
</failure>
			<system-out>    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2723" file="mako/filters.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -17,7 +17,7 @@
 xml_escapes = {
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
-    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
+    &quot;XX&lt;XX&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
 }
</failure>
			<system-out>    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2724" file="mako/filters.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -17,7 +17,7 @@
 xml_escapes = {
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
-    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
+    &quot;&lt;&quot;: &quot;XX&amp;lt;XX&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
 }
</failure>
			<system-out>    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2725" file="mako/filters.py" line="20">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -18,7 +18,7 @@
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
-    '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
+    'XX&quot;XX': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
 }
 
</failure>
			<system-out>    '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only</system-out>
		</testcase>
		<testcase name="Mutant #2726" file="mako/filters.py" line="20">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -18,7 +18,7 @@
     &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
-    '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
+    '&quot;': &quot;XX&amp;#34;XX&quot;,  # also &amp;quot; in html-only
     &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
 }
 
</failure>
			<system-out>    '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only</system-out>
		</testcase>
		<testcase name="Mutant #2727" file="mako/filters.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -19,7 +19,7 @@
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
-    &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
+    &quot;XX'XX&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
 }
 
 # XXX: &amp;quot; is valid in HTML and XML
</failure>
			<system-out>    &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only</system-out>
		</testcase>
		<testcase name="Mutant #2728" file="mako/filters.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -19,7 +19,7 @@
     &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
     &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
     '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
-    &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
+    &quot;'&quot;: &quot;XX&amp;#39;XX&quot;,  # also &amp;apos; in html-only
 }
 
 # XXX: &amp;quot; is valid in HTML and XML
</failure>
			<system-out>    &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only</system-out>
		</testcase>
		<testcase name="Mutant #2729" file="mako/filters.py" line="22">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -14,13 +14,7 @@
 from mako.compat import quote_plus
 from mako.compat import unquote_plus
 
-xml_escapes = {
-    &quot;&amp;&quot;: &quot;&amp;amp;&quot;,
-    &quot;&gt;&quot;: &quot;&amp;gt;&quot;,
-    &quot;&lt;&quot;: &quot;&amp;lt;&quot;,
-    '&quot;': &quot;&amp;#34;&quot;,  # also &amp;quot; in html-only
-    &quot;'&quot;: &quot;&amp;#39;&quot;,  # also &amp;apos; in html-only
-}
+xml_escapes = None
 
 # XXX: &amp;quot; is valid in HTML and XML
 #      &amp;apos; is not valid HTML, but is valid XML
</failure>
			<system-out>}</system-out>
		</testcase>
		<testcase name="Mutant #2730" file="mako/filters.py" line="30">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -28,7 +28,7 @@
 
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
-    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
+    s = s.replace(&quot;XX&amp;XX&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2731" file="mako/filters.py" line="30">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -28,7 +28,7 @@
 
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
-    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
+    s = s.replace(&quot;&amp;&quot;, &quot;XX&amp;amp;XX&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2732" file="mako/filters.py" line="30">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -28,7 +28,7 @@
 
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
-    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
+    s = None
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2733" file="mako/filters.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -29,7 +29,7 @@
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
-    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
+    s = s.replace(&quot;XX&gt;XX&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2734" file="mako/filters.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -29,7 +29,7 @@
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
-    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
+    s = s.replace(&quot;&gt;&quot;, &quot;XX&amp;gt;XX&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2735" file="mako/filters.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -29,7 +29,7 @@
 def legacy_html_escape(s):
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
-    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
+    s = None
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
</failure>
			<system-out>    s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2736" file="mako/filters.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -30,7 +30,7 @@
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
-    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
+    s = s.replace(&quot;XX&lt;XX&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
</failure>
			<system-out>    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2737" file="mako/filters.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -30,7 +30,7 @@
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
-    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
+    s = s.replace(&quot;&lt;&quot;, &quot;XX&amp;lt;XX&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
</failure>
			<system-out>    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2738" file="mako/filters.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -30,7 +30,7 @@
     &quot;&quot;&quot;legacy HTML escape for non-unicode mode.&quot;&quot;&quot;
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
-    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
+    s = None
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
</failure>
			<system-out>    s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2739" file="mako/filters.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -31,7 +31,7 @@
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
-    s = s.replace('&quot;', &quot;&amp;#34;&quot;)
+    s = s.replace('XX&quot;XX', &quot;&amp;#34;&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
 
</failure>
			<system-out>    s = s.replace('&quot;', &quot;&amp;#34;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2740" file="mako/filters.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -31,7 +31,7 @@
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
-    s = s.replace('&quot;', &quot;&amp;#34;&quot;)
+    s = s.replace('&quot;', &quot;XX&amp;#34;XX&quot;)
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
 
</failure>
			<system-out>    s = s.replace('&quot;', &quot;&amp;#34;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2741" file="mako/filters.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -31,7 +31,7 @@
     s = s.replace(&quot;&amp;&quot;, &quot;&amp;amp;&quot;)
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
-    s = s.replace('&quot;', &quot;&amp;#34;&quot;)
+    s = None
     s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
     return s
 
</failure>
			<system-out>    s = s.replace('&quot;', &quot;&amp;#34;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2742" file="mako/filters.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -32,7 +32,7 @@
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
-    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
+    s = s.replace(&quot;XX'XX&quot;, &quot;&amp;#39;&quot;)
     return s
 
 
</failure>
			<system-out>    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2743" file="mako/filters.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -32,7 +32,7 @@
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
-    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
+    s = s.replace(&quot;'&quot;, &quot;XX&amp;#39;XX&quot;)
     return s
 
 
</failure>
			<system-out>    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2744" file="mako/filters.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -32,7 +32,7 @@
     s = s.replace(&quot;&gt;&quot;, &quot;&amp;gt;&quot;)
     s = s.replace(&quot;&lt;&quot;, &quot;&amp;lt;&quot;)
     s = s.replace('&quot;', &quot;&amp;#34;&quot;)
-    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)
+    s = None
     return s
 
 
</failure>
			<system-out>    s = s.replace(&quot;'&quot;, &quot;&amp;#39;&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2745" file="mako/filters.py" line="41">
			<system-out>    html_escape = markupsafe.escape</system-out>
		</testcase>
		<testcase name="Mutant #2746" file="mako/filters.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -41,7 +41,7 @@
 
     html_escape = markupsafe.escape
 except ImportError:
-    html_escape = legacy_html_escape
+    html_escape = None
 
 
 def xml_escape(string):
</failure>
			<system-out>    html_escape = legacy_html_escape</system-out>
		</testcase>
		<testcase name="Mutant #2747" file="mako/filters.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -45,7 +45,7 @@
 
 
 def xml_escape(string):
-    return re.sub(r'([&amp;&lt;&quot;\'&gt;])', lambda m: xml_escapes[m.group()], string)
+    return re.sub(r'XX([&amp;&lt;&quot;\'&gt;])XX', lambda m: xml_escapes[m.group()], string)
 
 
 def url_escape(string):
</failure>
			<system-out>    return re.sub(r'([&amp;&lt;&quot;\'&gt;])', lambda m: xml_escapes[m.group()], string)</system-out>
		</testcase>
		<testcase name="Mutant #2748" file="mako/filters.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -45,7 +45,7 @@
 
 
 def xml_escape(string):
-    return re.sub(r'([&amp;&lt;&quot;\'&gt;])', lambda m: xml_escapes[m.group()], string)
+    return re.sub(r'([&amp;&lt;&quot;\'&gt;])', lambda m: None, string)
 
 
 def url_escape(string):
</failure>
			<system-out>    return re.sub(r'([&amp;&lt;&quot;\'&gt;])', lambda m: xml_escapes[m.group()], string)</system-out>
		</testcase>
		<testcase name="Mutant #2749" file="mako/filters.py" line="52">
			<system-out>    string = string.encode(&quot;utf8&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2750" file="mako/filters.py" line="52">
			<system-out>    string = string.encode(&quot;utf8&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2751" file="mako/filters.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -60,7 +60,7 @@
 
 
 def url_unescape(string):
-    text = unquote_plus(string)
+    text = None
     if not is_ascii_str(text):
         text = text.decode(&quot;utf8&quot;)
     return text
</failure>
			<system-out>    text = unquote_plus(string)</system-out>
		</testcase>
		<testcase name="Mutant #2752" file="mako/filters.py" line="63">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -61,7 +61,7 @@
 
 def url_unescape(string):
     text = unquote_plus(string)
-    if not is_ascii_str(text):
+    if  is_ascii_str(text):
         text = text.decode(&quot;utf8&quot;)
     return text
 
</failure>
			<system-out>    if not is_ascii_str(text):</system-out>
		</testcase>
		<testcase name="Mutant #2753" file="mako/filters.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -62,7 +62,7 @@
 def url_unescape(string):
     text = unquote_plus(string)
     if not is_ascii_str(text):
-        text = text.decode(&quot;utf8&quot;)
+        text = text.decode(&quot;XXutf8XX&quot;)
     return text
 
 
</failure>
			<system-out>        text = text.decode(&quot;utf8&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2754" file="mako/filters.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -62,7 +62,7 @@
 def url_unescape(string):
     text = unquote_plus(string)
     if not is_ascii_str(text):
-        text = text.decode(&quot;utf8&quot;)
+        text = None
     return text
 
 
</failure>
			<system-out>        text = text.decode(&quot;utf8&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2755" file="mako/filters.py" line="77">
			<system-out>            elif not isinstance(x, compat.binary_type):</system-out>
		</testcase>
		<testcase name="Mutant #2756" file="mako/filters.py" line="85">
			<system-out>decode = Decode()</system-out>
		</testcase>
		<testcase name="Mutant #2757" file="mako/filters.py" line="88">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -86,7 +86,7 @@
 decode = Decode()
 
 
-_ASCII_re = re.compile(r&quot;\A[\x00-\x7f]*\Z&quot;)
+_ASCII_re = re.compile(r&quot;XX\A[\x00-\x7f]*\ZXX&quot;)
 
 
 def is_ascii_str(text):
</failure>
			<system-out>_ASCII_re = re.compile(r&quot;\A[\x00-\x7f]*\Z&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2758" file="mako/filters.py" line="88">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -86,7 +86,7 @@
 decode = Decode()
 
 
-_ASCII_re = re.compile(r&quot;\A[\x00-\x7f]*\Z&quot;)
+_ASCII_re = None
 
 
 def is_ascii_str(text):
</failure>
			<system-out>_ASCII_re = re.compile(r&quot;\A[\x00-\x7f]*\Z&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2759" file="mako/filters.py" line="92">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -90,7 +90,7 @@
 
 
 def is_ascii_str(text):
-    return isinstance(text, str) and _ASCII_re.match(text)
+    return isinstance(text, str) or _ASCII_re.match(text)
 
 
 ################################################################
</failure>
			<system-out>    return isinstance(text, str) and _ASCII_re.match(text)</system-out>
		</testcase>
		<testcase name="Mutant #2760" file="mako/filters.py" line="102">
			<system-out>                (c, compat.text_type(&quot;&amp;%s;&quot; % n))</system-out>
		</testcase>
		<testcase name="Mutant #2761" file="mako/filters.py" line="102">
			<system-out>                (c, compat.text_type(&quot;&amp;%s;&quot; % n))</system-out>
		</testcase>
		<testcase name="Mutant #2762" file="mako/filters.py" line="105">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #2763" file="mako/filters.py" line="106">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -104,7 +104,7 @@
                 for c, n in codepoint2name.items()
             ]
         )
-        self.name2codepoint = name2codepoint
+        self.name2codepoint = None
 
     def escape_entities(self, text):
         &quot;&quot;&quot;Replace characters with their character entity references.
</failure>
			<system-out>        self.name2codepoint = name2codepoint</system-out>
		</testcase>
		<testcase name="Mutant #2764" file="mako/filters.py" line="116">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -114,7 +114,7 @@
         return compat.text_type(text).translate(self.codepoint2entity)
 
     def __escape(self, m):
-        codepoint = ord(m.group())
+        codepoint = None
         try:
             return self.codepoint2entity[codepoint]
         except (KeyError, IndexError):
</failure>
			<system-out>        codepoint = ord(m.group())</system-out>
		</testcase>
		<testcase name="Mutant #2765" file="mako/filters.py" line="120">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -118,7 +118,7 @@
         try:
             return self.codepoint2entity[codepoint]
         except (KeyError, IndexError):
-            return &quot;&amp;#x%X;&quot; % codepoint
+            return &quot;XX&amp;#x%X;XX&quot; % codepoint
 
     __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')
 
</failure>
			<system-out>            return &quot;&amp;#x%X;&quot; % codepoint</system-out>
		</testcase>
		<testcase name="Mutant #2766" file="mako/filters.py" line="120">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -118,7 +118,7 @@
         try:
             return self.codepoint2entity[codepoint]
         except (KeyError, IndexError):
-            return &quot;&amp;#x%X;&quot; % codepoint
+            return &quot;&amp;#x%X;&quot; / codepoint
 
     __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')
 
</failure>
			<system-out>            return &quot;&amp;#x%X;&quot; % codepoint</system-out>
		</testcase>
		<testcase name="Mutant #2767" file="mako/filters.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -120,7 +120,7 @@
         except (KeyError, IndexError):
             return &quot;&amp;#x%X;&quot; % codepoint
 
-    __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')
+    __escapable = re.compile(r'XX[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]XX')
 
     def escape(self, text):
         &quot;&quot;&quot;Replace characters with their character references.
</failure>
			<system-out>    __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')</system-out>
		</testcase>
		<testcase name="Mutant #2768" file="mako/filters.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -120,7 +120,7 @@
         except (KeyError, IndexError):
             return &quot;&amp;#x%X;&quot; % codepoint
 
-    __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')
+    __escapable = None
 
     def escape(self, text):
         &quot;&quot;&quot;Replace characters with their character references.
</failure>
			<system-out>    __escapable = re.compile(r'[&quot;&amp;&lt;&gt;]|[^\x00-\x7f]')</system-out>
		</testcase>
		<testcase name="Mutant #2769" file="mako/filters.py" line="135">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -133,7 +133,7 @@
         &quot;&quot;&quot;
         return self.__escapable.sub(
             self.__escape, compat.text_type(text)
-        ).encode(&quot;ascii&quot;)
+        ).encode(&quot;XXasciiXX&quot;)
 
     # XXX: This regexp will not match all valid XML entity names__.
     # (It punts on details involving involving CombiningChars and Extenders.)
</failure>
			<system-out>        ).encode(&quot;ascii&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2770" file="mako/filters.py" line="147">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -145,7 +145,7 @@
                                           | \#x([\da-f]+)
                                           | ( (?!\d) [:\w] [-.:\w]+ )
                                           ) ;&quot;&quot;&quot;,
-        re.X | re.UNICODE,
+        re.X &amp; re.UNICODE,
     )
 
     def __unescape(self, m):
</failure>
			<system-out>        re.X | re.UNICODE,</system-out>
		</testcase>
		<testcase name="Mutant #2771" file="mako/filters.py" line="148">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -139,14 +139,7 @@
     # (It punts on details involving involving CombiningChars and Extenders.)
     #
     # .. __: http://www.w3.org/TR/2000/REC-xml-20001006#NT-EntityRef
-    __characterrefs = re.compile(
-        r&quot;&quot;&quot;&amp; (?:
-                                          \#(\d+)
-                                          | \#x([\da-f]+)
-                                          | ( (?!\d) [:\w] [-.:\w]+ )
-                                          ) ;&quot;&quot;&quot;,
-        re.X | re.UNICODE,
-    )
+    __characterrefs = None
 
     def __unescape(self, m):
         dval, hval, name = m.groups()
</failure>
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #2772" file="mako/filters.py" line="151">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -149,7 +149,7 @@
     )
 
     def __unescape(self, m):
-        dval, hval, name = m.groups()
+        dval, hval, name = None
         if dval:
             codepoint = int(dval)
         elif hval:
</failure>
			<system-out>        dval, hval, name = m.groups()</system-out>
		</testcase>
		<testcase name="Mutant #2773" file="mako/filters.py" line="153">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -151,7 +151,7 @@
     def __unescape(self, m):
         dval, hval, name = m.groups()
         if dval:
-            codepoint = int(dval)
+            codepoint = None
         elif hval:
             codepoint = int(hval, 16)
         else:
</failure>
			<system-out>            codepoint = int(dval)</system-out>
		</testcase>
		<testcase name="Mutant #2774" file="mako/filters.py" line="155">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -153,7 +153,7 @@
         if dval:
             codepoint = int(dval)
         elif hval:
-            codepoint = int(hval, 16)
+            codepoint = int(hval, 17)
         else:
             codepoint = self.name2codepoint.get(name, 0xFFFD)
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
</failure>
			<system-out>            codepoint = int(hval, 16)</system-out>
		</testcase>
		<testcase name="Mutant #2775" file="mako/filters.py" line="155">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -153,7 +153,7 @@
         if dval:
             codepoint = int(dval)
         elif hval:
-            codepoint = int(hval, 16)
+            codepoint = None
         else:
             codepoint = self.name2codepoint.get(name, 0xFFFD)
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
</failure>
			<system-out>            codepoint = int(hval, 16)</system-out>
		</testcase>
		<testcase name="Mutant #2776" file="mako/filters.py" line="157">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -155,7 +155,7 @@
         elif hval:
             codepoint = int(hval, 16)
         else:
-            codepoint = self.name2codepoint.get(name, 0xFFFD)
+            codepoint = self.name2codepoint.get(name, 65534)
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
         if codepoint &lt; 128:
             return chr(codepoint)
</failure>
			<system-out>            codepoint = self.name2codepoint.get(name, 0xFFFD)</system-out>
		</testcase>
		<testcase name="Mutant #2777" file="mako/filters.py" line="157">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -155,7 +155,7 @@
         elif hval:
             codepoint = int(hval, 16)
         else:
-            codepoint = self.name2codepoint.get(name, 0xFFFD)
+            codepoint = None
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
         if codepoint &lt; 128:
             return chr(codepoint)
</failure>
			<system-out>            codepoint = self.name2codepoint.get(name, 0xFFFD)</system-out>
		</testcase>
		<testcase name="Mutant #2778" file="mako/filters.py" line="159">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -157,7 +157,7 @@
         else:
             codepoint = self.name2codepoint.get(name, 0xFFFD)
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
-        if codepoint &lt; 128:
+        if codepoint &lt;= 128:
             return chr(codepoint)
         return chr(codepoint)
 
</failure>
			<system-out>        if codepoint &lt; 128:</system-out>
		</testcase>
		<testcase name="Mutant #2779" file="mako/filters.py" line="159">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -157,7 +157,7 @@
         else:
             codepoint = self.name2codepoint.get(name, 0xFFFD)
             # U+FFFD = &quot;REPLACEMENT CHARACTER&quot;
-        if codepoint &lt; 128:
+        if codepoint &lt; 129:
             return chr(codepoint)
         return chr(codepoint)
 
</failure>
			<system-out>        if codepoint &lt; 128:</system-out>
		</testcase>
		<testcase name="Mutant #2780" file="mako/filters.py" line="172">
			<system-out>_html_entities_escaper = XMLEntityEscaper(codepoint2name, name2codepoint)</system-out>
		</testcase>
		<testcase name="Mutant #2781" file="mako/filters.py" line="174">
			<system-out>html_entities_escape = _html_entities_escaper.escape_entities</system-out>
		</testcase>
		<testcase name="Mutant #2782" file="mako/filters.py" line="175">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -173,7 +173,7 @@
 _html_entities_escaper = XMLEntityEscaper(codepoint2name, name2codepoint)
 
 html_entities_escape = _html_entities_escaper.escape_entities
-html_entities_unescape = _html_entities_escaper.unescape
+html_entities_unescape = None
 
 
 def htmlentityreplace_errors(ex):
</failure>
			<system-out>html_entities_unescape = _html_entities_escaper.unescape</system-out>
		</testcase>
		<testcase name="Mutant #2783" file="mako/filters.py" line="190">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -188,7 +188,7 @@
     &quot;&quot;&quot;
     if isinstance(ex, UnicodeEncodeError):
         # Handle encoding errors
-        bad_text = ex.object[ex.start : ex.end]
+        bad_text = None
         text = _html_entities_escaper.escape(bad_text)
         return (compat.text_type(text), ex.end)
     raise ex
</failure>
			<system-out>        bad_text = ex.object[ex.start : ex.end]</system-out>
		</testcase>
		<testcase name="Mutant #2784" file="mako/filters.py" line="191">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -189,7 +189,7 @@
     if isinstance(ex, UnicodeEncodeError):
         # Handle encoding errors
         bad_text = ex.object[ex.start : ex.end]
-        text = _html_entities_escaper.escape(bad_text)
+        text = None
         return (compat.text_type(text), ex.end)
     raise ex
 
</failure>
			<system-out>        text = _html_entities_escaper.escape(bad_text)</system-out>
		</testcase>
		<testcase name="Mutant #2785" file="mako/filters.py" line="196">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -194,7 +194,7 @@
     raise ex
 
 
-codecs.register_error(&quot;htmlentityreplace&quot;, htmlentityreplace_errors)
+codecs.register_error(&quot;XXhtmlentityreplaceXX&quot;, htmlentityreplace_errors)
 
 
 # TODO: options to make this dynamic per-compilation will be added in a later
</failure>
			<system-out>codecs.register_error(&quot;htmlentityreplace&quot;, htmlentityreplace_errors)</system-out>
		</testcase>
		<testcase name="Mutant #2786" file="mako/filters.py" line="202">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -200,7 +200,7 @@
 # TODO: options to make this dynamic per-compilation will be added in a later
 # release
 DEFAULT_ESCAPES = {
-    &quot;x&quot;: &quot;filters.xml_escape&quot;,
+    &quot;XXxXX&quot;: &quot;filters.xml_escape&quot;,
     &quot;h&quot;: &quot;filters.html_escape&quot;,
     &quot;u&quot;: &quot;filters.url_escape&quot;,
     &quot;trim&quot;: &quot;filters.trim&quot;,
</failure>
			<system-out>    &quot;x&quot;: &quot;filters.xml_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2787" file="mako/filters.py" line="202">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -200,7 +200,7 @@
 # TODO: options to make this dynamic per-compilation will be added in a later
 # release
 DEFAULT_ESCAPES = {
-    &quot;x&quot;: &quot;filters.xml_escape&quot;,
+    &quot;x&quot;: &quot;XXfilters.xml_escapeXX&quot;,
     &quot;h&quot;: &quot;filters.html_escape&quot;,
     &quot;u&quot;: &quot;filters.url_escape&quot;,
     &quot;trim&quot;: &quot;filters.trim&quot;,
</failure>
			<system-out>    &quot;x&quot;: &quot;filters.xml_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2788" file="mako/filters.py" line="203">
			<system-out>    &quot;h&quot;: &quot;filters.html_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2789" file="mako/filters.py" line="203">
			<system-out>    &quot;h&quot;: &quot;filters.html_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2790" file="mako/filters.py" line="204">
			<system-out>    &quot;u&quot;: &quot;filters.url_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2791" file="mako/filters.py" line="204">
			<system-out>    &quot;u&quot;: &quot;filters.url_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2792" file="mako/filters.py" line="205">
			<system-out>    &quot;trim&quot;: &quot;filters.trim&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2793" file="mako/filters.py" line="205">
			<system-out>    &quot;trim&quot;: &quot;filters.trim&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2794" file="mako/filters.py" line="206">
			<system-out>    &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2795" file="mako/filters.py" line="206">
			<system-out>    &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2796" file="mako/filters.py" line="207">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -205,7 +205,7 @@
     &quot;u&quot;: &quot;filters.url_escape&quot;,
     &quot;trim&quot;: &quot;filters.trim&quot;,
     &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,
-    &quot;unicode&quot;: &quot;unicode&quot;,
+    &quot;XXunicodeXX&quot;: &quot;unicode&quot;,
     &quot;decode&quot;: &quot;decode&quot;,
     &quot;str&quot;: &quot;str&quot;,
     &quot;n&quot;: &quot;n&quot;,
</failure>
			<system-out>    &quot;unicode&quot;: &quot;unicode&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2797" file="mako/filters.py" line="207">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -205,7 +205,7 @@
     &quot;u&quot;: &quot;filters.url_escape&quot;,
     &quot;trim&quot;: &quot;filters.trim&quot;,
     &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,
-    &quot;unicode&quot;: &quot;unicode&quot;,
+    &quot;unicode&quot;: &quot;XXunicodeXX&quot;,
     &quot;decode&quot;: &quot;decode&quot;,
     &quot;str&quot;: &quot;str&quot;,
     &quot;n&quot;: &quot;n&quot;,
</failure>
			<system-out>    &quot;unicode&quot;: &quot;unicode&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2798" file="mako/filters.py" line="208">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -206,7 +206,7 @@
     &quot;trim&quot;: &quot;filters.trim&quot;,
     &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,
     &quot;unicode&quot;: &quot;unicode&quot;,
-    &quot;decode&quot;: &quot;decode&quot;,
+    &quot;XXdecodeXX&quot;: &quot;decode&quot;,
     &quot;str&quot;: &quot;str&quot;,
     &quot;n&quot;: &quot;n&quot;,
 }
</failure>
			<system-out>    &quot;decode&quot;: &quot;decode&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2799" file="mako/filters.py" line="208">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -206,7 +206,7 @@
     &quot;trim&quot;: &quot;filters.trim&quot;,
     &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,
     &quot;unicode&quot;: &quot;unicode&quot;,
-    &quot;decode&quot;: &quot;decode&quot;,
+    &quot;decode&quot;: &quot;XXdecodeXX&quot;,
     &quot;str&quot;: &quot;str&quot;,
     &quot;n&quot;: &quot;n&quot;,
 }
</failure>
			<system-out>    &quot;decode&quot;: &quot;decode&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2800" file="mako/filters.py" line="209">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -207,7 +207,7 @@
     &quot;entity&quot;: &quot;filters.html_entities_escape&quot;,
     &quot;unicode&quot;: &quot;unicode&quot;,
     &quot;decode&quot;: &quot;decode&quot;,
-    &quot;str&quot;: &quot;str&quot;,
+    &quot;XXstrXX&quot;: &quot;str&quot;,
     &quot;n&quot;: &quot;n&quot;,
 }
 
</failure>
			<system-out>    &quot;str&quot;: &quot;str&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2801" file="mako/filters.py" line="209">
			<system-out>    &quot;str&quot;: &quot;str&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2802" file="mako/filters.py" line="210">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -208,7 +208,7 @@
     &quot;unicode&quot;: &quot;unicode&quot;,
     &quot;decode&quot;: &quot;decode&quot;,
     &quot;str&quot;: &quot;str&quot;,
-    &quot;n&quot;: &quot;n&quot;,
+    &quot;XXnXX&quot;: &quot;n&quot;,
 }
 
 if compat.py3k:
</failure>
			<system-out>    &quot;n&quot;: &quot;n&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2803" file="mako/filters.py" line="210">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -208,7 +208,7 @@
     &quot;unicode&quot;: &quot;unicode&quot;,
     &quot;decode&quot;: &quot;decode&quot;,
     &quot;str&quot;: &quot;str&quot;,
-    &quot;n&quot;: &quot;n&quot;,
+    &quot;n&quot;: &quot;XXnXX&quot;,
 }
 
 if compat.py3k:
</failure>
			<system-out>    &quot;n&quot;: &quot;n&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2804" file="mako/filters.py" line="211">
			<system-out>}</system-out>
		</testcase>
		<testcase name="Mutant #2805" file="mako/filters.py" line="214">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -212,7 +212,7 @@
 }
 
 if compat.py3k:
-    DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})
+    DEFAULT_ESCAPES.update({&quot;XXunicodeXX&quot;: &quot;str&quot;})
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
 NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
</failure>
			<system-out>    DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})</system-out>
		</testcase>
		<testcase name="Mutant #2806" file="mako/filters.py" line="214">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -212,7 +212,7 @@
 }
 
 if compat.py3k:
-    DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})
+    DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;XXstrXX&quot;})
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
 NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
</failure>
			<system-out>    DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})</system-out>
		</testcase>
		<testcase name="Mutant #2807" file="mako/filters.py" line="216">
			<system-out>NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()</system-out>
		</testcase>
		<testcase name="Mutant #2808" file="mako/filters.py" line="217">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -215,6 +215,6 @@
     DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
-NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
+NON_UNICODE_ESCAPES[&quot;XXhXX&quot;] = &quot;filters.legacy_html_escape&quot;
 NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
 
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2809" file="mako/filters.py" line="217">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -215,6 +215,6 @@
     DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
-NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
+NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;XXfilters.legacy_html_escapeXX&quot;
 NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
 
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2810" file="mako/filters.py" line="217">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -215,6 +215,6 @@
     DEFAULT_ESCAPES.update({&quot;unicode&quot;: &quot;str&quot;})
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
-NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
+NON_UNICODE_ESCAPES[&quot;h&quot;] = None
 NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
 
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2811" file="mako/filters.py" line="218">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -216,5 +216,5 @@
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
 NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
-NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
-
+NON_UNICODE_ESCAPES[&quot;XXuXX&quot;] = &quot;filters.legacy_url_escape&quot;
+
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2812" file="mako/filters.py" line="218">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -216,5 +216,5 @@
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
 NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
-NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
-
+NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;XXfilters.legacy_url_escapeXX&quot;
+
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2813" file="mako/filters.py" line="218">
			<failure type="failure" message="bad_survived">--- mako/filters.py
+++ mako/filters.py
@@ -216,5 +216,5 @@
 
 NON_UNICODE_ESCAPES = DEFAULT_ESCAPES.copy()
 NON_UNICODE_ESCAPES[&quot;h&quot;] = &quot;filters.legacy_html_escape&quot;
-NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;
-
+NON_UNICODE_ESCAPES[&quot;u&quot;] = None
+
</failure>
			<system-out>NON_UNICODE_ESCAPES[&quot;u&quot;] = &quot;filters.legacy_url_escape&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2814" file="mako/template.py" line="236">
			<system-out>    lexer_cls = Lexer</system-out>
		</testcase>
		<testcase name="Mutant #2815" file="mako/template.py" line="243">
			<system-out>        format_exceptions=False,</system-out>
		</testcase>
		<testcase name="Mutant #2816" file="mako/template.py" line="247">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -245,7 +245,7 @@
         error_handler=None,
         lookup=None,
         output_encoding=None,
-        encoding_errors=&quot;strict&quot;,
+        encoding_errors=&quot;XXstrictXX&quot;,
         module_directory=None,
         cache_args=None,
         cache_impl=&quot;beaker&quot;,
</failure>
			<system-out>        encoding_errors=&quot;strict&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2817" file="mako/template.py" line="250">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -248,7 +248,7 @@
         encoding_errors=&quot;strict&quot;,
         module_directory=None,
         cache_args=None,
-        cache_impl=&quot;beaker&quot;,
+        cache_impl=&quot;XXbeakerXX&quot;,
         cache_enabled=True,
         cache_type=None,
         cache_dir=None,
</failure>
			<system-out>        cache_impl=&quot;beaker&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2818" file="mako/template.py" line="251">
			<system-out>        cache_enabled=True,</system-out>
		</testcase>
		<testcase name="Mutant #2819" file="mako/template.py" line="257">
			<system-out>        disable_unicode=False,</system-out>
		</testcase>
		<testcase name="Mutant #2820" file="mako/template.py" line="259">
			<system-out>        bytestring_passthrough=False,</system-out>
		</testcase>
		<testcase name="Mutant #2821" file="mako/template.py" line="262">
			<system-out>        strict_undefined=False,</system-out>
		</testcase>
		<testcase name="Mutant #2822" file="mako/template.py" line="265">
			<system-out>        enable_loop=True,</system-out>
		</testcase>
		<testcase name="Mutant #2823" file="mako/template.py" line="271">
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2824" file="mako/template.py" line="271">
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2825" file="mako/template.py" line="271">
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, uri)</system-out>
		</testcase>
		<testcase name="Mutant #2826" file="mako/template.py" line="272">
			<system-out>            self.uri = uri</system-out>
		</testcase>
		<testcase name="Mutant #2827" file="mako/template.py" line="274">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -272,7 +272,7 @@
             self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, uri)
             self.uri = uri
         elif filename:
-            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, filename)
+            self.module_id = re.sub(r&quot;XX\WXX&quot;, &quot;_&quot;, filename)
             drive, path = os.path.splitdrive(filename)
             path = os.path.normpath(path).replace(os.path.sep, &quot;/&quot;)
             self.uri = path
</failure>
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2828" file="mako/template.py" line="274">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -272,7 +272,7 @@
             self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, uri)
             self.uri = uri
         elif filename:
-            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, filename)
+            self.module_id = re.sub(r&quot;\W&quot;, &quot;XX_XX&quot;, filename)
             drive, path = os.path.splitdrive(filename)
             path = os.path.normpath(path).replace(os.path.sep, &quot;/&quot;)
             self.uri = path
</failure>
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2829" file="mako/template.py" line="274">
			<system-out>            self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2830" file="mako/template.py" line="275">
			<system-out>            drive, path = os.path.splitdrive(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2831" file="mako/template.py" line="276">
			<system-out>            path = os.path.normpath(path).replace(os.path.sep, &quot;/&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2832" file="mako/template.py" line="276">
			<system-out>            path = os.path.normpath(path).replace(os.path.sep, &quot;/&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #2833" file="mako/template.py" line="277">
			<system-out>            self.uri = path</system-out>
		</testcase>
		<testcase name="Mutant #2834" file="mako/template.py" line="279">
			<system-out>            self.module_id = &quot;memory:&quot; + hex(id(self))</system-out>
		</testcase>
		<testcase name="Mutant #2835" file="mako/template.py" line="279">
			<system-out>            self.module_id = &quot;memory:&quot; + hex(id(self))</system-out>
		</testcase>
		<testcase name="Mutant #2836" file="mako/template.py" line="279">
			<system-out>            self.module_id = &quot;memory:&quot; + hex(id(self))</system-out>
		</testcase>
		<testcase name="Mutant #2837" file="mako/template.py" line="280">
			<system-out>            self.uri = self.module_id</system-out>
		</testcase>
		<testcase name="Mutant #2838" file="mako/template.py" line="282">
			<system-out>        u_norm = self.uri</system-out>
		</testcase>
		<testcase name="Mutant #2839" file="mako/template.py" line="283">
			<system-out>        if u_norm.startswith(&quot;/&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #2840" file="mako/template.py" line="284">
			<system-out>            u_norm = u_norm[1:]</system-out>
		</testcase>
		<testcase name="Mutant #2841" file="mako/template.py" line="284">
			<system-out>            u_norm = u_norm[1:]</system-out>
		</testcase>
		<testcase name="Mutant #2842" file="mako/template.py" line="285">
			<system-out>        u_norm = os.path.normpath(u_norm)</system-out>
		</testcase>
		<testcase name="Mutant #2843" file="mako/template.py" line="286">
			<system-out>        if u_norm.startswith(&quot;..&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #2844" file="mako/template.py" line="288">
			<system-out>                'Template uri &quot;%s&quot; is invalid - '</system-out>
		</testcase>
		<testcase name="Mutant #2845" file="mako/template.py" line="289">
			<system-out>                &quot;it cannot be relative outside &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2846" file="mako/template.py" line="290">
			<system-out>                &quot;of the root path.&quot; % self.uri</system-out>
		</testcase>
		<testcase name="Mutant #2847" file="mako/template.py" line="290">
			<system-out>                &quot;of the root path.&quot; % self.uri</system-out>
		</testcase>
		<testcase name="Mutant #2848" file="mako/template.py" line="293">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -291,7 +291,7 @@
                 &quot;of the root path.&quot; % self.uri
             )
 
-        self.input_encoding = input_encoding
+        self.input_encoding = None
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
</failure>
			<system-out>        self.input_encoding = input_encoding</system-out>
		</testcase>
		<testcase name="Mutant #2849" file="mako/template.py" line="294">
			<system-out>        self.output_encoding = output_encoding</system-out>
		</testcase>
		<testcase name="Mutant #2850" file="mako/template.py" line="295">
			<system-out>        self.encoding_errors = encoding_errors</system-out>
		</testcase>
		<testcase name="Mutant #2851" file="mako/template.py" line="296">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -294,7 +294,7 @@
         self.input_encoding = input_encoding
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
-        self.disable_unicode = disable_unicode
+        self.disable_unicode = None
         self.bytestring_passthrough = bytestring_passthrough or disable_unicode
         self.enable_loop = enable_loop
         self.strict_undefined = strict_undefined
</failure>
			<system-out>        self.disable_unicode = disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2852" file="mako/template.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -295,7 +295,7 @@
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
-        self.bytestring_passthrough = bytestring_passthrough or disable_unicode
+        self.bytestring_passthrough = bytestring_passthrough and disable_unicode
         self.enable_loop = enable_loop
         self.strict_undefined = strict_undefined
         self.module_writer = module_writer
</failure>
			<system-out>        self.bytestring_passthrough = bytestring_passthrough or disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2853" file="mako/template.py" line="297">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -295,7 +295,7 @@
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
-        self.bytestring_passthrough = bytestring_passthrough or disable_unicode
+        self.bytestring_passthrough = None
         self.enable_loop = enable_loop
         self.strict_undefined = strict_undefined
         self.module_writer = module_writer
</failure>
			<system-out>        self.bytestring_passthrough = bytestring_passthrough or disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2854" file="mako/template.py" line="298">
			<system-out>        self.enable_loop = enable_loop</system-out>
		</testcase>
		<testcase name="Mutant #2855" file="mako/template.py" line="299">
			<system-out>        self.strict_undefined = strict_undefined</system-out>
		</testcase>
		<testcase name="Mutant #2856" file="mako/template.py" line="300">
			<system-out>        self.module_writer = module_writer</system-out>
		</testcase>
		<testcase name="Mutant #2857" file="mako/template.py" line="302">
			<system-out>        if compat.py3k and disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #2858" file="mako/template.py" line="304">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -302,7 +302,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;XXMako for Python 3 does not XX&quot; &quot;support disabling Unicode&quot;
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2859" file="mako/template.py" line="304">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -302,7 +302,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;Mako for Python 3 does not &quot; &quot;XXsupport disabling UnicodeXX&quot;
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2860" file="mako/template.py" line="306">
			<system-out>        elif output_encoding and disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #2861" file="mako/template.py" line="308">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -306,7 +306,7 @@
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;output_encoding must be set to &quot;
+                &quot;XXoutput_encoding must be set to XX&quot;
                 &quot;None when disable_unicode is used.&quot;
             )
         if default_filters is None:
</failure>
			<system-out>                &quot;output_encoding must be set to &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2862" file="mako/template.py" line="309">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -307,7 +307,7 @@
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
                 &quot;output_encoding must be set to &quot;
-                &quot;None when disable_unicode is used.&quot;
+                &quot;XXNone when disable_unicode is used.XX&quot;
             )
         if default_filters is None:
             if compat.py3k or self.disable_unicode:
</failure>
			<system-out>                &quot;None when disable_unicode is used.&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2863" file="mako/template.py" line="311">
			<system-out>        if default_filters is None:</system-out>
		</testcase>
		<testcase name="Mutant #2864" file="mako/template.py" line="312">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -310,7 +310,7 @@
                 &quot;None when disable_unicode is used.&quot;
             )
         if default_filters is None:
-            if compat.py3k or self.disable_unicode:
+            if compat.py3k and self.disable_unicode:
                 self.default_filters = [&quot;str&quot;]
             else:
                 self.default_filters = [&quot;unicode&quot;]
</failure>
			<system-out>            if compat.py3k or self.disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #2865" file="mako/template.py" line="313">
			<system-out>                self.default_filters = [&quot;str&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2866" file="mako/template.py" line="313">
			<system-out>                self.default_filters = [&quot;str&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2867" file="mako/template.py" line="315">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -313,7 +313,7 @@
             if compat.py3k or self.disable_unicode:
                 self.default_filters = [&quot;str&quot;]
             else:
-                self.default_filters = [&quot;unicode&quot;]
+                self.default_filters = [&quot;XXunicodeXX&quot;]
         else:
             self.default_filters = default_filters
         self.buffer_filters = buffer_filters
</failure>
			<system-out>                self.default_filters = [&quot;unicode&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2868" file="mako/template.py" line="315">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -313,7 +313,7 @@
             if compat.py3k or self.disable_unicode:
                 self.default_filters = [&quot;str&quot;]
             else:
-                self.default_filters = [&quot;unicode&quot;]
+                self.default_filters = None
         else:
             self.default_filters = default_filters
         self.buffer_filters = buffer_filters
</failure>
			<system-out>                self.default_filters = [&quot;unicode&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2869" file="mako/template.py" line="317">
			<system-out>            self.default_filters = default_filters</system-out>
		</testcase>
		<testcase name="Mutant #2870" file="mako/template.py" line="318">
			<system-out>        self.buffer_filters = buffer_filters</system-out>
		</testcase>
		<testcase name="Mutant #2871" file="mako/template.py" line="320">
			<system-out>        self.imports = imports</system-out>
		</testcase>
		<testcase name="Mutant #2872" file="mako/template.py" line="321">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -319,7 +319,7 @@
         self.buffer_filters = buffer_filters
 
         self.imports = imports
-        self.future_imports = future_imports
+        self.future_imports = None
         self.preprocessor = preprocessor
 
         if lexer_cls is not None:
</failure>
			<system-out>        self.future_imports = future_imports</system-out>
		</testcase>
		<testcase name="Mutant #2873" file="mako/template.py" line="322">
			<system-out>        self.preprocessor = preprocessor</system-out>
		</testcase>
		<testcase name="Mutant #2874" file="mako/template.py" line="324">
			<system-out>        if lexer_cls is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2875" file="mako/template.py" line="325">
			<system-out>            self.lexer_cls = lexer_cls</system-out>
		</testcase>
		<testcase name="Mutant #2876" file="mako/template.py" line="328">
			<system-out>        if text is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2877" file="mako/template.py" line="329">
			<system-out>            (code, module) = _compile_text(self, text, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2878" file="mako/template.py" line="330">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -328,7 +328,7 @@
         # if plain text, compile code in memory only
         if text is not None:
             (code, module) = _compile_text(self, text, filename)
-            self._code = code
+            self._code = None
             self._source = text
             ModuleInfo(module, None, self, filename, code, text, uri)
         elif filename is not None:
</failure>
			<system-out>            self._code = code</system-out>
		</testcase>
		<testcase name="Mutant #2879" file="mako/template.py" line="331">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -329,7 +329,7 @@
         if text is not None:
             (code, module) = _compile_text(self, text, filename)
             self._code = code
-            self._source = text
+            self._source = None
             ModuleInfo(module, None, self, filename, code, text, uri)
         elif filename is not None:
             # if template filename and a module directory, load
</failure>
			<system-out>            self._source = text</system-out>
		</testcase>
		<testcase name="Mutant #2880" file="mako/template.py" line="333">
			<system-out>        elif filename is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2881" file="mako/template.py" line="336">
			<system-out>            if module_filename is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2882" file="mako/template.py" line="337">
			<system-out>                path = module_filename</system-out>
		</testcase>
		<testcase name="Mutant #2883" file="mako/template.py" line="338">
			<system-out>            elif module_directory is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2884" file="mako/template.py" line="341">
			<system-out>                        os.path.normpath(module_directory), u_norm + &quot;.py&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2885" file="mako/template.py" line="341">
			<system-out>                        os.path.normpath(module_directory), u_norm + &quot;.py&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2886" file="mako/template.py" line="343">
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #2887" file="mako/template.py" line="345">
			<system-out>                path = None</system-out>
		</testcase>
		<testcase name="Mutant #2888" file="mako/template.py" line="346">
			<system-out>            module = self._compile_from_file(path, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2889" file="mako/template.py" line="349">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -347,7 +347,7 @@
             module = self._compile_from_file(path, filename)
         else:
             raise exceptions.RuntimeException(
-                &quot;Template requires text or filename&quot;
+                &quot;XXTemplate requires text or filenameXX&quot;
             )
 
         self.module = module
</failure>
			<system-out>                &quot;Template requires text or filename&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2890" file="mako/template.py" line="352">
			<system-out>        self.module = module</system-out>
		</testcase>
		<testcase name="Mutant #2891" file="mako/template.py" line="353">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -351,7 +351,7 @@
             )
 
         self.module = module
-        self.filename = filename
+        self.filename = None
         self.callable_ = self.module.render_body
         self.format_exceptions = format_exceptions
         self.error_handler = error_handler
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #2892" file="mako/template.py" line="354">
			<system-out>        self.callable_ = self.module.render_body</system-out>
		</testcase>
		<testcase name="Mutant #2893" file="mako/template.py" line="355">
			<system-out>        self.format_exceptions = format_exceptions</system-out>
		</testcase>
		<testcase name="Mutant #2894" file="mako/template.py" line="356">
			<system-out>        self.error_handler = error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2895" file="mako/template.py" line="357">
			<system-out>        self.include_error_handler = include_error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2896" file="mako/template.py" line="358">
			<system-out>        self.lookup = lookup</system-out>
		</testcase>
		<testcase name="Mutant #2897" file="mako/template.py" line="360">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -358,7 +358,7 @@
         self.include_error_handler = include_error_handler
         self.lookup = lookup
 
-        self.module_directory = module_directory
+        self.module_directory = None
 
         self._setup_cache_args(
             cache_impl,
</failure>
			<system-out>        self.module_directory = module_directory</system-out>
		</testcase>
		<testcase name="Mutant #2898" file="mako/template.py" line="371">
			<system-out>    @util.memoized_property</system-out>
		</testcase>
		<testcase name="Mutant #2899" file="mako/template.py" line="376">
			<system-out>            return codegen.RESERVED_NAMES.difference([&quot;loop&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #2900" file="mako/template.py" line="387">
			<system-out>        self.cache_impl = cache_impl</system-out>
		</testcase>
		<testcase name="Mutant #2901" file="mako/template.py" line="388">
			<system-out>        self.cache_enabled = cache_enabled</system-out>
		</testcase>
		<testcase name="Mutant #2902" file="mako/template.py" line="390">
			<system-out>            self.cache_args = cache_args</system-out>
		</testcase>
		<testcase name="Mutant #2903" file="mako/template.py" line="392">
			<system-out>            self.cache_args = {}</system-out>
		</testcase>
		<testcase name="Mutant #2904" file="mako/template.py" line="396">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -394,7 +394,7 @@
 
         # transfer deprecated cache_* args
         if cache_type:
-            self.cache_args[&quot;type&quot;] = cache_type
+            self.cache_args[&quot;XXtypeXX&quot;] = cache_type
         if cache_dir:
             self.cache_args[&quot;dir&quot;] = cache_dir
         if cache_url:
</failure>
			<system-out>            self.cache_args[&quot;type&quot;] = cache_type</system-out>
		</testcase>
		<testcase name="Mutant #2905" file="mako/template.py" line="396">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -394,7 +394,7 @@
 
         # transfer deprecated cache_* args
         if cache_type:
-            self.cache_args[&quot;type&quot;] = cache_type
+            self.cache_args[&quot;type&quot;] = None
         if cache_dir:
             self.cache_args[&quot;dir&quot;] = cache_dir
         if cache_url:
</failure>
			<system-out>            self.cache_args[&quot;type&quot;] = cache_type</system-out>
		</testcase>
		<testcase name="Mutant #2906" file="mako/template.py" line="398">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -396,7 +396,7 @@
         if cache_type:
             self.cache_args[&quot;type&quot;] = cache_type
         if cache_dir:
-            self.cache_args[&quot;dir&quot;] = cache_dir
+            self.cache_args[&quot;XXdirXX&quot;] = cache_dir
         if cache_url:
             self.cache_args[&quot;url&quot;] = cache_url
 
</failure>
			<system-out>            self.cache_args[&quot;dir&quot;] = cache_dir</system-out>
		</testcase>
		<testcase name="Mutant #2907" file="mako/template.py" line="398">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -396,7 +396,7 @@
         if cache_type:
             self.cache_args[&quot;type&quot;] = cache_type
         if cache_dir:
-            self.cache_args[&quot;dir&quot;] = cache_dir
+            self.cache_args[&quot;dir&quot;] = None
         if cache_url:
             self.cache_args[&quot;url&quot;] = cache_url
 
</failure>
			<system-out>            self.cache_args[&quot;dir&quot;] = cache_dir</system-out>
		</testcase>
		<testcase name="Mutant #2908" file="mako/template.py" line="400">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -398,7 +398,7 @@
         if cache_dir:
             self.cache_args[&quot;dir&quot;] = cache_dir
         if cache_url:
-            self.cache_args[&quot;url&quot;] = cache_url
+            self.cache_args[&quot;XXurlXX&quot;] = cache_url
 
     def _compile_from_file(self, path, filename):
         if path is not None:
</failure>
			<system-out>            self.cache_args[&quot;url&quot;] = cache_url</system-out>
		</testcase>
		<testcase name="Mutant #2909" file="mako/template.py" line="400">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -398,7 +398,7 @@
         if cache_dir:
             self.cache_args[&quot;dir&quot;] = cache_dir
         if cache_url:
-            self.cache_args[&quot;url&quot;] = cache_url
+            self.cache_args[&quot;url&quot;] = None
 
     def _compile_from_file(self, path, filename):
         if path is not None:
</failure>
			<system-out>            self.cache_args[&quot;url&quot;] = cache_url</system-out>
		</testcase>
		<testcase name="Mutant #2910" file="mako/template.py" line="403">
			<system-out>        if path is not None:</system-out>
		</testcase>
		<testcase name="Mutant #2911" file="mako/template.py" line="405">
			<system-out>            filemtime = os.stat(filename)[stat.ST_MTIME]</system-out>
		</testcase>
		<testcase name="Mutant #2912" file="mako/template.py" line="407">
			<system-out>                not os.path.exists(path)</system-out>
		</testcase>
		<testcase name="Mutant #2913" file="mako/template.py" line="408">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -406,7 +406,7 @@
             filemtime = os.stat(filename)[stat.ST_MTIME]
             if (
                 not os.path.exists(path)
-                or os.stat(path)[stat.ST_MTIME] &lt; filemtime
+                or os.stat(path)[stat.ST_MTIME] &lt;= filemtime
             ):
                 data = util.read_file(filename)
                 _compile_module_file(
</failure>
			<system-out>                or os.stat(path)[stat.ST_MTIME] &lt; filemtime</system-out>
		</testcase>
		<testcase name="Mutant #2914" file="mako/template.py" line="408">
			<system-out>                or os.stat(path)[stat.ST_MTIME] &lt; filemtime</system-out>
		</testcase>
		<testcase name="Mutant #2915" file="mako/template.py" line="410">
			<system-out>                data = util.read_file(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2916" file="mako/template.py" line="414">
			<system-out>            module = compat.load_module(self.module_id, path)</system-out>
		</testcase>
		<testcase name="Mutant #2917" file="mako/template.py" line="415">
			<system-out>            if module._magic_number != codegen.MAGIC_NUMBER:</system-out>
		</testcase>
		<testcase name="Mutant #2918" file="mako/template.py" line="416">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -414,7 +414,7 @@
                 )
             module = compat.load_module(self.module_id, path)
             if module._magic_number != codegen.MAGIC_NUMBER:
-                data = util.read_file(filename)
+                data = None
                 _compile_module_file(
                     self, data, filename, path, self.module_writer
                 )
</failure>
			<system-out>                data = util.read_file(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2919" file="mako/template.py" line="420">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -418,7 +418,7 @@
                 _compile_module_file(
                     self, data, filename, path, self.module_writer
                 )
-                module = compat.load_module(self.module_id, path)
+                module = None
             ModuleInfo(module, path, self, filename, None, None, None)
         else:
             # template filename and no module directory, compile code
</failure>
			<system-out>                module = compat.load_module(self.module_id, path)</system-out>
		</testcase>
		<testcase name="Mutant #2920" file="mako/template.py" line="425">
			<system-out>            data = util.read_file(filename)</system-out>
		</testcase>
		<testcase name="Mutant #2921" file="mako/template.py" line="426">
			<system-out>            code, module = _compile_text(self, data, filename)</system-out>
		</testcase>
		<testcase name="Mutant #2922" file="mako/template.py" line="427">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -425,7 +425,7 @@
             # in memory
             data = util.read_file(filename)
             code, module = _compile_text(self, data, filename)
-            self._source = None
+            self._source = &quot;&quot;
             self._code = code
             ModuleInfo(module, None, self, filename, code, None, None)
         return module
</failure>
			<system-out>            self._source = None</system-out>
		</testcase>
		<testcase name="Mutant #2923" file="mako/template.py" line="428">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -426,7 +426,7 @@
             data = util.read_file(filename)
             code, module = _compile_text(self, data, filename)
             self._source = None
-            self._code = code
+            self._code = None
             ModuleInfo(module, None, self, filename, code, None, None)
         return module
 
</failure>
			<system-out>            self._code = code</system-out>
		</testcase>
		<testcase name="Mutant #2924" file="mako/template.py" line="432">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -430,7 +430,6 @@
             ModuleInfo(module, None, self, filename, code, None, None)
         return module
 
-    @property
     def source(self):
         &quot;&quot;&quot;Return the template source code for this :class:`.Template`.&quot;&quot;&quot;
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2925" file="mako/template.py" line="438">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2926" file="mako/template.py" line="444">
			<system-out>    @util.memoized_property</system-out>
		</testcase>
		<testcase name="Mutant #2927" file="mako/template.py" line="448">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -446,7 +446,6 @@
     def cache(self):
         return cache.Cache(self)
 
-    @property
     def cache_dir(self):
         return self.cache_args[&quot;dir&quot;]
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2928" file="mako/template.py" line="450">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -448,7 +448,7 @@
 
     @property
     def cache_dir(self):
-        return self.cache_args[&quot;dir&quot;]
+        return self.cache_args[&quot;XXdirXX&quot;]
 
     @property
     def cache_url(self):
</failure>
			<system-out>        return self.cache_args[&quot;dir&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2929" file="mako/template.py" line="452">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -450,7 +450,6 @@
     def cache_dir(self):
         return self.cache_args[&quot;dir&quot;]
 
-    @property
     def cache_url(self):
         return self.cache_args[&quot;url&quot;]
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2930" file="mako/template.py" line="454">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -452,7 +452,7 @@
 
     @property
     def cache_url(self):
-        return self.cache_args[&quot;url&quot;]
+        return self.cache_args[&quot;XXurlXX&quot;]
 
     @property
     def cache_type(self):
</failure>
			<system-out>        return self.cache_args[&quot;url&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2931" file="mako/template.py" line="456">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -454,7 +454,6 @@
     def cache_url(self):
         return self.cache_args[&quot;url&quot;]
 
-    @property
     def cache_type(self):
         return self.cache_args[&quot;type&quot;]
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2932" file="mako/template.py" line="458">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -456,7 +456,7 @@
 
     @property
     def cache_type(self):
-        return self.cache_args[&quot;type&quot;]
+        return self.cache_args[&quot;XXtypeXX&quot;]
 
     def render(self, *args, **data):
         &quot;&quot;&quot;Render the output of this template as a string.
</failure>
			<system-out>        return self.cache_args[&quot;type&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2933" file="mako/template.py" line="478">
			<system-out>            self, self.callable_, args, data, as_unicode=True</system-out>
		</testcase>
		<testcase name="Mutant #2934" file="mako/template.py" line="487">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -485,7 +485,7 @@
         The data is written to the context's buffer.
 
         &quot;&quot;&quot;
-        if getattr(context, &quot;_with_template&quot;, None) is None:
+        if getattr(context, &quot;XX_with_templateXX&quot;, None) is None:
             context._set_with_template(self)
         runtime._render_context(self, self.callable_, context, *args, **kwargs)
 
</failure>
			<system-out>        if getattr(context, &quot;_with_template&quot;, None) is None:</system-out>
		</testcase>
		<testcase name="Mutant #2935" file="mako/template.py" line="487">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -485,7 +485,7 @@
         The data is written to the context's buffer.
 
         &quot;&quot;&quot;
-        if getattr(context, &quot;_with_template&quot;, None) is None:
+        if getattr(context, &quot;_with_template&quot;, None) is not None:
             context._set_with_template(self)
         runtime._render_context(self, self.callable_, context, *args, **kwargs)
 
</failure>
			<system-out>        if getattr(context, &quot;_with_template&quot;, None) is None:</system-out>
		</testcase>
		<testcase name="Mutant #2936" file="mako/template.py" line="492">
			<system-out>        return hasattr(self.module, &quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #2937" file="mako/template.py" line="492">
			<system-out>        return hasattr(self.module, &quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #2938" file="mako/template.py" line="497">
			<system-out>        return DefTemplate(self, getattr(self.module, &quot;render_%s&quot; % name))</system-out>
		</testcase>
		<testcase name="Mutant #2939" file="mako/template.py" line="497">
			<system-out>        return DefTemplate(self, getattr(self.module, &quot;render_%s&quot; % name))</system-out>
		</testcase>
		<testcase name="Mutant #2940" file="mako/template.py" line="505">
			<system-out>        return [i[7:] for i in dir(self.module) if i[:7] == &quot;render_&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2941" file="mako/template.py" line="505">
			<system-out>        return [i[7:] for i in dir(self.module) if i[:7] == &quot;render_&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2942" file="mako/template.py" line="505">
			<system-out>        return [i[7:] for i in dir(self.module) if i[:7] == &quot;render_&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2943" file="mako/template.py" line="505">
			<system-out>        return [i[7:] for i in dir(self.module) if i[:7] == &quot;render_&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #2944" file="mako/template.py" line="508">
			<system-out>        return getattr(self.module, &quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #2945" file="mako/template.py" line="508">
			<system-out>        return getattr(self.module, &quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #2946" file="mako/template.py" line="510">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -508,7 +508,6 @@
     def _get_def_callable(self, name):
         return getattr(self.module, &quot;render_%s&quot; % name)
 
-    @property
     def last_modified(self):
         return self.module._modified_time
 
</failure>
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #2947" file="mako/template.py" line="542">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -540,7 +540,7 @@
         module_source=None,
         template_source=None,
         output_encoding=None,
-        encoding_errors=&quot;strict&quot;,
+        encoding_errors=&quot;XXstrictXX&quot;,
         disable_unicode=False,
         bytestring_passthrough=False,
         format_exceptions=False,
</failure>
			<system-out>        encoding_errors=&quot;strict&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2948" file="mako/template.py" line="543">
			<system-out>        disable_unicode=False,</system-out>
		</testcase>
		<testcase name="Mutant #2949" file="mako/template.py" line="544">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -542,7 +542,7 @@
         output_encoding=None,
         encoding_errors=&quot;strict&quot;,
         disable_unicode=False,
-        bytestring_passthrough=False,
+        bytestring_passthrough=True,
         format_exceptions=False,
         error_handler=None,
         lookup=None,
</failure>
			<system-out>        bytestring_passthrough=False,</system-out>
		</testcase>
		<testcase name="Mutant #2950" file="mako/template.py" line="545">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -543,7 +543,7 @@
         encoding_errors=&quot;strict&quot;,
         disable_unicode=False,
         bytestring_passthrough=False,
-        format_exceptions=False,
+        format_exceptions=True,
         error_handler=None,
         lookup=None,
         cache_args=None,
</failure>
			<system-out>        format_exceptions=False,</system-out>
		</testcase>
		<testcase name="Mutant #2951" file="mako/template.py" line="549">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -547,7 +547,7 @@
         error_handler=None,
         lookup=None,
         cache_args=None,
-        cache_impl=&quot;beaker&quot;,
+        cache_impl=&quot;XXbeakerXX&quot;,
         cache_enabled=True,
         cache_type=None,
         cache_dir=None,
</failure>
			<system-out>        cache_impl=&quot;beaker&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #2952" file="mako/template.py" line="550">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -548,7 +548,7 @@
         lookup=None,
         cache_args=None,
         cache_impl=&quot;beaker&quot;,
-        cache_enabled=True,
+        cache_enabled=False,
         cache_type=None,
         cache_dir=None,
         cache_url=None,
</failure>
			<system-out>        cache_enabled=True,</system-out>
		</testcase>
		<testcase name="Mutant #2953" file="mako/template.py" line="556">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -554,7 +554,7 @@
         cache_url=None,
         include_error_handler=None,
     ):
-        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
+        self.module_id = re.sub(r&quot;XX\WXX&quot;, &quot;_&quot;, module._template_uri)
         self.uri = module._template_uri
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
</failure>
			<system-out>        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)</system-out>
		</testcase>
		<testcase name="Mutant #2954" file="mako/template.py" line="556">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -554,7 +554,7 @@
         cache_url=None,
         include_error_handler=None,
     ):
-        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
+        self.module_id = re.sub(r&quot;\W&quot;, &quot;XX_XX&quot;, module._template_uri)
         self.uri = module._template_uri
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
</failure>
			<system-out>        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)</system-out>
		</testcase>
		<testcase name="Mutant #2955" file="mako/template.py" line="556">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -554,7 +554,7 @@
         cache_url=None,
         include_error_handler=None,
     ):
-        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
+        self.module_id = None
         self.uri = module._template_uri
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
</failure>
			<system-out>        self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)</system-out>
		</testcase>
		<testcase name="Mutant #2956" file="mako/template.py" line="557">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -555,7 +555,7 @@
         include_error_handler=None,
     ):
         self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
-        self.uri = module._template_uri
+        self.uri = None
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
</failure>
			<system-out>        self.uri = module._template_uri</system-out>
		</testcase>
		<testcase name="Mutant #2957" file="mako/template.py" line="558">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -556,7 +556,7 @@
     ):
         self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
         self.uri = module._template_uri
-        self.input_encoding = module._source_encoding
+        self.input_encoding = None
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
</failure>
			<system-out>        self.input_encoding = module._source_encoding</system-out>
		</testcase>
		<testcase name="Mutant #2958" file="mako/template.py" line="559">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -557,7 +557,7 @@
         self.module_id = re.sub(r&quot;\W&quot;, &quot;_&quot;, module._template_uri)
         self.uri = module._template_uri
         self.input_encoding = module._source_encoding
-        self.output_encoding = output_encoding
+        self.output_encoding = None
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
         self.bytestring_passthrough = bytestring_passthrough or disable_unicode
</failure>
			<system-out>        self.output_encoding = output_encoding</system-out>
		</testcase>
		<testcase name="Mutant #2959" file="mako/template.py" line="560">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -558,7 +558,7 @@
         self.uri = module._template_uri
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
-        self.encoding_errors = encoding_errors
+        self.encoding_errors = None
         self.disable_unicode = disable_unicode
         self.bytestring_passthrough = bytestring_passthrough or disable_unicode
         self.enable_loop = module._enable_loop
</failure>
			<system-out>        self.encoding_errors = encoding_errors</system-out>
		</testcase>
		<testcase name="Mutant #2960" file="mako/template.py" line="561">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -559,7 +559,7 @@
         self.input_encoding = module._source_encoding
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
-        self.disable_unicode = disable_unicode
+        self.disable_unicode = None
         self.bytestring_passthrough = bytestring_passthrough or disable_unicode
         self.enable_loop = module._enable_loop
 
</failure>
			<system-out>        self.disable_unicode = disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2961" file="mako/template.py" line="562">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -560,7 +560,7 @@
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
-        self.bytestring_passthrough = bytestring_passthrough or disable_unicode
+        self.bytestring_passthrough = bytestring_passthrough and disable_unicode
         self.enable_loop = module._enable_loop
 
         if compat.py3k and disable_unicode:
</failure>
			<system-out>        self.bytestring_passthrough = bytestring_passthrough or disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2962" file="mako/template.py" line="562">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -560,7 +560,7 @@
         self.output_encoding = output_encoding
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
-        self.bytestring_passthrough = bytestring_passthrough or disable_unicode
+        self.bytestring_passthrough = None
         self.enable_loop = module._enable_loop
 
         if compat.py3k and disable_unicode:
</failure>
			<system-out>        self.bytestring_passthrough = bytestring_passthrough or disable_unicode</system-out>
		</testcase>
		<testcase name="Mutant #2963" file="mako/template.py" line="563">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -561,7 +561,7 @@
         self.encoding_errors = encoding_errors
         self.disable_unicode = disable_unicode
         self.bytestring_passthrough = bytestring_passthrough or disable_unicode
-        self.enable_loop = module._enable_loop
+        self.enable_loop = None
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>        self.enable_loop = module._enable_loop</system-out>
		</testcase>
		<testcase name="Mutant #2964" file="mako/template.py" line="565">
			<system-out>        if compat.py3k and disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #2965" file="mako/template.py" line="567">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -565,7 +565,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;XXMako for Python 3 does not XX&quot; &quot;support disabling Unicode&quot;
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2966" file="mako/template.py" line="567">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -565,7 +565,7 @@
 
         if compat.py3k and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
+                &quot;Mako for Python 3 does not &quot; &quot;XXsupport disabling UnicodeXX&quot;
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
</failure>
			<system-out>                &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2967" file="mako/template.py" line="569">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -567,7 +567,7 @@
             raise exceptions.UnsupportedError(
                 &quot;Mako for Python 3 does not &quot; &quot;support disabling Unicode&quot;
             )
-        elif output_encoding and disable_unicode:
+        elif output_encoding or disable_unicode:
             raise exceptions.UnsupportedError(
                 &quot;output_encoding must be set to &quot;
                 &quot;None when disable_unicode is used.&quot;
</failure>
			<system-out>        elif output_encoding and disable_unicode:</system-out>
		</testcase>
		<testcase name="Mutant #2968" file="mako/template.py" line="571">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -569,7 +569,7 @@
             )
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
-                &quot;output_encoding must be set to &quot;
+                &quot;XXoutput_encoding must be set to XX&quot;
                 &quot;None when disable_unicode is used.&quot;
             )
 
</failure>
			<system-out>                &quot;output_encoding must be set to &quot;</system-out>
		</testcase>
		<testcase name="Mutant #2969" file="mako/template.py" line="572">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -570,7 +570,7 @@
         elif output_encoding and disable_unicode:
             raise exceptions.UnsupportedError(
                 &quot;output_encoding must be set to &quot;
-                &quot;None when disable_unicode is used.&quot;
+                &quot;XXNone when disable_unicode is used.XX&quot;
             )
 
         self.module = module
</failure>
			<system-out>                &quot;None when disable_unicode is used.&quot;</system-out>
		</testcase>
		<testcase name="Mutant #2970" file="mako/template.py" line="575">
			<system-out>        self.module = module</system-out>
		</testcase>
		<testcase name="Mutant #2971" file="mako/template.py" line="576">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -574,7 +574,7 @@
             )
 
         self.module = module
-        self.filename = template_filename
+        self.filename = None
         ModuleInfo(
             module,
             module_filename,
</failure>
			<system-out>        self.filename = template_filename</system-out>
		</testcase>
		<testcase name="Mutant #2972" file="mako/template.py" line="587">
			<system-out>        self.callable_ = self.module.render_body</system-out>
		</testcase>
		<testcase name="Mutant #2973" file="mako/template.py" line="588">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -586,7 +586,7 @@
         )
 
         self.callable_ = self.module.render_body
-        self.format_exceptions = format_exceptions
+        self.format_exceptions = None
         self.error_handler = error_handler
         self.include_error_handler = include_error_handler
         self.lookup = lookup
</failure>
			<system-out>        self.format_exceptions = format_exceptions</system-out>
		</testcase>
		<testcase name="Mutant #2974" file="mako/template.py" line="589">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -587,7 +587,7 @@
 
         self.callable_ = self.module.render_body
         self.format_exceptions = format_exceptions
-        self.error_handler = error_handler
+        self.error_handler = None
         self.include_error_handler = include_error_handler
         self.lookup = lookup
         self._setup_cache_args(
</failure>
			<system-out>        self.error_handler = error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2975" file="mako/template.py" line="590">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -588,7 +588,7 @@
         self.callable_ = self.module.render_body
         self.format_exceptions = format_exceptions
         self.error_handler = error_handler
-        self.include_error_handler = include_error_handler
+        self.include_error_handler = None
         self.lookup = lookup
         self._setup_cache_args(
             cache_impl,
</failure>
			<system-out>        self.include_error_handler = include_error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2976" file="mako/template.py" line="591">
			<system-out>        self.lookup = lookup</system-out>
		</testcase>
		<testcase name="Mutant #2977" file="mako/template.py" line="608">
			<system-out>        self.parent = parent</system-out>
		</testcase>
		<testcase name="Mutant #2978" file="mako/template.py" line="609">
			<system-out>        self.callable_ = callable_</system-out>
		</testcase>
		<testcase name="Mutant #2979" file="mako/template.py" line="610">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -608,7 +608,7 @@
     def __init__(self, parent, callable_):
         self.parent = parent
         self.callable_ = callable_
-        self.output_encoding = parent.output_encoding
+        self.output_encoding = None
         self.module = parent.module
         self.encoding_errors = parent.encoding_errors
         self.format_exceptions = parent.format_exceptions
</failure>
			<system-out>        self.output_encoding = parent.output_encoding</system-out>
		</testcase>
		<testcase name="Mutant #2980" file="mako/template.py" line="611">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -609,7 +609,7 @@
         self.parent = parent
         self.callable_ = callable_
         self.output_encoding = parent.output_encoding
-        self.module = parent.module
+        self.module = None
         self.encoding_errors = parent.encoding_errors
         self.format_exceptions = parent.format_exceptions
         self.error_handler = parent.error_handler
</failure>
			<system-out>        self.module = parent.module</system-out>
		</testcase>
		<testcase name="Mutant #2981" file="mako/template.py" line="612">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -610,7 +610,7 @@
         self.callable_ = callable_
         self.output_encoding = parent.output_encoding
         self.module = parent.module
-        self.encoding_errors = parent.encoding_errors
+        self.encoding_errors = None
         self.format_exceptions = parent.format_exceptions
         self.error_handler = parent.error_handler
         self.include_error_handler = parent.include_error_handler
</failure>
			<system-out>        self.encoding_errors = parent.encoding_errors</system-out>
		</testcase>
		<testcase name="Mutant #2982" file="mako/template.py" line="613">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -611,7 +611,7 @@
         self.output_encoding = parent.output_encoding
         self.module = parent.module
         self.encoding_errors = parent.encoding_errors
-        self.format_exceptions = parent.format_exceptions
+        self.format_exceptions = None
         self.error_handler = parent.error_handler
         self.include_error_handler = parent.include_error_handler
         self.enable_loop = parent.enable_loop
</failure>
			<system-out>        self.format_exceptions = parent.format_exceptions</system-out>
		</testcase>
		<testcase name="Mutant #2983" file="mako/template.py" line="614">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -612,7 +612,7 @@
         self.module = parent.module
         self.encoding_errors = parent.encoding_errors
         self.format_exceptions = parent.format_exceptions
-        self.error_handler = parent.error_handler
+        self.error_handler = None
         self.include_error_handler = parent.include_error_handler
         self.enable_loop = parent.enable_loop
         self.lookup = parent.lookup
</failure>
			<system-out>        self.error_handler = parent.error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2984" file="mako/template.py" line="615">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -613,7 +613,7 @@
         self.encoding_errors = parent.encoding_errors
         self.format_exceptions = parent.format_exceptions
         self.error_handler = parent.error_handler
-        self.include_error_handler = parent.include_error_handler
+        self.include_error_handler = None
         self.enable_loop = parent.enable_loop
         self.lookup = parent.lookup
         self.bytestring_passthrough = parent.bytestring_passthrough
</failure>
			<system-out>        self.include_error_handler = parent.include_error_handler</system-out>
		</testcase>
		<testcase name="Mutant #2985" file="mako/template.py" line="616">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -614,7 +614,7 @@
         self.format_exceptions = parent.format_exceptions
         self.error_handler = parent.error_handler
         self.include_error_handler = parent.include_error_handler
-        self.enable_loop = parent.enable_loop
+        self.enable_loop = None
         self.lookup = parent.lookup
         self.bytestring_passthrough = parent.bytestring_passthrough
 
</failure>
			<system-out>        self.enable_loop = parent.enable_loop</system-out>
		</testcase>
		<testcase name="Mutant #2986" file="mako/template.py" line="617">
			<system-out>        self.lookup = parent.lookup</system-out>
		</testcase>
		<testcase name="Mutant #2987" file="mako/template.py" line="618">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -616,7 +616,7 @@
         self.include_error_handler = parent.include_error_handler
         self.enable_loop = parent.enable_loop
         self.lookup = parent.lookup
-        self.bytestring_passthrough = parent.bytestring_passthrough
+        self.bytestring_passthrough = None
 
     def get_def(self, name):
         return self.parent.get_def(name)
</failure>
			<system-out>        self.bytestring_passthrough = parent.bytestring_passthrough</system-out>
		</testcase>
		<testcase name="Mutant #2988" file="mako/template.py" line="632">
			<system-out>    _modules = weakref.WeakValueDictionary()</system-out>
		</testcase>
		<testcase name="Mutant #2989" file="mako/template.py" line="644">
			<system-out>        self.module = module</system-out>
		</testcase>
		<testcase name="Mutant #2990" file="mako/template.py" line="645">
			<system-out>        self.module_filename = module_filename</system-out>
		</testcase>
		<testcase name="Mutant #2991" file="mako/template.py" line="646">
			<system-out>        self.template_filename = template_filename</system-out>
		</testcase>
		<testcase name="Mutant #2992" file="mako/template.py" line="647">
			<system-out>        self.module_source = module_source</system-out>
		</testcase>
		<testcase name="Mutant #2993" file="mako/template.py" line="648">
			<system-out>        self.template_source = template_source</system-out>
		</testcase>
		<testcase name="Mutant #2994" file="mako/template.py" line="649">
			<system-out>        self.template_uri = template_uri</system-out>
		</testcase>
		<testcase name="Mutant #2995" file="mako/template.py" line="650">
			<system-out>        self._modules[module.__name__] = template._mmarker = self</system-out>
		</testcase>
		<testcase name="Mutant #2996" file="mako/template.py" line="652">
			<system-out>            self._modules[module_filename] = self</system-out>
		</testcase>
		<testcase name="Mutant #2997" file="mako/template.py" line="654">
			<system-out>    @classmethod</system-out>
		</testcase>
		<testcase name="Mutant #2998" file="mako/template.py" line="655">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -653,7 +653,7 @@
             self._modules[module_filename] = self
 
     @classmethod
-    def get_module_source_metadata(cls, module_source, full_line_map=False):
+    def get_module_source_metadata(cls, module_source, full_line_map=True):
         source_map = re.search(
             r&quot;__M_BEGIN_METADATA(.+?)__M_END_METADATA&quot;, module_source, re.S
         ).group(1)
</failure>
			<system-out>    def get_module_source_metadata(cls, module_source, full_line_map=False):</system-out>
		</testcase>
		<testcase name="Mutant #2999" file="mako/template.py" line="657">
			<system-out>            r&quot;__M_BEGIN_METADATA(.+?)__M_END_METADATA&quot;, module_source, re.S</system-out>
		</testcase>
		<testcase name="Mutant #3000" file="mako/template.py" line="658">
			<system-out>        ).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #3001" file="mako/template.py" line="658">
			<system-out>        ).group(1)</system-out>
		</testcase>
		<testcase name="Mutant #3002" file="mako/template.py" line="659">
			<system-out>        source_map = json.loads(source_map)</system-out>
		</testcase>
		<testcase name="Mutant #3003" file="mako/template.py" line="660">
			<system-out>        source_map[&quot;line_map&quot;] = dict(</system-out>
		</testcase>
		<testcase name="Mutant #3004" file="mako/template.py" line="661">
			<system-out>            (int(k), int(v)) for k, v in source_map[&quot;line_map&quot;].items()</system-out>
		</testcase>
		<testcase name="Mutant #3005" file="mako/template.py" line="662">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #3006" file="mako/template.py" line="664">
			<system-out>            f_line_map = source_map[&quot;full_line_map&quot;] = []</system-out>
		</testcase>
		<testcase name="Mutant #3007" file="mako/template.py" line="664">
			<system-out>            f_line_map = source_map[&quot;full_line_map&quot;] = []</system-out>
		</testcase>
		<testcase name="Mutant #3008" file="mako/template.py" line="665">
			<system-out>            line_map = source_map[&quot;line_map&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3009" file="mako/template.py" line="665">
			<system-out>            line_map = source_map[&quot;line_map&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3010" file="mako/template.py" line="667">
			<system-out>            curr_templ_line = 1</system-out>
		</testcase>
		<testcase name="Mutant #3011" file="mako/template.py" line="667">
			<system-out>            curr_templ_line = 1</system-out>
		</testcase>
		<testcase name="Mutant #3012" file="mako/template.py" line="668">
			<system-out>            for mod_line in range(1, max(line_map)):</system-out>
		</testcase>
		<testcase name="Mutant #3013" file="mako/template.py" line="669">
			<system-out>                if mod_line in line_map:</system-out>
		</testcase>
		<testcase name="Mutant #3014" file="mako/template.py" line="670">
			<system-out>                    curr_templ_line = line_map[mod_line]</system-out>
		</testcase>
		<testcase name="Mutant #3015" file="mako/template.py" line="674">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3016" file="mako/template.py" line="676">
			<system-out>        if self.module_source is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3017" file="mako/template.py" line="681">
			<system-out>    @property</system-out>
		</testcase>
		<testcase name="Mutant #3018" file="mako/template.py" line="683">
			<system-out>        if self.template_source is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3019" file="mako/template.py" line="684">
			<system-out>            if self.module._source_encoding and not isinstance(</system-out>
		</testcase>
		<testcase name="Mutant #3020" file="mako/template.py" line="686">
			<system-out>            ):</system-out>
		</testcase>
		<testcase name="Mutant #3021" file="mako/template.py" line="693">
			<system-out>            data = util.read_file(self.template_filename)</system-out>
		</testcase>
		<testcase name="Mutant #3022" file="mako/template.py" line="707">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #3023" file="mako/template.py" line="708">
			<system-out>    node = lexer.parse()</system-out>
		</testcase>
		<testcase name="Mutant #3024" file="mako/template.py" line="723">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #3025" file="mako/template.py" line="728">
			<system-out>    identifier = template.module_id</system-out>
		</testcase>
		<testcase name="Mutant #3026" file="mako/template.py" line="734">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #3027" file="mako/template.py" line="736">
			<system-out>    cid = identifier</system-out>
		</testcase>
		<testcase name="Mutant #3028" file="mako/template.py" line="737">
			<system-out>    if not compat.py3k and isinstance(cid, compat.text_type):</system-out>
		</testcase>
		<testcase name="Mutant #3029" file="mako/template.py" line="737">
			<system-out>    if not compat.py3k and isinstance(cid, compat.text_type):</system-out>
		</testcase>
		<testcase name="Mutant #3030" file="mako/template.py" line="738">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -736,7 +736,7 @@
 
     cid = identifier
     if not compat.py3k and isinstance(cid, compat.text_type):
-        cid = cid.encode()
+        cid = None
     module = types.ModuleType(cid)
     code = compile(source, cid, &quot;exec&quot;)
 
</failure>
			<system-out>        cid = cid.encode()</system-out>
		</testcase>
		<testcase name="Mutant #3031" file="mako/template.py" line="739">
			<system-out>    module = types.ModuleType(cid)</system-out>
		</testcase>
		<testcase name="Mutant #3032" file="mako/template.py" line="740">
			<system-out>    code = compile(source, cid, &quot;exec&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3033" file="mako/template.py" line="740">
			<system-out>    code = compile(source, cid, &quot;exec&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3034" file="mako/template.py" line="749">
			<system-out>        template, text, filename, generate_magic_comment=True</system-out>
		</testcase>
		<testcase name="Mutant #3035" file="mako/template.py" line="750">
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #3036" file="mako/template.py" line="753">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -751,7 +751,7 @@
     )
 
     if isinstance(source, compat.text_type):
-        source = source.encode(lexer.encoding or &quot;ascii&quot;)
+        source = source.encode(lexer.encoding or &quot;XXasciiXX&quot;)
 
     if module_writer:
         module_writer(source, outputpath)
</failure>
			<system-out>        source = source.encode(lexer.encoding or &quot;ascii&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3037" file="mako/template.py" line="753">
			<system-out>        source = source.encode(lexer.encoding or &quot;ascii&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3038" file="mako/template.py" line="753">
			<system-out>        source = source.encode(lexer.encoding or &quot;ascii&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3039" file="mako/template.py" line="761">
			<system-out>        (dest, name) = tempfile.mkstemp(dir=os.path.dirname(outputpath))</system-out>
		</testcase>
		<testcase name="Mutant #3040" file="mako/template.py" line="770">
			<system-out>        return _get_module_info(callable_.__globals__[&quot;__name__&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3041" file="mako/template.py" line="772">
			<failure type="failure" message="bad_survived">--- mako/template.py
+++ mako/template.py
@@ -770,7 +770,7 @@
     if compat.py3k:
         return _get_module_info(callable_.__globals__[&quot;__name__&quot;])
     else:
-        return _get_module_info(callable_.func_globals[&quot;__name__&quot;])
+        return _get_module_info(callable_.func_globals[&quot;XX__name__XX&quot;])
 
 
 def _get_module_info(filename):
</failure>
			<system-out>        return _get_module_info(callable_.func_globals[&quot;__name__&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3042" file="mako/cache.py" line="9">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -7,7 +7,7 @@
 from mako import compat
 from mako import util
 
-_cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)
+_cache_plugins = util.PluginLoader(&quot;XXmako.cacheXX&quot;)
 
 register_plugin = _cache_plugins.register
 register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)
</failure>
			<system-out>_cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3043" file="mako/cache.py" line="9">
			<system-out>_cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3044" file="mako/cache.py" line="11">
			<system-out>register_plugin = _cache_plugins.register</system-out>
		</testcase>
		<testcase name="Mutant #3045" file="mako/cache.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -10,7 +10,7 @@
 _cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)
 
 register_plugin = _cache_plugins.register
-register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)
+register_plugin(&quot;XXbeakerXX&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)
 
 
 class Cache(object):
</failure>
			<system-out>register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3046" file="mako/cache.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -10,7 +10,7 @@
 _cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)
 
 register_plugin = _cache_plugins.register
-register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)
+register_plugin(&quot;beaker&quot;, &quot;XXmako.ext.beaker_cacheXX&quot;, &quot;BeakerCacheImpl&quot;)
 
 
 class Cache(object):
</failure>
			<system-out>register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3047" file="mako/cache.py" line="12">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -10,7 +10,7 @@
 _cache_plugins = util.PluginLoader(&quot;mako.cache&quot;)
 
 register_plugin = _cache_plugins.register
-register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)
+register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;XXBeakerCacheImplXX&quot;)
 
 
 class Cache(object):
</failure>
			<system-out>register_plugin(&quot;beaker&quot;, &quot;mako.ext.beaker_cache&quot;, &quot;BeakerCacheImpl&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3048" file="mako/cache.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -33,7 +33,7 @@
 
     &quot;&quot;&quot;
 
-    impl = None
+    impl = &quot;&quot;
     &quot;&quot;&quot;Provide the :class:`.CacheImpl` in use by this :class:`.Cache`.
 
     This accessor allows a :class:`.CacheImpl` with additional
</failure>
			<system-out>    impl = None</system-out>
		</testcase>
		<testcase name="Mutant #3049" file="mako/cache.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -41,7 +41,7 @@
 
     &quot;&quot;&quot;
 
-    id = None
+    id = &quot;&quot;
     &quot;&quot;&quot;Return the 'id' that identifies this cache.
 
     This is a value that should be globally unique to the
</failure>
			<system-out>    id = None</system-out>
		</testcase>
		<testcase name="Mutant #3050" file="mako/cache.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -51,7 +51,7 @@
 
     &quot;&quot;&quot;
 
-    starttime = None
+    starttime = &quot;&quot;
     &quot;&quot;&quot;Epochal time value for when the owning :class:`.Template` was
     first compiled.
 
</failure>
			<system-out>    starttime = None</system-out>
		</testcase>
		<testcase name="Mutant #3051" file="mako/cache.py" line="68">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -66,7 +66,7 @@
     def __init__(self, template, *args):
         # check for a stale template calling the
         # constructor
-        if isinstance(template, compat.string_types) and args:
+        if isinstance(template, compat.string_types) or args:
             return
         self.template = template
         self.id = template.module.__name__
</failure>
			<system-out>        if isinstance(template, compat.string_types) and args:</system-out>
		</testcase>
		<testcase name="Mutant #3052" file="mako/cache.py" line="70">
			<system-out>        self.template = template</system-out>
		</testcase>
		<testcase name="Mutant #3053" file="mako/cache.py" line="71">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -69,7 +69,7 @@
         if isinstance(template, compat.string_types) and args:
             return
         self.template = template
-        self.id = template.module.__name__
+        self.id = None
         self.starttime = template.module._modified_time
         self._def_regions = {}
         self.impl = self._load_impl(self.template.cache_impl)
</failure>
			<system-out>        self.id = template.module.__name__</system-out>
		</testcase>
		<testcase name="Mutant #3054" file="mako/cache.py" line="72">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -70,7 +70,7 @@
             return
         self.template = template
         self.id = template.module.__name__
-        self.starttime = template.module._modified_time
+        self.starttime = None
         self._def_regions = {}
         self.impl = self._load_impl(self.template.cache_impl)
 
</failure>
			<system-out>        self.starttime = template.module._modified_time</system-out>
		</testcase>
		<testcase name="Mutant #3055" file="mako/cache.py" line="73">
			<system-out>        self._def_regions = {}</system-out>
		</testcase>
		<testcase name="Mutant #3056" file="mako/cache.py" line="74">
			<system-out>        self.impl = self._load_impl(self.template.cache_impl)</system-out>
		</testcase>
		<testcase name="Mutant #3057" file="mako/cache.py" line="89">
			<system-out>        if not self.template.cache_enabled:</system-out>
		</testcase>
		<testcase name="Mutant #3058" file="mako/cache.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -105,7 +105,7 @@
 
         self.impl.set(key, value, **self._get_cache_kw(kw, None))
 
-    put = set
+    put = None
     &quot;&quot;&quot;A synonym for :meth:`.Cache.set`.
 
     This is here for backwards compatibility.
</failure>
			<system-out>    put = set</system-out>
		</testcase>
		<testcase name="Mutant #3059" file="mako/cache.py" line="143">
			<system-out>        self.invalidate(&quot;render_body&quot;, __M_defname=&quot;render_body&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3060" file="mako/cache.py" line="143">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -141,7 +141,7 @@
         template.
 
         &quot;&quot;&quot;
-        self.invalidate(&quot;render_body&quot;, __M_defname=&quot;render_body&quot;)
+        self.invalidate(&quot;render_body&quot;, __M_defname=&quot;XXrender_bodyXX&quot;)
 
     def invalidate_def(self, name):
         &quot;&quot;&quot;Invalidate the cached content of a particular ``&lt;%def&gt;`` within this
</failure>
			<system-out>        self.invalidate(&quot;render_body&quot;, __M_defname=&quot;render_body&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3061" file="mako/cache.py" line="151">
			<system-out>        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #3062" file="mako/cache.py" line="151">
			<system-out>        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #3063" file="mako/cache.py" line="151">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -149,7 +149,7 @@
 
         &quot;&quot;&quot;
 
-        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;render_%s&quot; % name)
+        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;XXrender_%sXX&quot; % name)
 
     def invalidate_closure(self, name):
         &quot;&quot;&quot;Invalidate a nested ``&lt;%def&gt;`` within this template.
</failure>
			<system-out>        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #3064" file="mako/cache.py" line="151">
			<system-out>        self.invalidate(&quot;render_%s&quot; % name, __M_defname=&quot;render_%s&quot; % name)</system-out>
		</testcase>
		<testcase name="Mutant #3065" file="mako/cache.py" line="167">
			<system-out>        defname = kw.pop(&quot;__M_defname&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3066" file="mako/cache.py" line="167">
			<system-out>        defname = kw.pop(&quot;__M_defname&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3067" file="mako/cache.py" line="168">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -166,7 +166,7 @@
 
     def _get_cache_kw(self, kw, context):
         defname = kw.pop(&quot;__M_defname&quot;, None)
-        if not defname:
+        if  defname:
             tmpl_kw = self.template.cache_args.copy()
             tmpl_kw.update(kw)
         elif defname in self._def_regions:
</failure>
			<system-out>        if not defname:</system-out>
		</testcase>
		<testcase name="Mutant #3068" file="mako/cache.py" line="169">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -167,7 +167,7 @@
     def _get_cache_kw(self, kw, context):
         defname = kw.pop(&quot;__M_defname&quot;, None)
         if not defname:
-            tmpl_kw = self.template.cache_args.copy()
+            tmpl_kw = None
             tmpl_kw.update(kw)
         elif defname in self._def_regions:
             tmpl_kw = self._def_regions[defname]
</failure>
			<system-out>            tmpl_kw = self.template.cache_args.copy()</system-out>
		</testcase>
		<testcase name="Mutant #3069" file="mako/cache.py" line="171">
			<system-out>        elif defname in self._def_regions:</system-out>
		</testcase>
		<testcase name="Mutant #3070" file="mako/cache.py" line="172">
			<system-out>            tmpl_kw = self._def_regions[defname]</system-out>
		</testcase>
		<testcase name="Mutant #3071" file="mako/cache.py" line="174">
			<system-out>            tmpl_kw = self.template.cache_args.copy()</system-out>
		</testcase>
		<testcase name="Mutant #3072" file="mako/cache.py" line="176">
			<system-out>            self._def_regions[defname] = tmpl_kw</system-out>
		</testcase>
		<testcase name="Mutant #3073" file="mako/cache.py" line="177">
			<system-out>        if context and self.impl.pass_context:</system-out>
		</testcase>
		<testcase name="Mutant #3074" file="mako/cache.py" line="178">
			<system-out>            tmpl_kw = tmpl_kw.copy()</system-out>
		</testcase>
		<testcase name="Mutant #3075" file="mako/cache.py" line="179">
			<system-out>            tmpl_kw.setdefault(&quot;context&quot;, context)</system-out>
		</testcase>
		<testcase name="Mutant #3076" file="mako/cache.py" line="188">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -186,7 +186,7 @@
     &quot;&quot;&quot;Provide a cache implementation for use by :class:`.Cache`.&quot;&quot;&quot;
 
     def __init__(self, cache):
-        self.cache = cache
+        self.cache = None
 
     pass_context = False
     &quot;&quot;&quot;If ``True``, the :class:`.Context` will be passed to
</failure>
			<system-out>        self.cache = cache</system-out>
		</testcase>
		<testcase name="Mutant #3077" file="mako/cache.py" line="190">
			<system-out>    pass_context = False</system-out>
		</testcase>
		<testcase name="Mutant #3078" file="mako/cache.py" line="190">
			<failure type="failure" message="bad_survived">--- mako/cache.py
+++ mako/cache.py
@@ -188,7 +188,7 @@
     def __init__(self, cache):
         self.cache = cache
 
-    pass_context = False
+    pass_context = None
     &quot;&quot;&quot;If ``True``, the :class:`.Context` will be passed to
     :meth:`get_or_create &lt;.CacheImpl.get_or_create&gt;` as the name ``'context'``.
     &quot;&quot;&quot;
</failure>
			<system-out>    pass_context = False</system-out>
		</testcase>
		<testcase name="Mutant #3079" file="mako/pyparser.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -23,7 +23,7 @@
 if compat.py3k:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])
+    reserved = set([&quot;XXTrueXX&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;arg&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3080" file="mako/pyparser.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -23,7 +23,7 @@
 if compat.py3k:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])
+    reserved = set([&quot;True&quot;, &quot;XXFalseXX&quot;, &quot;None&quot;, &quot;print&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;arg&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3081" file="mako/pyparser.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -23,7 +23,7 @@
 if compat.py3k:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])
+    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;XXNoneXX&quot;, &quot;print&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;arg&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3082" file="mako/pyparser.py" line="25">
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3083" file="mako/pyparser.py" line="25">
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;, &quot;print&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3084" file="mako/pyparser.py" line="28">
			<system-out>    arg_id = operator.attrgetter(&quot;arg&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3085" file="mako/pyparser.py" line="28">
			<system-out>    arg_id = operator.attrgetter(&quot;arg&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3086" file="mako/pyparser.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -30,7 +30,7 @@
 else:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
+    reserved = set([&quot;XXTrueXX&quot;, &quot;False&quot;, &quot;None&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;id&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3087" file="mako/pyparser.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -30,7 +30,7 @@
 else:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
+    reserved = set([&quot;True&quot;, &quot;XXFalseXX&quot;, &quot;None&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;id&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3088" file="mako/pyparser.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -30,7 +30,7 @@
 else:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
+    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;XXNoneXX&quot;])
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;id&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3089" file="mako/pyparser.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -30,7 +30,7 @@
 else:
     # words that cannot be assigned to (notably
     # smaller than the total keys in __builtins__)
-    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
+    reserved = None
 
     # the &quot;id&quot; attribute on a function node
     arg_id = operator.attrgetter(&quot;id&quot;)
</failure>
			<system-out>    reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])</system-out>
		</testcase>
		<testcase name="Mutant #3090" file="mako/pyparser.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -33,7 +33,7 @@
     reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
 
     # the &quot;id&quot; attribute on a function node
-    arg_id = operator.attrgetter(&quot;id&quot;)
+    arg_id = operator.attrgetter(&quot;XXidXX&quot;)
 
 util.restore__ast(_ast)
 
</failure>
			<system-out>    arg_id = operator.attrgetter(&quot;id&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3091" file="mako/pyparser.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -33,7 +33,7 @@
     reserved = set([&quot;True&quot;, &quot;False&quot;, &quot;None&quot;])
 
     # the &quot;id&quot; attribute on a function node
-    arg_id = operator.attrgetter(&quot;id&quot;)
+    arg_id = None
 
 util.restore__ast(_ast)
 
</failure>
			<system-out>    arg_id = operator.attrgetter(&quot;id&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3092" file="mako/pyparser.py" line="40">
			<system-out>def parse(code, mode=&quot;exec&quot;, **exception_kwargs):</system-out>
		</testcase>
		<testcase name="Mutant #3093" file="mako/pyparser.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -42,7 +42,7 @@
     &quot;&quot;&quot;Parse an expression into AST&quot;&quot;&quot;
 
     try:
-        return _ast_util.parse(code, &quot;&lt;unknown&gt;&quot;, mode)
+        return _ast_util.parse(code, &quot;XX&lt;unknown&gt;XX&quot;, mode)
     except Exception:
         raise exceptions.SyntaxException(
             &quot;(%s) %s (%r)&quot;
</failure>
			<system-out>        return _ast_util.parse(code, &quot;&lt;unknown&gt;&quot;, mode)</system-out>
		</testcase>
		<testcase name="Mutant #3094" file="mako/pyparser.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -45,7 +45,7 @@
         return _ast_util.parse(code, &quot;&lt;unknown&gt;&quot;, mode)
     except Exception:
         raise exceptions.SyntaxException(
-            &quot;(%s) %s (%r)&quot;
+            &quot;XX(%s) %s (%r)XX&quot;
             % (
                 compat.exception_as().__class__.__name__,
                 compat.exception_as(),
</failure>
			<system-out>            &quot;(%s) %s (%r)&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3095" file="mako/pyparser.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -46,7 +46,7 @@
     except Exception:
         raise exceptions.SyntaxException(
             &quot;(%s) %s (%r)&quot;
-            % (
+            / (
                 compat.exception_as().__class__.__name__,
                 compat.exception_as(),
                 code[0:50],
</failure>
			<system-out>            % (</system-out>
		</testcase>
		<testcase name="Mutant #3096" file="mako/pyparser.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -49,7 +49,7 @@
             % (
                 compat.exception_as().__class__.__name__,
                 compat.exception_as(),
-                code[0:50],
+                code[1:50],
             ),
             **exception_kwargs
         )
</failure>
			<system-out>                code[0:50],</system-out>
		</testcase>
		<testcase name="Mutant #3097" file="mako/pyparser.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -49,7 +49,7 @@
             % (
                 compat.exception_as().__class__.__name__,
                 compat.exception_as(),
-                code[0:50],
+                code[0:51],
             ),
             **exception_kwargs
         )
</failure>
			<system-out>                code[0:50],</system-out>
		</testcase>
		<testcase name="Mutant #3098" file="mako/pyparser.py" line="59">
			<system-out>        self.in_function = False</system-out>
		</testcase>
		<testcase name="Mutant #3099" file="mako/pyparser.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -57,7 +57,7 @@
 
 class FindIdentifiers(_ast_util.NodeVisitor):
     def __init__(self, listener, **exception_kwargs):
-        self.in_function = False
+        self.in_function = None
         self.in_assign_targets = False
         self.local_ident_stack = set()
         self.listener = listener
</failure>
			<system-out>        self.in_function = False</system-out>
		</testcase>
		<testcase name="Mutant #3100" file="mako/pyparser.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -58,7 +58,7 @@
 class FindIdentifiers(_ast_util.NodeVisitor):
     def __init__(self, listener, **exception_kwargs):
         self.in_function = False
-        self.in_assign_targets = False
+        self.in_assign_targets = True
         self.local_ident_stack = set()
         self.listener = listener
         self.exception_kwargs = exception_kwargs
</failure>
			<system-out>        self.in_assign_targets = False</system-out>
		</testcase>
		<testcase name="Mutant #3101" file="mako/pyparser.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -58,7 +58,7 @@
 class FindIdentifiers(_ast_util.NodeVisitor):
     def __init__(self, listener, **exception_kwargs):
         self.in_function = False
-        self.in_assign_targets = False
+        self.in_assign_targets = None
         self.local_ident_stack = set()
         self.listener = listener
         self.exception_kwargs = exception_kwargs
</failure>
			<system-out>        self.in_assign_targets = False</system-out>
		</testcase>
		<testcase name="Mutant #3102" file="mako/pyparser.py" line="61">
			<system-out>        self.local_ident_stack = set()</system-out>
		</testcase>
		<testcase name="Mutant #3103" file="mako/pyparser.py" line="62">
			<system-out>        self.listener = listener</system-out>
		</testcase>
		<testcase name="Mutant #3104" file="mako/pyparser.py" line="63">
			<system-out>        self.exception_kwargs = exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #3105" file="mako/pyparser.py" line="66">
			<system-out>        if not self.in_function:</system-out>
		</testcase>
		<testcase name="Mutant #3106" file="mako/pyparser.py" line="81">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -79,7 +79,7 @@
         # is undeclared)
 
         self.visit(node.value)
-        in_a = self.in_assign_targets
+        in_a = None
         self.in_assign_targets = True
         for n in node.targets:
             self.visit(n)
</failure>
			<system-out>        in_a = self.in_assign_targets</system-out>
		</testcase>
		<testcase name="Mutant #3107" file="mako/pyparser.py" line="82">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -80,7 +80,7 @@
 
         self.visit(node.value)
         in_a = self.in_assign_targets
-        self.in_assign_targets = True
+        self.in_assign_targets = False
         for n in node.targets:
             self.visit(n)
         self.in_assign_targets = in_a
</failure>
			<system-out>        self.in_assign_targets = True</system-out>
		</testcase>
		<testcase name="Mutant #3108" file="mako/pyparser.py" line="82">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -80,7 +80,7 @@
 
         self.visit(node.value)
         in_a = self.in_assign_targets
-        self.in_assign_targets = True
+        self.in_assign_targets = None
         for n in node.targets:
             self.visit(n)
         self.in_assign_targets = in_a
</failure>
			<system-out>        self.in_assign_targets = True</system-out>
		</testcase>
		<testcase name="Mutant #3109" file="mako/pyparser.py" line="85">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -83,7 +83,7 @@
         self.in_assign_targets = True
         for n in node.targets:
             self.visit(n)
-        self.in_assign_targets = in_a
+        self.in_assign_targets = None
 
     if compat.py3k:
 
</failure>
			<system-out>        self.in_assign_targets = in_a</system-out>
		</testcase>
		<testcase name="Mutant #3110" file="mako/pyparser.py" line="93">
			<system-out>            if node.name is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3111" file="mako/pyparser.py" line="95">
			<system-out>            if node.type is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3112" file="mako/pyparser.py" line="101">
			<system-out>        self._visit_function(node, True)</system-out>
		</testcase>
		<testcase name="Mutant #3113" file="mako/pyparser.py" line="105">
			<system-out>        self._visit_function(node, False)</system-out>
		</testcase>
		<testcase name="Mutant #3114" file="mako/pyparser.py" line="123">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -121,7 +121,7 @@
         # argument names in each function header so they arent
         # counted as &quot;undeclared&quot;
 
-        inf = self.in_function
+        inf = None
         self.in_function = True
 
         local_ident_stack = self.local_ident_stack
</failure>
			<system-out>        inf = self.in_function</system-out>
		</testcase>
		<testcase name="Mutant #3115" file="mako/pyparser.py" line="124">
			<system-out>        self.in_function = True</system-out>
		</testcase>
		<testcase name="Mutant #3116" file="mako/pyparser.py" line="124">
			<system-out>        self.in_function = True</system-out>
		</testcase>
		<testcase name="Mutant #3117" file="mako/pyparser.py" line="126">
			<system-out>        local_ident_stack = self.local_ident_stack</system-out>
		</testcase>
		<testcase name="Mutant #3118" file="mako/pyparser.py" line="129">
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #3119" file="mako/pyparser.py" line="135">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -133,7 +133,7 @@
         else:
             for n in node.body:
                 self.visit(n)
-        self.in_function = inf
+        self.in_function = None
         self.local_ident_stack = local_ident_stack
 
     def visit_For(self, node):
</failure>
			<system-out>        self.in_function = inf</system-out>
		</testcase>
		<testcase name="Mutant #3120" file="mako/pyparser.py" line="136">
			<system-out>        self.local_ident_stack = local_ident_stack</system-out>
		</testcase>
		<testcase name="Mutant #3121" file="mako/pyparser.py" line="155">
			<system-out>            node.id not in reserved</system-out>
		</testcase>
		<testcase name="Mutant #3122" file="mako/pyparser.py" line="156">
			<system-out>            and node.id not in self.listener.declared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #3123" file="mako/pyparser.py" line="157">
			<system-out>            and node.id not in self.local_ident_stack</system-out>
		</testcase>
		<testcase name="Mutant #3124" file="mako/pyparser.py" line="157">
			<system-out>            and node.id not in self.local_ident_stack</system-out>
		</testcase>
		<testcase name="Mutant #3125" file="mako/pyparser.py" line="163">
			<system-out>            if name.asname is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3126" file="mako/pyparser.py" line="166">
			<system-out>                self._add_declared(name.name.split(&quot;.&quot;)[0])</system-out>
		</testcase>
		<testcase name="Mutant #3127" file="mako/pyparser.py" line="166">
			<system-out>                self._add_declared(name.name.split(&quot;.&quot;)[0])</system-out>
		</testcase>
		<testcase name="Mutant #3128" file="mako/pyparser.py" line="170">
			<system-out>            if name.asname is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3129" file="mako/pyparser.py" line="173">
			<system-out>                if name.name == &quot;*&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3130" file="mako/pyparser.py" line="173">
			<system-out>                if name.name == &quot;*&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3131" file="mako/pyparser.py" line="175">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -173,7 +173,7 @@
             else:
                 if name.name == &quot;*&quot;:
                     raise exceptions.CompileException(
-                        &quot;'import *' is not supported, since all identifier &quot;
+                        &quot;XX'import *' is not supported, since all identifier XX&quot;
                         &quot;names must be explicitly declared.  Please use the &quot;
                         &quot;form 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, &quot;
                         &quot;...' instead.&quot;,
</failure>
			<system-out>                        &quot;'import *' is not supported, since all identifier &quot;</system-out>
		</testcase>
		<testcase name="Mutant #3132" file="mako/pyparser.py" line="176">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -174,7 +174,7 @@
                 if name.name == &quot;*&quot;:
                     raise exceptions.CompileException(
                         &quot;'import *' is not supported, since all identifier &quot;
-                        &quot;names must be explicitly declared.  Please use the &quot;
+                        &quot;XXnames must be explicitly declared.  Please use the XX&quot;
                         &quot;form 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, &quot;
                         &quot;...' instead.&quot;,
                         **self.exception_kwargs
</failure>
			<system-out>                        &quot;names must be explicitly declared.  Please use the &quot;</system-out>
		</testcase>
		<testcase name="Mutant #3133" file="mako/pyparser.py" line="177">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -175,7 +175,7 @@
                     raise exceptions.CompileException(
                         &quot;'import *' is not supported, since all identifier &quot;
                         &quot;names must be explicitly declared.  Please use the &quot;
-                        &quot;form 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, &quot;
+                        &quot;XXform 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, XX&quot;
                         &quot;...' instead.&quot;,
                         **self.exception_kwargs
                     )
</failure>
			<system-out>                        &quot;form 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, &quot;</system-out>
		</testcase>
		<testcase name="Mutant #3134" file="mako/pyparser.py" line="178">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -176,7 +176,7 @@
                         &quot;'import *' is not supported, since all identifier &quot;
                         &quot;names must be explicitly declared.  Please use the &quot;
                         &quot;form 'from &lt;modulename&gt; import &lt;name1&gt;, &lt;name2&gt;, &quot;
-                        &quot;...' instead.&quot;,
+                        &quot;XX...' instead.XX&quot;,
                         **self.exception_kwargs
                     )
                 self._add_declared(name.name)
</failure>
			<system-out>                        &quot;...' instead.&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3135" file="mako/pyparser.py" line="186">
			<system-out>        self.listener = listener</system-out>
		</testcase>
		<testcase name="Mutant #3136" file="mako/pyparser.py" line="187">
			<system-out>        self.exception_kwargs = exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #3137" file="mako/pyparser.py" line="188">
			<system-out>        self.code_factory = code_factory</system-out>
		</testcase>
		<testcase name="Mutant #3138" file="mako/pyparser.py" line="192">
			<system-out>            p = self.code_factory(n, **self.exception_kwargs)</system-out>
		</testcase>
		<testcase name="Mutant #3139" file="mako/pyparser.py" line="195">
			<system-out>            ldi = self.listener.declared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #3140" file="mako/pyparser.py" line="198">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -194,9 +194,7 @@
             self.listener.codeargs.append(p)
             self.listener.args.append(ExpressionGenerator(n).value())
             ldi = self.listener.declared_identifiers
-            self.listener.declared_identifiers = ldi.union(
-                p.declared_identifiers
-            )
+            self.listener.declared_identifiers = None
             lui = self.listener.undeclared_identifiers
             self.listener.undeclared_identifiers = lui.union(
                 p.undeclared_identifiers
</failure>
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #3141" file="mako/pyparser.py" line="199">
			<system-out>            lui = self.listener.undeclared_identifiers</system-out>
		</testcase>
		<testcase name="Mutant #3142" file="mako/pyparser.py" line="202">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #3143" file="mako/pyparser.py" line="207">
			<system-out>        self.listener = listener</system-out>
		</testcase>
		<testcase name="Mutant #3144" file="mako/pyparser.py" line="208">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -206,7 +206,7 @@
 class ParseFunc(_ast_util.NodeVisitor):
     def __init__(self, listener, **exception_kwargs):
         self.listener = listener
-        self.exception_kwargs = exception_kwargs
+        self.exception_kwargs = None
 
     def visit_FunctionDef(self, node):
         self.listener.funcname = node.name
</failure>
			<system-out>        self.exception_kwargs = exception_kwargs</system-out>
		</testcase>
		<testcase name="Mutant #3145" file="mako/pyparser.py" line="211">
			<system-out>        self.listener.funcname = node.name</system-out>
		</testcase>
		<testcase name="Mutant #3146" file="mako/pyparser.py" line="213">
			<system-out>        argnames = [arg_id(arg) for arg in node.args.args]</system-out>
		</testcase>
		<testcase name="Mutant #3147" file="mako/pyparser.py" line="219">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -217,7 +217,7 @@
 
         if compat.py2k:
             # kw-only args don't exist in Python 2
-            kwargnames = []
+            kwargnames = None
         else:
             kwargnames = [arg_id(arg) for arg in node.args.kwonlyargs]
         if node.args.kwarg:
</failure>
			<system-out>            kwargnames = []</system-out>
		</testcase>
		<testcase name="Mutant #3148" file="mako/pyparser.py" line="221">
			<system-out>            kwargnames = [arg_id(arg) for arg in node.args.kwonlyargs]</system-out>
		</testcase>
		<testcase name="Mutant #3149" file="mako/pyparser.py" line="224">
			<system-out>        self.listener.argnames = argnames</system-out>
		</testcase>
		<testcase name="Mutant #3150" file="mako/pyparser.py" line="225">
			<system-out>        self.listener.defaults = node.args.defaults  # ast</system-out>
		</testcase>
		<testcase name="Mutant #3151" file="mako/pyparser.py" line="226">
			<system-out>        self.listener.kwargnames = kwargnames</system-out>
		</testcase>
		<testcase name="Mutant #3152" file="mako/pyparser.py" line="228">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -226,7 +226,7 @@
         self.listener.defaults = node.args.defaults  # ast
         self.listener.kwargnames = kwargnames
         if compat.py2k:
-            self.listener.kwdefaults = []
+            self.listener.kwdefaults = None
         else:
             self.listener.kwdefaults = node.args.kw_defaults
         self.listener.varargs = node.args.vararg
</failure>
			<system-out>            self.listener.kwdefaults = []</system-out>
		</testcase>
		<testcase name="Mutant #3153" file="mako/pyparser.py" line="230">
			<system-out>            self.listener.kwdefaults = node.args.kw_defaults</system-out>
		</testcase>
		<testcase name="Mutant #3154" file="mako/pyparser.py" line="231">
			<system-out>        self.listener.varargs = node.args.vararg</system-out>
		</testcase>
		<testcase name="Mutant #3155" file="mako/pyparser.py" line="232">
			<system-out>        self.listener.kwargs = node.args.kwarg</system-out>
		</testcase>
		<testcase name="Mutant #3156" file="mako/pyparser.py" line="237">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -235,7 +235,7 @@
 
 class ExpressionGenerator(object):
     def __init__(self, astnode):
-        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)
+        self.generator = _ast_util.SourceGenerator(&quot;XX XX&quot; * 4)
         self.generator.visit(astnode)
 
     def value(self):
</failure>
			<system-out>        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)</system-out>
		</testcase>
		<testcase name="Mutant #3157" file="mako/pyparser.py" line="237">
			<system-out>        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)</system-out>
		</testcase>
		<testcase name="Mutant #3158" file="mako/pyparser.py" line="237">
			<failure type="failure" message="bad_survived">--- mako/pyparser.py
+++ mako/pyparser.py
@@ -235,7 +235,7 @@
 
 class ExpressionGenerator(object):
     def __init__(self, astnode):
-        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)
+        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 5)
         self.generator.visit(astnode)
 
     def value(self):
</failure>
			<system-out>        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)</system-out>
		</testcase>
		<testcase name="Mutant #3159" file="mako/pyparser.py" line="237">
			<system-out>        self.generator = _ast_util.SourceGenerator(&quot; &quot; * 4)</system-out>
		</testcase>
		<testcase name="Mutant #3160" file="mako/pyparser.py" line="241">
			<system-out>        return &quot;&quot;.join(self.generator.result)</system-out>
		</testcase>
		<testcase name="Mutant #3161" file="mako/ext/extract.py" line="16">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -14,7 +14,7 @@
 class MessageExtractor(object):
     def process_file(self, fileobj):
         template_node = lexer.Lexer(
-            fileobj.read(), input_encoding=self.config[&quot;encoding&quot;]
+            fileobj.read(), input_encoding=self.config[&quot;XXencodingXX&quot;]
         ).parse()
         for extracted in self.extract_nodes(template_node.get_children()):
             yield extracted
</failure>
			<system-out>            fileobj.read(), input_encoding=self.config[&quot;encoding&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3162" file="mako/ext/extract.py" line="17">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -13,9 +13,7 @@
 
 class MessageExtractor(object):
     def process_file(self, fileobj):
-        template_node = lexer.Lexer(
-            fileobj.read(), input_encoding=self.config[&quot;encoding&quot;]
-        ).parse()
+        template_node = None
         for extracted in self.extract_nodes(template_node.get_children()):
             yield extracted
 
</failure>
			<system-out>        ).parse()</system-out>
		</testcase>
		<testcase name="Mutant #3163" file="mako/ext/extract.py" line="22">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -20,7 +20,7 @@
             yield extracted
 
     def extract_nodes(self, nodes):
-        translator_comments = []
+        translator_comments = None
         in_translator_comments = False
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
         comment_tags = list(
</failure>
			<system-out>        translator_comments = []</system-out>
		</testcase>
		<testcase name="Mutant #3164" file="mako/ext/extract.py" line="23">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -21,7 +21,7 @@
 
     def extract_nodes(self, nodes):
         translator_comments = []
-        in_translator_comments = False
+        in_translator_comments = True
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
</failure>
			<system-out>        in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3165" file="mako/ext/extract.py" line="23">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -21,7 +21,7 @@
 
     def extract_nodes(self, nodes):
         translator_comments = []
-        in_translator_comments = False
+        in_translator_comments = None
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
</failure>
			<system-out>        in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3166" file="mako/ext/extract.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -22,7 +22,7 @@
     def extract_nodes(self, nodes):
         translator_comments = []
         in_translator_comments = False
-        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
+        input_encoding = self.config[&quot;XXencodingXX&quot;] or &quot;ascii&quot;
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
         )
</failure>
			<system-out>        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3167" file="mako/ext/extract.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -22,7 +22,7 @@
     def extract_nodes(self, nodes):
         translator_comments = []
         in_translator_comments = False
-        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
+        input_encoding = self.config[&quot;encoding&quot;] or &quot;XXasciiXX&quot;
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
         )
</failure>
			<system-out>        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3168" file="mako/ext/extract.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -22,7 +22,7 @@
     def extract_nodes(self, nodes):
         translator_comments = []
         in_translator_comments = False
-        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
+        input_encoding = self.config[&quot;encoding&quot;] and &quot;ascii&quot;
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
         )
</failure>
			<system-out>        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3169" file="mako/ext/extract.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -22,7 +22,7 @@
     def extract_nodes(self, nodes):
         translator_comments = []
         in_translator_comments = False
-        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
+        input_encoding = None
         comment_tags = list(
             filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
         )
</failure>
			<system-out>        input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3170" file="mako/ext/extract.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -24,7 +24,7 @@
         in_translator_comments = False
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
         comment_tags = list(
-            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
+            filter(None, re.split(r&quot;XX\s+XX&quot;, self.config[&quot;comment-tags&quot;]))
         )
 
         for node in nodes:
</failure>
			<system-out>            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))</system-out>
		</testcase>
		<testcase name="Mutant #3171" file="mako/ext/extract.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -24,7 +24,7 @@
         in_translator_comments = False
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
         comment_tags = list(
-            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
+            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;XXcomment-tagsXX&quot;]))
         )
 
         for node in nodes:
</failure>
			<system-out>            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))</system-out>
		</testcase>
		<testcase name="Mutant #3172" file="mako/ext/extract.py" line="27">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -23,9 +23,7 @@
         translator_comments = []
         in_translator_comments = False
         input_encoding = self.config[&quot;encoding&quot;] or &quot;ascii&quot;
-        comment_tags = list(
-            filter(None, re.split(r&quot;\s+&quot;, self.config[&quot;comment-tags&quot;]))
-        )
+        comment_tags = None
 
         for node in nodes:
             child_nodes = None
</failure>
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #3173" file="mako/ext/extract.py" line="30">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -28,7 +28,7 @@
         )
 
         for node in nodes:
-            child_nodes = None
+            child_nodes = &quot;&quot;
             if (
                 in_translator_comments
                 and isinstance(node, parsetree.Text)
</failure>
			<system-out>            child_nodes = None</system-out>
		</testcase>
		<testcase name="Mutant #3174" file="mako/ext/extract.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -32,7 +32,7 @@
             if (
                 in_translator_comments
                 and isinstance(node, parsetree.Text)
-                and not node.content.strip()
+                and  node.content.strip()
             ):
                 # Ignore whitespace within translator comments
                 continue
</failure>
			<system-out>                and not node.content.strip()</system-out>
		</testcase>
		<testcase name="Mutant #3175" file="mako/ext/extract.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -30,8 +30,7 @@
         for node in nodes:
             child_nodes = None
             if (
-                in_translator_comments
-                and isinstance(node, parsetree.Text)
+                in_translator_comments or isinstance(node, parsetree.Text)
                 and not node.content.strip()
             ):
                 # Ignore whitespace within translator comments
</failure>
			<system-out>                and not node.content.strip()</system-out>
		</testcase>
		<testcase name="Mutant #3176" file="mako/ext/extract.py" line="37">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -35,7 +35,7 @@
                 and not node.content.strip()
             ):
                 # Ignore whitespace within translator comments
-                continue
+                break
 
             if isinstance(node, parsetree.Comment):
                 value = node.text.strip()
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #3177" file="mako/ext/extract.py" line="40">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -38,7 +38,7 @@
                 continue
 
             if isinstance(node, parsetree.Comment):
-                value = node.text.strip()
+                value = None
                 if in_translator_comments:
                     translator_comments.extend(
                         self._split_comment(node.lineno, value)
</failure>
			<system-out>                value = node.text.strip()</system-out>
		</testcase>
		<testcase name="Mutant #3178" file="mako/ext/extract.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -43,7 +43,7 @@
                     translator_comments.extend(
                         self._split_comment(node.lineno, value)
                     )
-                    continue
+                    break
                 for comment_tag in comment_tags:
                     if value.startswith(comment_tag):
                         in_translator_comments = True
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #3179" file="mako/ext/extract.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -46,7 +46,7 @@
                     continue
                 for comment_tag in comment_tags:
                     if value.startswith(comment_tag):
-                        in_translator_comments = True
+                        in_translator_comments = False
                         translator_comments.extend(
                             self._split_comment(node.lineno, value)
                         )
</failure>
			<system-out>                        in_translator_comments = True</system-out>
		</testcase>
		<testcase name="Mutant #3180" file="mako/ext/extract.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -46,7 +46,7 @@
                     continue
                 for comment_tag in comment_tags:
                     if value.startswith(comment_tag):
-                        in_translator_comments = True
+                        in_translator_comments = None
                         translator_comments.extend(
                             self._split_comment(node.lineno, value)
                         )
</failure>
			<system-out>                        in_translator_comments = True</system-out>
		</testcase>
		<testcase name="Mutant #3181" file="mako/ext/extract.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -50,7 +50,7 @@
                         translator_comments.extend(
                             self._split_comment(node.lineno, value)
                         )
-                continue
+                break
 
             if isinstance(node, parsetree.DefTag):
                 code = node.function_decl.code
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #3182" file="mako/ext/extract.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -53,7 +53,7 @@
                 continue
 
             if isinstance(node, parsetree.DefTag):
-                code = node.function_decl.code
+                code = None
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.BlockTag):
                 code = node.body_decl.code
</failure>
			<system-out>                code = node.function_decl.code</system-out>
		</testcase>
		<testcase name="Mutant #3183" file="mako/ext/extract.py" line="56">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -54,7 +54,7 @@
 
             if isinstance(node, parsetree.DefTag):
                 code = node.function_decl.code
-                child_nodes = node.nodes
+                child_nodes = None
             elif isinstance(node, parsetree.BlockTag):
                 code = node.body_decl.code
                 child_nodes = node.nodes
</failure>
			<system-out>                child_nodes = node.nodes</system-out>
		</testcase>
		<testcase name="Mutant #3184" file="mako/ext/extract.py" line="58">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -56,7 +56,7 @@
                 code = node.function_decl.code
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.BlockTag):
-                code = node.body_decl.code
+                code = None
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.CallTag):
                 code = node.code.code
</failure>
			<system-out>                code = node.body_decl.code</system-out>
		</testcase>
		<testcase name="Mutant #3185" file="mako/ext/extract.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -57,7 +57,7 @@
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.BlockTag):
                 code = node.body_decl.code
-                child_nodes = node.nodes
+                child_nodes = None
             elif isinstance(node, parsetree.CallTag):
                 code = node.code.code
                 child_nodes = node.nodes
</failure>
			<system-out>                child_nodes = node.nodes</system-out>
		</testcase>
		<testcase name="Mutant #3186" file="mako/ext/extract.py" line="61">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -59,7 +59,7 @@
                 code = node.body_decl.code
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.CallTag):
-                code = node.code.code
+                code = None
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.PageTag):
                 code = node.body_decl.code
</failure>
			<system-out>                code = node.code.code</system-out>
		</testcase>
		<testcase name="Mutant #3187" file="mako/ext/extract.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -60,7 +60,7 @@
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.CallTag):
                 code = node.code.code
-                child_nodes = node.nodes
+                child_nodes = None
             elif isinstance(node, parsetree.PageTag):
                 code = node.body_decl.code
             elif isinstance(node, parsetree.CallNamespaceTag):
</failure>
			<system-out>                child_nodes = node.nodes</system-out>
		</testcase>
		<testcase name="Mutant #3188" file="mako/ext/extract.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -62,7 +62,7 @@
                 code = node.code.code
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.PageTag):
-                code = node.body_decl.code
+                code = None
             elif isinstance(node, parsetree.CallNamespaceTag):
                 code = node.expression
                 child_nodes = node.nodes
</failure>
			<system-out>                code = node.body_decl.code</system-out>
		</testcase>
		<testcase name="Mutant #3189" file="mako/ext/extract.py" line="66">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -64,7 +64,7 @@
             elif isinstance(node, parsetree.PageTag):
                 code = node.body_decl.code
             elif isinstance(node, parsetree.CallNamespaceTag):
-                code = node.expression
+                code = None
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.ControlLine):
                 if node.isend:
</failure>
			<system-out>                code = node.expression</system-out>
		</testcase>
		<testcase name="Mutant #3190" file="mako/ext/extract.py" line="67">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -65,7 +65,7 @@
                 code = node.body_decl.code
             elif isinstance(node, parsetree.CallNamespaceTag):
                 code = node.expression
-                child_nodes = node.nodes
+                child_nodes = None
             elif isinstance(node, parsetree.ControlLine):
                 if node.isend:
                     in_translator_comments = False
</failure>
			<system-out>                child_nodes = node.nodes</system-out>
		</testcase>
		<testcase name="Mutant #3191" file="mako/ext/extract.py" line="70">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -68,7 +68,7 @@
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.ControlLine):
                 if node.isend:
-                    in_translator_comments = False
+                    in_translator_comments = True
                     continue
                 code = node.text
             elif isinstance(node, parsetree.Code):
</failure>
			<system-out>                    in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3192" file="mako/ext/extract.py" line="70">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -68,7 +68,7 @@
                 child_nodes = node.nodes
             elif isinstance(node, parsetree.ControlLine):
                 if node.isend:
-                    in_translator_comments = False
+                    in_translator_comments = None
                     continue
                 code = node.text
             elif isinstance(node, parsetree.Code):
</failure>
			<system-out>                    in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3193" file="mako/ext/extract.py" line="71">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -69,7 +69,7 @@
             elif isinstance(node, parsetree.ControlLine):
                 if node.isend:
                     in_translator_comments = False
-                    continue
+                    break
                 code = node.text
             elif isinstance(node, parsetree.Code):
                 in_translator_comments = False
</failure>
			<system-out>                    continue</system-out>
		</testcase>
		<testcase name="Mutant #3194" file="mako/ext/extract.py" line="72">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -70,7 +70,7 @@
                 if node.isend:
                     in_translator_comments = False
                     continue
-                code = node.text
+                code = None
             elif isinstance(node, parsetree.Code):
                 in_translator_comments = False
                 code = node.code.code
</failure>
			<system-out>                code = node.text</system-out>
		</testcase>
		<testcase name="Mutant #3195" file="mako/ext/extract.py" line="74">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -72,7 +72,7 @@
                     continue
                 code = node.text
             elif isinstance(node, parsetree.Code):
-                in_translator_comments = False
+                in_translator_comments = True
                 code = node.code.code
             elif isinstance(node, parsetree.Expression):
                 code = node.code.code
</failure>
			<system-out>                in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3196" file="mako/ext/extract.py" line="74">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -72,7 +72,7 @@
                     continue
                 code = node.text
             elif isinstance(node, parsetree.Code):
-                in_translator_comments = False
+                in_translator_comments = None
                 code = node.code.code
             elif isinstance(node, parsetree.Expression):
                 code = node.code.code
</failure>
			<system-out>                in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3197" file="mako/ext/extract.py" line="75">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -73,7 +73,7 @@
                 code = node.text
             elif isinstance(node, parsetree.Code):
                 in_translator_comments = False
-                code = node.code.code
+                code = None
             elif isinstance(node, parsetree.Expression):
                 code = node.code.code
             else:
</failure>
			<system-out>                code = node.code.code</system-out>
		</testcase>
		<testcase name="Mutant #3198" file="mako/ext/extract.py" line="77">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -75,7 +75,7 @@
                 in_translator_comments = False
                 code = node.code.code
             elif isinstance(node, parsetree.Expression):
-                code = node.code.code
+                code = None
             else:
                 continue
 
</failure>
			<system-out>                code = node.code.code</system-out>
		</testcase>
		<testcase name="Mutant #3199" file="mako/ext/extract.py" line="79">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -77,7 +77,7 @@
             elif isinstance(node, parsetree.Expression):
                 code = node.code.code
             else:
-                continue
+                break
 
             # Comments don't apply unless they immediately precede the message
             if (
</failure>
			<system-out>                continue</system-out>
		</testcase>
		<testcase name="Mutant #3200" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[+1][0] &lt; node.lineno - 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3201" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[-2][0] &lt; node.lineno - 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3202" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[-1][1] &lt; node.lineno - 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3203" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[-1][0] &lt;= node.lineno - 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3204" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[-1][0] &lt; node.lineno + 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3205" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -82,7 +82,7 @@
             # Comments don't apply unless they immediately precede the message
             if (
                 translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                and translator_comments[-1][0] &lt; node.lineno - 2
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3206" file="mako/ext/extract.py" line="84">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -81,8 +81,7 @@
 
             # Comments don't apply unless they immediately precede the message
             if (
-                translator_comments
-                and translator_comments[-1][0] &lt; node.lineno - 1
+                translator_comments or translator_comments[-1][0] &lt; node.lineno - 1
             ):
                 translator_comments = []
 
</failure>
			<system-out>                and translator_comments[-1][0] &lt; node.lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3207" file="mako/ext/extract.py" line="86">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -84,7 +84,7 @@
                 translator_comments
                 and translator_comments[-1][0] &lt; node.lineno - 1
             ):
-                translator_comments = []
+                translator_comments = None
 
             translator_strings = [
                 comment[1] for comment in translator_comments
</failure>
			<system-out>                translator_comments = []</system-out>
		</testcase>
		<testcase name="Mutant #3208" file="mako/ext/extract.py" line="89">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -87,7 +87,7 @@
                 translator_comments = []
 
             translator_strings = [
-                comment[1] for comment in translator_comments
+                comment[2] for comment in translator_comments
             ]
 
             if isinstance(code, compat.text_type):
</failure>
			<system-out>                comment[1] for comment in translator_comments</system-out>
		</testcase>
		<testcase name="Mutant #3209" file="mako/ext/extract.py" line="90">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -86,9 +86,7 @@
             ):
                 translator_comments = []
 
-            translator_strings = [
-                comment[1] for comment in translator_comments
-            ]
+            translator_strings = None
 
             if isinstance(code, compat.text_type):
                 code = code.encode(input_encoding, &quot;backslashreplace&quot;)
</failure>
			<system-out>            ]</system-out>
		</testcase>
		<testcase name="Mutant #3210" file="mako/ext/extract.py" line="93">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -91,7 +91,7 @@
             ]
 
             if isinstance(code, compat.text_type):
-                code = code.encode(input_encoding, &quot;backslashreplace&quot;)
+                code = code.encode(input_encoding, &quot;XXbackslashreplaceXX&quot;)
 
             used_translator_comments = False
             # We add extra newline to work around a pybabel bug
</failure>
			<system-out>                code = code.encode(input_encoding, &quot;backslashreplace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3211" file="mako/ext/extract.py" line="93">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -91,7 +91,7 @@
             ]
 
             if isinstance(code, compat.text_type):
-                code = code.encode(input_encoding, &quot;backslashreplace&quot;)
+                code = None
 
             used_translator_comments = False
             # We add extra newline to work around a pybabel bug
</failure>
			<system-out>                code = code.encode(input_encoding, &quot;backslashreplace&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3212" file="mako/ext/extract.py" line="95">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -93,7 +93,7 @@
             if isinstance(code, compat.text_type):
                 code = code.encode(input_encoding, &quot;backslashreplace&quot;)
 
-            used_translator_comments = False
+            used_translator_comments = True
             # We add extra newline to work around a pybabel bug
             # (see python-babel/babel#274, parse_encoding dies if the first
             # input string of the input is non-ascii)
</failure>
			<system-out>            used_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3213" file="mako/ext/extract.py" line="95">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -93,7 +93,7 @@
             if isinstance(code, compat.text_type):
                 code = code.encode(input_encoding, &quot;backslashreplace&quot;)
 
-            used_translator_comments = False
+            used_translator_comments = None
             # We add extra newline to work around a pybabel bug
             # (see python-babel/babel#274, parse_encoding dies if the first
             # input string of the input is non-ascii)
</failure>
			<system-out>            used_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3214" file="mako/ext/extract.py" line="101">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -99,7 +99,7 @@
             # input string of the input is non-ascii)
             # Also, because we added it, we have to subtract one from
             # node.lineno
-            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)
+            code = compat.byte_buffer(compat.b(&quot;XX\nXX&quot;) + code)
 
             for message in self.process_python(
                 code, node.lineno - 1, translator_strings
</failure>
			<system-out>            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)</system-out>
		</testcase>
		<testcase name="Mutant #3215" file="mako/ext/extract.py" line="101">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -99,7 +99,7 @@
             # input string of the input is non-ascii)
             # Also, because we added it, we have to subtract one from
             # node.lineno
-            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)
+            code = compat.byte_buffer(compat.b(&quot;\n&quot;) - code)
 
             for message in self.process_python(
                 code, node.lineno - 1, translator_strings
</failure>
			<system-out>            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)</system-out>
		</testcase>
		<testcase name="Mutant #3216" file="mako/ext/extract.py" line="101">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -99,7 +99,7 @@
             # input string of the input is non-ascii)
             # Also, because we added it, we have to subtract one from
             # node.lineno
-            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)
+            code = None
 
             for message in self.process_python(
                 code, node.lineno - 1, translator_strings
</failure>
			<system-out>            code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)</system-out>
		</testcase>
		<testcase name="Mutant #3217" file="mako/ext/extract.py" line="104">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -102,7 +102,7 @@
             code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)
 
             for message in self.process_python(
-                code, node.lineno - 1, translator_strings
+                code, node.lineno + 1, translator_strings
             ):
                 yield message
                 used_translator_comments = True
</failure>
			<system-out>                code, node.lineno - 1, translator_strings</system-out>
		</testcase>
		<testcase name="Mutant #3218" file="mako/ext/extract.py" line="104">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -102,7 +102,7 @@
             code = compat.byte_buffer(compat.b(&quot;\n&quot;) + code)
 
             for message in self.process_python(
-                code, node.lineno - 1, translator_strings
+                code, node.lineno - 2, translator_strings
             ):
                 yield message
                 used_translator_comments = True
</failure>
			<system-out>                code, node.lineno - 1, translator_strings</system-out>
		</testcase>
		<testcase name="Mutant #3219" file="mako/ext/extract.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -105,7 +105,7 @@
                 code, node.lineno - 1, translator_strings
             ):
                 yield message
-                used_translator_comments = True
+                used_translator_comments = False
 
             if used_translator_comments:
                 translator_comments = []
</failure>
			<system-out>                used_translator_comments = True</system-out>
		</testcase>
		<testcase name="Mutant #3220" file="mako/ext/extract.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -105,7 +105,7 @@
                 code, node.lineno - 1, translator_strings
             ):
                 yield message
-                used_translator_comments = True
+                used_translator_comments = None
 
             if used_translator_comments:
                 translator_comments = []
</failure>
			<system-out>                used_translator_comments = True</system-out>
		</testcase>
		<testcase name="Mutant #3221" file="mako/ext/extract.py" line="110">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -108,7 +108,7 @@
                 used_translator_comments = True
 
             if used_translator_comments:
-                translator_comments = []
+                translator_comments = None
             in_translator_comments = False
 
             if child_nodes:
</failure>
			<system-out>                translator_comments = []</system-out>
		</testcase>
		<testcase name="Mutant #3222" file="mako/ext/extract.py" line="111">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -109,7 +109,7 @@
 
             if used_translator_comments:
                 translator_comments = []
-            in_translator_comments = False
+            in_translator_comments = True
 
             if child_nodes:
                 for extracted in self.extract_nodes(child_nodes):
</failure>
			<system-out>            in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3223" file="mako/ext/extract.py" line="111">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -109,7 +109,7 @@
 
             if used_translator_comments:
                 translator_comments = []
-            in_translator_comments = False
+            in_translator_comments = None
 
             if child_nodes:
                 for extracted in self.extract_nodes(child_nodes):
</failure>
			<system-out>            in_translator_comments = False</system-out>
		</testcase>
		<testcase name="Mutant #3224" file="mako/ext/extract.py" line="117">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -115,7 +115,6 @@
                 for extracted in self.extract_nodes(child_nodes):
                     yield extracted
 
-    @staticmethod
     def _split_comment(lineno, comment):
         &quot;&quot;&quot;Return the multiline comment at lineno split into a list of
         comment line numbers and the accompanying comment line&quot;&quot;&quot;
</failure>
			<system-out>    @staticmethod</system-out>
		</testcase>
		<testcase name="Mutant #3225" file="mako/ext/extract.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/ext/extract.py
+++ mako/ext/extract.py
@@ -120,7 +120,7 @@
         &quot;&quot;&quot;Return the multiline comment at lineno split into a list of
         comment line numbers and the accompanying comment line&quot;&quot;&quot;
         return [
-            (lineno + index, line)
+            (lineno - index, line)
             for index, line in enumerate(comment.splitlines())
         ]
 
</failure>
			<system-out>            (lineno + index, line)</system-out>
		</testcase>
		<testcase name="Mutant #3226" file="mako/ext/autohandler.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -30,7 +30,7 @@
 import re
 
 
-def autohandler(template, context, name=&quot;autohandler&quot;):
+def autohandler(template, context, name=&quot;XXautohandlerXX&quot;):
     lookup = context.lookup
     _template_uri = template.module._template_uri
     if not lookup.filesystem_checks:
</failure>
			<system-out>def autohandler(template, context, name=&quot;autohandler&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #3227" file="mako/ext/autohandler.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -31,7 +31,7 @@
 
 
 def autohandler(template, context, name=&quot;autohandler&quot;):
-    lookup = context.lookup
+    lookup = None
     _template_uri = template.module._template_uri
     if not lookup.filesystem_checks:
         try:
</failure>
			<system-out>    lookup = context.lookup</system-out>
		</testcase>
		<testcase name="Mutant #3228" file="mako/ext/autohandler.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -32,7 +32,7 @@
 
 def autohandler(template, context, name=&quot;autohandler&quot;):
     lookup = context.lookup
-    _template_uri = template.module._template_uri
+    _template_uri = None
     if not lookup.filesystem_checks:
         try:
             return lookup._uri_cache[(autohandler, _template_uri, name)]
</failure>
			<system-out>    _template_uri = template.module._template_uri</system-out>
		</testcase>
		<testcase name="Mutant #3229" file="mako/ext/autohandler.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -33,7 +33,7 @@
 def autohandler(template, context, name=&quot;autohandler&quot;):
     lookup = context.lookup
     _template_uri = template.module._template_uri
-    if not lookup.filesystem_checks:
+    if  lookup.filesystem_checks:
         try:
             return lookup._uri_cache[(autohandler, _template_uri, name)]
         except KeyError:
</failure>
			<system-out>    if not lookup.filesystem_checks:</system-out>
		</testcase>
		<testcase name="Mutant #3230" file="mako/ext/autohandler.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -39,7 +39,7 @@
         except KeyError:
             pass
 
-    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
+    tokens = re.findall(r&quot;XX([^/]+)XX&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
</failure>
			<system-out>    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]</system-out>
		</testcase>
		<testcase name="Mutant #3231" file="mako/ext/autohandler.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -39,7 +39,7 @@
         except KeyError:
             pass
 
-    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
+    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) - [name]
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
</failure>
			<system-out>    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]</system-out>
		</testcase>
		<testcase name="Mutant #3232" file="mako/ext/autohandler.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -39,7 +39,7 @@
         except KeyError:
             pass
 
-    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
+    tokens = None
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
</failure>
			<system-out>    tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]</system-out>
		</testcase>
		<testcase name="Mutant #3233" file="mako/ext/autohandler.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -41,7 +41,7 @@
 
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
-        path = &quot;/&quot; + &quot;/&quot;.join(tokens)
+        path = &quot;XX/XX&quot; + &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
</failure>
			<system-out>        path = &quot;/&quot; + &quot;/&quot;.join(tokens)</system-out>
		</testcase>
		<testcase name="Mutant #3234" file="mako/ext/autohandler.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -41,7 +41,7 @@
 
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
-        path = &quot;/&quot; + &quot;/&quot;.join(tokens)
+        path = &quot;/&quot; - &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
</failure>
			<system-out>        path = &quot;/&quot; + &quot;/&quot;.join(tokens)</system-out>
		</testcase>
		<testcase name="Mutant #3235" file="mako/ext/autohandler.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -41,7 +41,7 @@
 
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
-        path = &quot;/&quot; + &quot;/&quot;.join(tokens)
+        path = &quot;/&quot; + &quot;XX/XX&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
</failure>
			<system-out>        path = &quot;/&quot; + &quot;/&quot;.join(tokens)</system-out>
		</testcase>
		<testcase name="Mutant #3236" file="mako/ext/autohandler.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -41,7 +41,7 @@
 
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
-        path = &quot;/&quot; + &quot;/&quot;.join(tokens)
+        path = None
         if path != _template_uri and _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
</failure>
			<system-out>        path = &quot;/&quot; + &quot;/&quot;.join(tokens)</system-out>
		</testcase>
		<testcase name="Mutant #3237" file="mako/ext/autohandler.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -42,7 +42,7 @@
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
-        if path != _template_uri and _file_exists(lookup, path):
+        if path == _template_uri and _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
                     (autohandler, _template_uri, name), path
</failure>
			<system-out>        if path != _template_uri and _file_exists(lookup, path):</system-out>
		</testcase>
		<testcase name="Mutant #3238" file="mako/ext/autohandler.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -42,7 +42,7 @@
     tokens = re.findall(r&quot;([^/]+)&quot;, posixpath.dirname(_template_uri)) + [name]
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
-        if path != _template_uri and _file_exists(lookup, path):
+        if path != _template_uri or _file_exists(lookup, path):
             if not lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
                     (autohandler, _template_uri, name), path
</failure>
			<system-out>        if path != _template_uri and _file_exists(lookup, path):</system-out>
		</testcase>
		<testcase name="Mutant #3239" file="mako/ext/autohandler.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -43,7 +43,7 @@
     while len(tokens):
         path = &quot;/&quot; + &quot;/&quot;.join(tokens)
         if path != _template_uri and _file_exists(lookup, path):
-            if not lookup.filesystem_checks:
+            if  lookup.filesystem_checks:
                 return lookup._uri_cache.setdefault(
                     (autohandler, _template_uri, name), path
                 )
</failure>
			<system-out>            if not lookup.filesystem_checks:</system-out>
		</testcase>
		<testcase name="Mutant #3240" file="mako/ext/autohandler.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -49,7 +49,7 @@
                 )
             else:
                 return path
-        if len(tokens) == 1:
+        if len(tokens) != 1:
             break
         tokens[-2:] = [name]
 
</failure>
			<system-out>        if len(tokens) == 1:</system-out>
		</testcase>
		<testcase name="Mutant #3241" file="mako/ext/autohandler.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -49,7 +49,7 @@
                 )
             else:
                 return path
-        if len(tokens) == 1:
+        if len(tokens) == 2:
             break
         tokens[-2:] = [name]
 
</failure>
			<system-out>        if len(tokens) == 1:</system-out>
		</testcase>
		<testcase name="Mutant #3242" file="mako/ext/autohandler.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -50,7 +50,7 @@
             else:
                 return path
         if len(tokens) == 1:
-            break
+            continue
         tokens[-2:] = [name]
 
     if not lookup.filesystem_checks:
</failure>
			<system-out>            break</system-out>
		</testcase>
		<testcase name="Mutant #3243" file="mako/ext/autohandler.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -51,7 +51,7 @@
                 return path
         if len(tokens) == 1:
             break
-        tokens[-2:] = [name]
+        tokens[+2:] = [name]
 
     if not lookup.filesystem_checks:
         return lookup._uri_cache.setdefault(
</failure>
			<system-out>        tokens[-2:] = [name]</system-out>
		</testcase>
		<testcase name="Mutant #3244" file="mako/ext/autohandler.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -51,7 +51,7 @@
                 return path
         if len(tokens) == 1:
             break
-        tokens[-2:] = [name]
+        tokens[-3:] = [name]
 
     if not lookup.filesystem_checks:
         return lookup._uri_cache.setdefault(
</failure>
			<system-out>        tokens[-2:] = [name]</system-out>
		</testcase>
		<testcase name="Mutant #3245" file="mako/ext/autohandler.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -51,7 +51,7 @@
                 return path
         if len(tokens) == 1:
             break
-        tokens[-2:] = [name]
+        tokens[-2:] = None
 
     if not lookup.filesystem_checks:
         return lookup._uri_cache.setdefault(
</failure>
			<system-out>        tokens[-2:] = [name]</system-out>
		</testcase>
		<testcase name="Mutant #3246" file="mako/ext/autohandler.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -53,7 +53,7 @@
             break
         tokens[-2:] = [name]
 
-    if not lookup.filesystem_checks:
+    if  lookup.filesystem_checks:
         return lookup._uri_cache.setdefault(
             (autohandler, _template_uri, name), None
         )
</failure>
			<system-out>    if not lookup.filesystem_checks:</system-out>
		</testcase>
		<testcase name="Mutant #3247" file="mako/ext/autohandler.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -62,7 +62,7 @@
 
 
 def _file_exists(lookup, path):
-    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
+    psub = re.sub(r&quot;XX^/XX&quot;, &quot;&quot;, path)
     for d in lookup.directories:
         if os.path.exists(d + &quot;/&quot; + psub):
             return True
</failure>
			<system-out>    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)</system-out>
		</testcase>
		<testcase name="Mutant #3248" file="mako/ext/autohandler.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -62,7 +62,7 @@
 
 
 def _file_exists(lookup, path):
-    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
+    psub = re.sub(r&quot;^/&quot;, &quot;XXXX&quot;, path)
     for d in lookup.directories:
         if os.path.exists(d + &quot;/&quot; + psub):
             return True
</failure>
			<system-out>    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)</system-out>
		</testcase>
		<testcase name="Mutant #3249" file="mako/ext/autohandler.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -62,7 +62,7 @@
 
 
 def _file_exists(lookup, path):
-    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
+    psub = None
     for d in lookup.directories:
         if os.path.exists(d + &quot;/&quot; + psub):
             return True
</failure>
			<system-out>    psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)</system-out>
		</testcase>
		<testcase name="Mutant #3250" file="mako/ext/autohandler.py" line="66">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -64,7 +64,7 @@
 def _file_exists(lookup, path):
     psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
     for d in lookup.directories:
-        if os.path.exists(d + &quot;/&quot; + psub):
+        if os.path.exists(d - &quot;/&quot; + psub):
             return True
     else:
         return False
</failure>
			<system-out>        if os.path.exists(d + &quot;/&quot; + psub):</system-out>
		</testcase>
		<testcase name="Mutant #3251" file="mako/ext/autohandler.py" line="66">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -64,7 +64,7 @@
 def _file_exists(lookup, path):
     psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
     for d in lookup.directories:
-        if os.path.exists(d + &quot;/&quot; + psub):
+        if os.path.exists(d + &quot;XX/XX&quot; + psub):
             return True
     else:
         return False
</failure>
			<system-out>        if os.path.exists(d + &quot;/&quot; + psub):</system-out>
		</testcase>
		<testcase name="Mutant #3252" file="mako/ext/autohandler.py" line="66">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -64,7 +64,7 @@
 def _file_exists(lookup, path):
     psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
     for d in lookup.directories:
-        if os.path.exists(d + &quot;/&quot; + psub):
+        if os.path.exists(d + &quot;/&quot; - psub):
             return True
     else:
         return False
</failure>
			<system-out>        if os.path.exists(d + &quot;/&quot; + psub):</system-out>
		</testcase>
		<testcase name="Mutant #3253" file="mako/ext/autohandler.py" line="67">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -65,7 +65,7 @@
     psub = re.sub(r&quot;^/&quot;, &quot;&quot;, path)
     for d in lookup.directories:
         if os.path.exists(d + &quot;/&quot; + psub):
-            return True
+            return False
     else:
         return False
 
</failure>
			<system-out>            return True</system-out>
		</testcase>
		<testcase name="Mutant #3254" file="mako/ext/autohandler.py" line="69">
			<failure type="failure" message="bad_survived">--- mako/ext/autohandler.py
+++ mako/ext/autohandler.py
@@ -67,5 +67,5 @@
         if os.path.exists(d + &quot;/&quot; + psub):
             return True
     else:
-        return False
+        return True
 
</failure>
			<system-out>        return False</system-out>
		</testcase>
		<testcase name="Mutant #3255" file="mako/ext/babelplugin.py" line="14">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -12,7 +12,7 @@
 
 class BabelMakoExtractor(MessageExtractor):
     def __init__(self, keywords, comment_tags, options):
-        self.keywords = keywords
+        self.keywords = None
         self.options = options
         self.config = {
             &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
</failure>
			<system-out>        self.keywords = keywords</system-out>
		</testcase>
		<testcase name="Mutant #3256" file="mako/ext/babelplugin.py" line="15">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -13,7 +13,7 @@
 class BabelMakoExtractor(MessageExtractor):
     def __init__(self, keywords, comment_tags, options):
         self.keywords = keywords
-        self.options = options
+        self.options = None
         self.config = {
             &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
             &quot;encoding&quot;: options.get(
</failure>
			<system-out>        self.options = options</system-out>
		</testcase>
		<testcase name="Mutant #3257" file="mako/ext/babelplugin.py" line="17">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -15,7 +15,7 @@
         self.keywords = keywords
         self.options = options
         self.config = {
-            &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
+            &quot;XXcomment-tagsXX&quot;: u&quot; &quot;.join(comment_tags),
             &quot;encoding&quot;: options.get(
                 &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
             ),
</failure>
			<system-out>            &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),</system-out>
		</testcase>
		<testcase name="Mutant #3258" file="mako/ext/babelplugin.py" line="17">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -15,7 +15,7 @@
         self.keywords = keywords
         self.options = options
         self.config = {
-            &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
+            &quot;comment-tags&quot;: u&quot;XX XX&quot;.join(comment_tags),
             &quot;encoding&quot;: options.get(
                 &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
             ),
</failure>
			<system-out>            &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),</system-out>
		</testcase>
		<testcase name="Mutant #3259" file="mako/ext/babelplugin.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -16,7 +16,7 @@
         self.options = options
         self.config = {
             &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
-            &quot;encoding&quot;: options.get(
+            &quot;XXencodingXX&quot;: options.get(
                 &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
             ),
         }
</failure>
			<system-out>            &quot;encoding&quot;: options.get(</system-out>
		</testcase>
		<testcase name="Mutant #3260" file="mako/ext/babelplugin.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -17,7 +17,7 @@
         self.config = {
             &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
             &quot;encoding&quot;: options.get(
-                &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
+                &quot;XXinput_encodingXX&quot;, options.get(&quot;encoding&quot;, None)
             ),
         }
         super(BabelMakoExtractor, self).__init__()
</failure>
			<system-out>                &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3261" file="mako/ext/babelplugin.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -17,7 +17,7 @@
         self.config = {
             &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
             &quot;encoding&quot;: options.get(
-                &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
+                &quot;input_encoding&quot;, options.get(&quot;XXencodingXX&quot;, None)
             ),
         }
         super(BabelMakoExtractor, self).__init__()
</failure>
			<system-out>                &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3262" file="mako/ext/babelplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -14,12 +14,7 @@
     def __init__(self, keywords, comment_tags, options):
         self.keywords = keywords
         self.options = options
-        self.config = {
-            &quot;comment-tags&quot;: u&quot; &quot;.join(comment_tags),
-            &quot;encoding&quot;: options.get(
-                &quot;input_encoding&quot;, options.get(&quot;encoding&quot;, None)
-            ),
-        }
+        self.config = None
         super(BabelMakoExtractor, self).__init__()
 
     def __call__(self, fileobj):
</failure>
			<system-out>        }</system-out>
		</testcase>
		<testcase name="Mutant #3263" file="mako/ext/babelplugin.py" line="28">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -26,7 +26,7 @@
         return self.process_file(fileobj)
 
     def process_python(self, code, code_lineno, translator_strings):
-        comment_tags = self.config[&quot;comment-tags&quot;]
+        comment_tags = self.config[&quot;XXcomment-tagsXX&quot;]
         for (
             lineno,
             funcname,
</failure>
			<system-out>        comment_tags = self.config[&quot;comment-tags&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3264" file="mako/ext/babelplugin.py" line="28">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -26,7 +26,7 @@
         return self.process_file(fileobj)
 
     def process_python(self, code, code_lineno, translator_strings):
-        comment_tags = self.config[&quot;comment-tags&quot;]
+        comment_tags = None
         for (
             lineno,
             funcname,
</failure>
			<system-out>        comment_tags = self.config[&quot;comment-tags&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3265" file="mako/ext/babelplugin.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -34,7 +34,7 @@
             python_translator_comments,
         ) in extract_python(code, self.keywords, comment_tags, self.options):
             yield (
-                code_lineno + (lineno - 1),
+                code_lineno - (lineno - 1),
                 funcname,
                 messages,
                 translator_strings + python_translator_comments,
</failure>
			<system-out>                code_lineno + (lineno - 1),</system-out>
		</testcase>
		<testcase name="Mutant #3266" file="mako/ext/babelplugin.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -34,7 +34,7 @@
             python_translator_comments,
         ) in extract_python(code, self.keywords, comment_tags, self.options):
             yield (
-                code_lineno + (lineno - 1),
+                code_lineno + (lineno + 1),
                 funcname,
                 messages,
                 translator_strings + python_translator_comments,
</failure>
			<system-out>                code_lineno + (lineno - 1),</system-out>
		</testcase>
		<testcase name="Mutant #3267" file="mako/ext/babelplugin.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -34,7 +34,7 @@
             python_translator_comments,
         ) in extract_python(code, self.keywords, comment_tags, self.options):
             yield (
-                code_lineno + (lineno - 1),
+                code_lineno + (lineno - 2),
                 funcname,
                 messages,
                 translator_strings + python_translator_comments,
</failure>
			<system-out>                code_lineno + (lineno - 1),</system-out>
		</testcase>
		<testcase name="Mutant #3268" file="mako/ext/babelplugin.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -37,7 +37,7 @@
                 code_lineno + (lineno - 1),
                 funcname,
                 messages,
-                translator_strings + python_translator_comments,
+                translator_strings - python_translator_comments,
             )
 
 
</failure>
			<system-out>                translator_strings + python_translator_comments,</system-out>
		</testcase>
		<testcase name="Mutant #3269" file="mako/ext/babelplugin.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/babelplugin.py
+++ mako/ext/babelplugin.py
@@ -53,7 +53,7 @@
     :return: an iterator over ``(lineno, funcname, message, comments)`` tuples
     :rtype: ``iterator``
     &quot;&quot;&quot;
-    extractor = BabelMakoExtractor(keywords, comment_tags, options)
+    extractor = None
     for message in extractor(fileobj):
         yield message
 
</failure>
			<system-out>    extractor = BabelMakoExtractor(keywords, comment_tags, options)</system-out>
		</testcase>
		<testcase name="Mutant #3270" file="mako/ext/pygmentplugin.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -29,7 +29,7 @@
 
 
 class MakoLexer(RegexLexer):
-    name = &quot;Mako&quot;
+    name = &quot;XXMakoXX&quot;
     aliases = [&quot;mako&quot;]
     filenames = [&quot;*.mao&quot;]
 
</failure>
			<system-out>    name = &quot;Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3271" file="mako/ext/pygmentplugin.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -29,7 +29,7 @@
 
 
 class MakoLexer(RegexLexer):
-    name = &quot;Mako&quot;
+    name = None
     aliases = [&quot;mako&quot;]
     filenames = [&quot;*.mao&quot;]
 
</failure>
			<system-out>    name = &quot;Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3272" file="mako/ext/pygmentplugin.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -30,7 +30,7 @@
 
 class MakoLexer(RegexLexer):
     name = &quot;Mako&quot;
-    aliases = [&quot;mako&quot;]
+    aliases = [&quot;XXmakoXX&quot;]
     filenames = [&quot;*.mao&quot;]
 
     tokens = {
</failure>
			<system-out>    aliases = [&quot;mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3273" file="mako/ext/pygmentplugin.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -30,7 +30,7 @@
 
 class MakoLexer(RegexLexer):
     name = &quot;Mako&quot;
-    aliases = [&quot;mako&quot;]
+    aliases = None
     filenames = [&quot;*.mao&quot;]
 
     tokens = {
</failure>
			<system-out>    aliases = [&quot;mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3274" file="mako/ext/pygmentplugin.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -31,7 +31,7 @@
 class MakoLexer(RegexLexer):
     name = &quot;Mako&quot;
     aliases = [&quot;mako&quot;]
-    filenames = [&quot;*.mao&quot;]
+    filenames = [&quot;XX*.maoXX&quot;]
 
     tokens = {
         &quot;root&quot;: [
</failure>
			<system-out>    filenames = [&quot;*.mao&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3275" file="mako/ext/pygmentplugin.py" line="33">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -31,7 +31,7 @@
 class MakoLexer(RegexLexer):
     name = &quot;Mako&quot;
     aliases = [&quot;mako&quot;]
-    filenames = [&quot;*.mao&quot;]
+    filenames = None
 
     tokens = {
         &quot;root&quot;: [
</failure>
			<system-out>    filenames = [&quot;*.mao&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3276" file="mako/ext/pygmentplugin.py" line="36">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -34,7 +34,7 @@
     filenames = [&quot;*.mao&quot;]
 
     tokens = {
-        &quot;root&quot;: [
+        &quot;XXrootXX&quot;: [
             (
                 r&quot;(\s*)(\%)(\s*end(?:\w+))(\n|\Z)&quot;,
                 bygroups(Text, Comment.Preproc, Keyword, Other),
</failure>
			<system-out>        &quot;root&quot;: [</system-out>
		</testcase>
		<testcase name="Mutant #3277" file="mako/ext/pygmentplugin.py" line="38">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -36,7 +36,7 @@
     tokens = {
         &quot;root&quot;: [
             (
-                r&quot;(\s*)(\%)(\s*end(?:\w+))(\n|\Z)&quot;,
+                r&quot;XX(\s*)(\%)(\s*end(?:\w+))(\n|\Z)XX&quot;,
                 bygroups(Text, Comment.Preproc, Keyword, Other),
             ),
             (
</failure>
			<system-out>                r&quot;(\s*)(\%)(\s*end(?:\w+))(\n|\Z)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3278" file="mako/ext/pygmentplugin.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -40,7 +40,7 @@
                 bygroups(Text, Comment.Preproc, Keyword, Other),
             ),
             (
-                r&quot;(\s*)(\%(?!%))([^\n]*)(\n|\Z)&quot;,
+                r&quot;XX(\s*)(\%(?!%))([^\n]*)(\n|\Z)XX&quot;,
                 bygroups(Text, Comment.Preproc, using(PythonLexer), Other),
             ),
             (
</failure>
			<system-out>                r&quot;(\s*)(\%(?!%))([^\n]*)(\n|\Z)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3279" file="mako/ext/pygmentplugin.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -44,7 +44,7 @@
                 bygroups(Text, Comment.Preproc, using(PythonLexer), Other),
             ),
             (
-                r&quot;(\s*)(##[^\n]*)(\n|\Z)&quot;,
+                r&quot;XX(\s*)(##[^\n]*)(\n|\Z)XX&quot;,
                 bygroups(Text, Comment.Preproc, Other),
             ),
             (r&quot;&quot;&quot;(?s)&lt;%doc&gt;.*?&lt;/%doc&gt;&quot;&quot;&quot;, Comment.Preproc),
</failure>
			<system-out>                r&quot;(\s*)(##[^\n]*)(\n|\Z)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3280" file="mako/ext/pygmentplugin.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -49,7 +49,7 @@
             ),
             (r&quot;&quot;&quot;(?s)&lt;%doc&gt;.*?&lt;/%doc&gt;&quot;&quot;&quot;, Comment.Preproc),
             (
-                r&quot;(&lt;%)([\w\.\:]+)&quot;,
+                r&quot;XX(&lt;%)([\w\.\:]+)XX&quot;,
                 bygroups(Comment.Preproc, Name.Builtin),
                 &quot;tag&quot;,
             ),
</failure>
			<system-out>                r&quot;(&lt;%)([\w\.\:]+)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3281" file="mako/ext/pygmentplugin.py" line="53">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -51,7 +51,7 @@
             (
                 r&quot;(&lt;%)([\w\.\:]+)&quot;,
                 bygroups(Comment.Preproc, Name.Builtin),
-                &quot;tag&quot;,
+                &quot;XXtagXX&quot;,
             ),
             (
                 r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,
</failure>
			<system-out>                &quot;tag&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3282" file="mako/ext/pygmentplugin.py" line="56">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -54,7 +54,7 @@
                 &quot;tag&quot;,
             ),
             (
-                r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,
+                r&quot;XX(&lt;/%)([\w\.\:]+)(&gt;)XX&quot;,
                 bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc),
             ),
             (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),
</failure>
			<system-out>                r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3283" file="mako/ext/pygmentplugin.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -57,7 +57,7 @@
                 r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,
                 bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc),
             ),
-            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),
+            (r&quot;XX&lt;%(?=([\w\.\:]+))XX&quot;, Comment.Preproc, &quot;ondeftags&quot;),
             (
                 r&quot;(?s)(&lt;%(?:!?))(.*?)(%&gt;)&quot;,
                 bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
</failure>
			<system-out>            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3284" file="mako/ext/pygmentplugin.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -57,7 +57,7 @@
                 r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,
                 bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc),
             ),
-            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),
+            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;XXondeftagsXX&quot;),
             (
                 r&quot;(?s)(&lt;%(?:!?))(.*?)(%&gt;)&quot;,
                 bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
</failure>
			<system-out>            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3285" file="mako/ext/pygmentplugin.py" line="61">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -59,7 +59,7 @@
             ),
             (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),
             (
-                r&quot;(?s)(&lt;%(?:!?))(.*?)(%&gt;)&quot;,
+                r&quot;XX(?s)(&lt;%(?:!?))(.*?)(%&gt;)XX&quot;,
                 bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
             ),
             (
</failure>
			<system-out>                r&quot;(?s)(&lt;%(?:!?))(.*?)(%&gt;)&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3286" file="mako/ext/pygmentplugin.py" line="65">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -63,7 +63,7 @@
                 bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
             ),
             (
-                r&quot;(\$\{)(.*?)(\})&quot;,
+                r&quot;XX(\$\{)(.*?)(\})XX&quot;,
                 bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
             ),
             (
</failure>
			<system-out>                r&quot;(\$\{)(.*?)(\})&quot;,</system-out>
		</testcase>
		<testcase name="Mutant #3287" file="mako/ext/pygmentplugin.py" line="85">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -83,7 +83,7 @@
             &quot;&quot;&quot;,
                 bygroups(Other, Operator),
             ),
-            (r&quot;\s+&quot;, Text),
+            (r&quot;XX\s+XX&quot;, Text),
         ],
         &quot;ondeftags&quot;: [
             (r&quot;&lt;%&quot;, Comment.Preproc),
</failure>
			<system-out>            (r&quot;\s+&quot;, Text),</system-out>
		</testcase>
		<testcase name="Mutant #3288" file="mako/ext/pygmentplugin.py" line="87">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -85,7 +85,7 @@
             ),
             (r&quot;\s+&quot;, Text),
         ],
-        &quot;ondeftags&quot;: [
+        &quot;XXondeftagsXX&quot;: [
             (r&quot;&lt;%&quot;, Comment.Preproc),
             (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
             include(&quot;tag&quot;),
</failure>
			<system-out>        &quot;ondeftags&quot;: [</system-out>
		</testcase>
		<testcase name="Mutant #3289" file="mako/ext/pygmentplugin.py" line="88">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -86,7 +86,7 @@
             (r&quot;\s+&quot;, Text),
         ],
         &quot;ondeftags&quot;: [
-            (r&quot;&lt;%&quot;, Comment.Preproc),
+            (r&quot;XX&lt;%XX&quot;, Comment.Preproc),
             (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
             include(&quot;tag&quot;),
         ],
</failure>
			<system-out>            (r&quot;&lt;%&quot;, Comment.Preproc),</system-out>
		</testcase>
		<testcase name="Mutant #3290" file="mako/ext/pygmentplugin.py" line="89">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -87,7 +87,7 @@
         ],
         &quot;ondeftags&quot;: [
             (r&quot;&lt;%&quot;, Comment.Preproc),
-            (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
+            (r&quot;XX(?&lt;=&lt;%)(include|inherit|namespace|page)XX&quot;, Name.Builtin),
             include(&quot;tag&quot;),
         ],
         &quot;tag&quot;: [
</failure>
			<system-out>            (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),</system-out>
		</testcase>
		<testcase name="Mutant #3291" file="mako/ext/pygmentplugin.py" line="90">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -88,7 +88,7 @@
         &quot;ondeftags&quot;: [
             (r&quot;&lt;%&quot;, Comment.Preproc),
             (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
-            include(&quot;tag&quot;),
+            include(&quot;XXtagXX&quot;),
         ],
         &quot;tag&quot;: [
             (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
</failure>
			<system-out>            include(&quot;tag&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3292" file="mako/ext/pygmentplugin.py" line="92">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -90,7 +90,7 @@
             (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
             include(&quot;tag&quot;),
         ],
-        &quot;tag&quot;: [
+        &quot;XXtagXX&quot;: [
             (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
             (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
             (r&quot;\s+&quot;, Text),
</failure>
			<system-out>        &quot;tag&quot;: [</system-out>
		</testcase>
		<testcase name="Mutant #3293" file="mako/ext/pygmentplugin.py" line="93">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -91,7 +91,7 @@
             include(&quot;tag&quot;),
         ],
         &quot;tag&quot;: [
-            (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
+            (r'XX((?:\w+)\s*=)\s*(&quot;.*?&quot;)XX', bygroups(Name.Attribute, String)),
             (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
             (r&quot;\s+&quot;, Text),
         ],
</failure>
			<system-out>            (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),</system-out>
		</testcase>
		<testcase name="Mutant #3294" file="mako/ext/pygmentplugin.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -92,7 +92,7 @@
         ],
         &quot;tag&quot;: [
             (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
-            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
+            (r&quot;XX/?\s*&gt;XX&quot;, Comment.Preproc, &quot;#pop&quot;),
             (r&quot;\s+&quot;, Text),
         ],
         &quot;attr&quot;: [
</failure>
			<system-out>            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3295" file="mako/ext/pygmentplugin.py" line="94">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -92,7 +92,7 @@
         ],
         &quot;tag&quot;: [
             (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
-            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
+            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;XX#popXX&quot;),
             (r&quot;\s+&quot;, Text),
         ],
         &quot;attr&quot;: [
</failure>
			<system-out>            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3296" file="mako/ext/pygmentplugin.py" line="95">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -93,7 +93,7 @@
         &quot;tag&quot;: [
             (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
             (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
-            (r&quot;\s+&quot;, Text),
+            (r&quot;XX\s+XX&quot;, Text),
         ],
         &quot;attr&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
</failure>
			<system-out>            (r&quot;\s+&quot;, Text),</system-out>
		</testcase>
		<testcase name="Mutant #3297" file="mako/ext/pygmentplugin.py" line="97">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -95,7 +95,7 @@
             (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
             (r&quot;\s+&quot;, Text),
         ],
-        &quot;attr&quot;: [
+        &quot;XXattrXX&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
             (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
             (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
</failure>
			<system-out>        &quot;attr&quot;: [</system-out>
		</testcase>
		<testcase name="Mutant #3298" file="mako/ext/pygmentplugin.py" line="98">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -96,7 +96,7 @@
             (r&quot;\s+&quot;, Text),
         ],
         &quot;attr&quot;: [
-            ('&quot;.*?&quot;', String, &quot;#pop&quot;),
+            ('XX&quot;.*?&quot;XX', String, &quot;#pop&quot;),
             (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
             (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
         ],
</failure>
			<system-out>            ('&quot;.*?&quot;', String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3299" file="mako/ext/pygmentplugin.py" line="98">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -96,7 +96,7 @@
             (r&quot;\s+&quot;, Text),
         ],
         &quot;attr&quot;: [
-            ('&quot;.*?&quot;', String, &quot;#pop&quot;),
+            ('&quot;.*?&quot;', String, &quot;XX#popXX&quot;),
             (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
             (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
         ],
</failure>
			<system-out>            ('&quot;.*?&quot;', String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3300" file="mako/ext/pygmentplugin.py" line="99">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -97,7 +97,7 @@
         ],
         &quot;attr&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
-            (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
+            (&quot;XX'.*?'XX&quot;, String, &quot;#pop&quot;),
             (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
         ],
     }
</failure>
			<system-out>            (&quot;'.*?'&quot;, String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3301" file="mako/ext/pygmentplugin.py" line="99">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -97,7 +97,7 @@
         ],
         &quot;attr&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
-            (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
+            (&quot;'.*?'&quot;, String, &quot;XX#popXX&quot;),
             (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
         ],
     }
</failure>
			<system-out>            (&quot;'.*?'&quot;, String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3302" file="mako/ext/pygmentplugin.py" line="100">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -98,7 +98,7 @@
         &quot;attr&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
             (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
-            (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
+            (r&quot;XX[^\s&gt;]+XX&quot;, String, &quot;#pop&quot;),
         ],
     }
 
</failure>
			<system-out>            (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3303" file="mako/ext/pygmentplugin.py" line="100">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -98,7 +98,7 @@
         &quot;attr&quot;: [
             ('&quot;.*?&quot;', String, &quot;#pop&quot;),
             (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
-            (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
+            (r&quot;[^\s&gt;]+&quot;, String, &quot;XX#popXX&quot;),
         ],
     }
 
</failure>
			<system-out>            (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3304" file="mako/ext/pygmentplugin.py" line="102">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -33,74 +33,7 @@
     aliases = [&quot;mako&quot;]
     filenames = [&quot;*.mao&quot;]
 
-    tokens = {
-        &quot;root&quot;: [
-            (
-                r&quot;(\s*)(\%)(\s*end(?:\w+))(\n|\Z)&quot;,
-                bygroups(Text, Comment.Preproc, Keyword, Other),
-            ),
-            (
-                r&quot;(\s*)(\%(?!%))([^\n]*)(\n|\Z)&quot;,
-                bygroups(Text, Comment.Preproc, using(PythonLexer), Other),
-            ),
-            (
-                r&quot;(\s*)(##[^\n]*)(\n|\Z)&quot;,
-                bygroups(Text, Comment.Preproc, Other),
-            ),
-            (r&quot;&quot;&quot;(?s)&lt;%doc&gt;.*?&lt;/%doc&gt;&quot;&quot;&quot;, Comment.Preproc),
-            (
-                r&quot;(&lt;%)([\w\.\:]+)&quot;,
-                bygroups(Comment.Preproc, Name.Builtin),
-                &quot;tag&quot;,
-            ),
-            (
-                r&quot;(&lt;/%)([\w\.\:]+)(&gt;)&quot;,
-                bygroups(Comment.Preproc, Name.Builtin, Comment.Preproc),
-            ),
-            (r&quot;&lt;%(?=([\w\.\:]+))&quot;, Comment.Preproc, &quot;ondeftags&quot;),
-            (
-                r&quot;(?s)(&lt;%(?:!?))(.*?)(%&gt;)&quot;,
-                bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
-            ),
-            (
-                r&quot;(\$\{)(.*?)(\})&quot;,
-                bygroups(Comment.Preproc, using(PythonLexer), Comment.Preproc),
-            ),
-            (
-                r&quot;&quot;&quot;(?sx)
-                (.+?)               # anything, followed by:
-                (?:
-                 (?&lt;=\n)(?=%(?!%)|\#\#) |  # an eval or comment line
-                 (?=\#\*) |          # multiline comment
-                 (?=&lt;/?%) |         # a python block
-                                    # call start or end
-                 (?=\$\{) |         # a substitution
-                 (?&lt;=\n)(?=\s*%) |
-                                    # - don't consume
-                 (\\\n) |           # an escaped newline
-                 \Z                 # end of string
-                )
-            &quot;&quot;&quot;,
-                bygroups(Other, Operator),
-            ),
-            (r&quot;\s+&quot;, Text),
-        ],
-        &quot;ondeftags&quot;: [
-            (r&quot;&lt;%&quot;, Comment.Preproc),
-            (r&quot;(?&lt;=&lt;%)(include|inherit|namespace|page)&quot;, Name.Builtin),
-            include(&quot;tag&quot;),
-        ],
-        &quot;tag&quot;: [
-            (r'((?:\w+)\s*=)\s*(&quot;.*?&quot;)', bygroups(Name.Attribute, String)),
-            (r&quot;/?\s*&gt;&quot;, Comment.Preproc, &quot;#pop&quot;),
-            (r&quot;\s+&quot;, Text),
-        ],
-        &quot;attr&quot;: [
-            ('&quot;.*?&quot;', String, &quot;#pop&quot;),
-            (&quot;'.*?'&quot;, String, &quot;#pop&quot;),
-            (r&quot;[^\s&gt;]+&quot;, String, &quot;#pop&quot;),
-        ],
-    }
+    tokens = None
 
 
 class MakoHtmlLexer(DelegatingLexer):
</failure>
			<system-out>    }</system-out>
		</testcase>
		<testcase name="Mutant #3305" file="mako/ext/pygmentplugin.py" line="106">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -104,7 +104,7 @@
 
 
 class MakoHtmlLexer(DelegatingLexer):
-    name = &quot;HTML+Mako&quot;
+    name = &quot;XXHTML+MakoXX&quot;
     aliases = [&quot;html+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;HTML+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3306" file="mako/ext/pygmentplugin.py" line="106">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -104,7 +104,7 @@
 
 
 class MakoHtmlLexer(DelegatingLexer):
-    name = &quot;HTML+Mako&quot;
+    name = None
     aliases = [&quot;html+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;HTML+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3307" file="mako/ext/pygmentplugin.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -105,7 +105,7 @@
 
 class MakoHtmlLexer(DelegatingLexer):
     name = &quot;HTML+Mako&quot;
-    aliases = [&quot;html+mako&quot;]
+    aliases = [&quot;XXhtml+makoXX&quot;]
 
     def __init__(self, **options):
         super(MakoHtmlLexer, self).__init__(HtmlLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;html+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3308" file="mako/ext/pygmentplugin.py" line="107">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -105,7 +105,7 @@
 
 class MakoHtmlLexer(DelegatingLexer):
     name = &quot;HTML+Mako&quot;
-    aliases = [&quot;html+mako&quot;]
+    aliases = None
 
     def __init__(self, **options):
         super(MakoHtmlLexer, self).__init__(HtmlLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;html+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3309" file="mako/ext/pygmentplugin.py" line="114">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -112,7 +112,7 @@
 
 
 class MakoXmlLexer(DelegatingLexer):
-    name = &quot;XML+Mako&quot;
+    name = &quot;XXXML+MakoXX&quot;
     aliases = [&quot;xml+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;XML+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3310" file="mako/ext/pygmentplugin.py" line="114">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -112,7 +112,7 @@
 
 
 class MakoXmlLexer(DelegatingLexer):
-    name = &quot;XML+Mako&quot;
+    name = None
     aliases = [&quot;xml+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;XML+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3311" file="mako/ext/pygmentplugin.py" line="115">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -113,7 +113,7 @@
 
 class MakoXmlLexer(DelegatingLexer):
     name = &quot;XML+Mako&quot;
-    aliases = [&quot;xml+mako&quot;]
+    aliases = [&quot;XXxml+makoXX&quot;]
 
     def __init__(self, **options):
         super(MakoXmlLexer, self).__init__(XmlLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;xml+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3312" file="mako/ext/pygmentplugin.py" line="115">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -113,7 +113,7 @@
 
 class MakoXmlLexer(DelegatingLexer):
     name = &quot;XML+Mako&quot;
-    aliases = [&quot;xml+mako&quot;]
+    aliases = None
 
     def __init__(self, **options):
         super(MakoXmlLexer, self).__init__(XmlLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;xml+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3313" file="mako/ext/pygmentplugin.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -120,7 +120,7 @@
 
 
 class MakoJavascriptLexer(DelegatingLexer):
-    name = &quot;JavaScript+Mako&quot;
+    name = &quot;XXJavaScript+MakoXX&quot;
     aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;JavaScript+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3314" file="mako/ext/pygmentplugin.py" line="122">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -120,7 +120,7 @@
 
 
 class MakoJavascriptLexer(DelegatingLexer):
-    name = &quot;JavaScript+Mako&quot;
+    name = None
     aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;JavaScript+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3315" file="mako/ext/pygmentplugin.py" line="123">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -121,7 +121,7 @@
 
 class MakoJavascriptLexer(DelegatingLexer):
     name = &quot;JavaScript+Mako&quot;
-    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]
+    aliases = [&quot;XXjs+makoXX&quot;, &quot;javascript+mako&quot;]
 
     def __init__(self, **options):
         super(MakoJavascriptLexer, self).__init__(
</failure>
			<system-out>    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3316" file="mako/ext/pygmentplugin.py" line="123">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -121,7 +121,7 @@
 
 class MakoJavascriptLexer(DelegatingLexer):
     name = &quot;JavaScript+Mako&quot;
-    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]
+    aliases = [&quot;js+mako&quot;, &quot;XXjavascript+makoXX&quot;]
 
     def __init__(self, **options):
         super(MakoJavascriptLexer, self).__init__(
</failure>
			<system-out>    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3317" file="mako/ext/pygmentplugin.py" line="123">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -121,7 +121,7 @@
 
 class MakoJavascriptLexer(DelegatingLexer):
     name = &quot;JavaScript+Mako&quot;
-    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]
+    aliases = None
 
     def __init__(self, **options):
         super(MakoJavascriptLexer, self).__init__(
</failure>
			<system-out>    aliases = [&quot;js+mako&quot;, &quot;javascript+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3318" file="mako/ext/pygmentplugin.py" line="132">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -130,7 +130,7 @@
 
 
 class MakoCssLexer(DelegatingLexer):
-    name = &quot;CSS+Mako&quot;
+    name = &quot;XXCSS+MakoXX&quot;
     aliases = [&quot;css+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;CSS+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3319" file="mako/ext/pygmentplugin.py" line="132">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -130,7 +130,7 @@
 
 
 class MakoCssLexer(DelegatingLexer):
-    name = &quot;CSS+Mako&quot;
+    name = None
     aliases = [&quot;css+mako&quot;]
 
     def __init__(self, **options):
</failure>
			<system-out>    name = &quot;CSS+Mako&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3320" file="mako/ext/pygmentplugin.py" line="133">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -131,7 +131,7 @@
 
 class MakoCssLexer(DelegatingLexer):
     name = &quot;CSS+Mako&quot;
-    aliases = [&quot;css+mako&quot;]
+    aliases = [&quot;XXcss+makoXX&quot;]
 
     def __init__(self, **options):
         super(MakoCssLexer, self).__init__(CssLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;css+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3321" file="mako/ext/pygmentplugin.py" line="133">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -131,7 +131,7 @@
 
 class MakoCssLexer(DelegatingLexer):
     name = &quot;CSS+Mako&quot;
-    aliases = [&quot;css+mako&quot;]
+    aliases = None
 
     def __init__(self, **options):
         super(MakoCssLexer, self).__init__(CssLexer, MakoLexer, **options)
</failure>
			<system-out>    aliases = [&quot;css+mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3322" file="mako/ext/pygmentplugin.py" line="140">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -138,7 +138,7 @@
 
 
 pygments_html_formatter = HtmlFormatter(
-    cssclass=&quot;syntax-highlighted&quot;, linenos=True
+    cssclass=&quot;XXsyntax-highlightedXX&quot;, linenos=True
 )
 
 
</failure>
			<system-out>    cssclass=&quot;syntax-highlighted&quot;, linenos=True</system-out>
		</testcase>
		<testcase name="Mutant #3323" file="mako/ext/pygmentplugin.py" line="140">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -138,7 +138,7 @@
 
 
 pygments_html_formatter = HtmlFormatter(
-    cssclass=&quot;syntax-highlighted&quot;, linenos=True
+    cssclass=&quot;syntax-highlighted&quot;, linenos=False
 )
 
 
</failure>
			<system-out>    cssclass=&quot;syntax-highlighted&quot;, linenos=True</system-out>
		</testcase>
		<testcase name="Mutant #3324" file="mako/ext/pygmentplugin.py" line="141">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -137,9 +137,7 @@
         super(MakoCssLexer, self).__init__(CssLexer, MakoLexer, **options)
 
 
-pygments_html_formatter = HtmlFormatter(
-    cssclass=&quot;syntax-highlighted&quot;, linenos=True
-)
+pygments_html_formatter = None
 
 
 def syntax_highlight(filename=&quot;&quot;, language=None):
</failure>
			<system-out>)</system-out>
		</testcase>
		<testcase name="Mutant #3325" file="mako/ext/pygmentplugin.py" line="144">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -142,7 +142,7 @@
 )
 
 
-def syntax_highlight(filename=&quot;&quot;, language=None):
+def syntax_highlight(filename=&quot;XXXX&quot;, language=None):
     mako_lexer = MakoLexer()
     if compat.py3k:
         python_lexer = Python3Lexer()
</failure>
			<system-out>def syntax_highlight(filename=&quot;&quot;, language=None):</system-out>
		</testcase>
		<testcase name="Mutant #3326" file="mako/ext/pygmentplugin.py" line="145">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -143,7 +143,7 @@
 
 
 def syntax_highlight(filename=&quot;&quot;, language=None):
-    mako_lexer = MakoLexer()
+    mako_lexer = None
     if compat.py3k:
         python_lexer = Python3Lexer()
     else:
</failure>
			<system-out>    mako_lexer = MakoLexer()</system-out>
		</testcase>
		<testcase name="Mutant #3327" file="mako/ext/pygmentplugin.py" line="147">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -145,7 +145,7 @@
 def syntax_highlight(filename=&quot;&quot;, language=None):
     mako_lexer = MakoLexer()
     if compat.py3k:
-        python_lexer = Python3Lexer()
+        python_lexer = None
     else:
         python_lexer = PythonLexer()
     if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
</failure>
			<system-out>        python_lexer = Python3Lexer()</system-out>
		</testcase>
		<testcase name="Mutant #3328" file="mako/ext/pygmentplugin.py" line="149">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -147,7 +147,7 @@
     if compat.py3k:
         python_lexer = Python3Lexer()
     else:
-        python_lexer = PythonLexer()
+        python_lexer = None
     if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
</failure>
			<system-out>        python_lexer = PythonLexer()</system-out>
		</testcase>
		<testcase name="Mutant #3329" file="mako/ext/pygmentplugin.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -148,7 +148,7 @@
         python_lexer = Python3Lexer()
     else:
         python_lexer = PythonLexer()
-    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
+    if filename.startswith(&quot;XXmemory:XX&quot;) or language == &quot;mako&quot;:
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
         )
</failure>
			<system-out>    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3330" file="mako/ext/pygmentplugin.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -148,7 +148,7 @@
         python_lexer = Python3Lexer()
     else:
         python_lexer = PythonLexer()
-    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
+    if filename.startswith(&quot;memory:&quot;) or language != &quot;mako&quot;:
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
         )
</failure>
			<system-out>    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3331" file="mako/ext/pygmentplugin.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -148,7 +148,7 @@
         python_lexer = Python3Lexer()
     else:
         python_lexer = PythonLexer()
-    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
+    if filename.startswith(&quot;memory:&quot;) or language == &quot;XXmakoXX&quot;:
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
         )
</failure>
			<system-out>    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3332" file="mako/ext/pygmentplugin.py" line="150">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -148,7 +148,7 @@
         python_lexer = Python3Lexer()
     else:
         python_lexer = PythonLexer()
-    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
+    if filename.startswith(&quot;memory:&quot;) and language == &quot;mako&quot;:
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
         )
</failure>
			<system-out>    if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3333" file="mako/ext/pygmentplugin.py" line="153">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -149,9 +149,7 @@
     else:
         python_lexer = PythonLexer()
     if filename.startswith(&quot;memory:&quot;) or language == &quot;mako&quot;:
-        return lambda string: highlight(
-            string, mako_lexer, pygments_html_formatter
-        )
+        return lambda string: None
     return lambda string: highlight(
         string, python_lexer, pygments_html_formatter
     )
</failure>
			<system-out>        )</system-out>
		</testcase>
		<testcase name="Mutant #3334" file="mako/ext/pygmentplugin.py" line="156">
			<failure type="failure" message="bad_survived">--- mako/ext/pygmentplugin.py
+++ mako/ext/pygmentplugin.py
@@ -152,7 +152,5 @@
         return lambda string: highlight(
             string, mako_lexer, pygments_html_formatter
         )
-    return lambda string: highlight(
-        string, python_lexer, pygments_html_formatter
-    )
+    return lambda string: None
 
</failure>
			<system-out>    )</system-out>
		</testcase>
		<testcase name="Mutant #3335" file="mako/ext/beaker_cache.py" line="14">
			<system-out>    has_beaker = False</system-out>
		</testcase>
		<testcase name="Mutant #3336" file="mako/ext/beaker_cache.py" line="14">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -12,7 +12,7 @@
 try:
     from beaker import cache as beaker_cache
 except:
-    has_beaker = False
+    has_beaker = None
 else:
     has_beaker = True
 
</failure>
			<system-out>    has_beaker = False</system-out>
		</testcase>
		<testcase name="Mutant #3337" file="mako/ext/beaker_cache.py" line="16">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -14,7 +14,7 @@
 except:
     has_beaker = False
 else:
-    has_beaker = True
+    has_beaker = False
 
 _beaker_cache = None
 
</failure>
			<system-out>    has_beaker = True</system-out>
		</testcase>
		<testcase name="Mutant #3338" file="mako/ext/beaker_cache.py" line="16">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -14,7 +14,7 @@
 except:
     has_beaker = False
 else:
-    has_beaker = True
+    has_beaker = None
 
 _beaker_cache = None
 
</failure>
			<system-out>    has_beaker = True</system-out>
		</testcase>
		<testcase name="Mutant #3339" file="mako/ext/beaker_cache.py" line="18">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -16,7 +16,7 @@
 else:
     has_beaker = True
 
-_beaker_cache = None
+_beaker_cache = &quot;&quot;
 
 
 class BeakerCacheImpl(CacheImpl):
</failure>
			<system-out>_beaker_cache = None</system-out>
		</testcase>
		<testcase name="Mutant #3340" file="mako/ext/beaker_cache.py" line="32">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -30,7 +30,7 @@
     &quot;&quot;&quot;
 
     def __init__(self, cache):
-        if not has_beaker:
+        if  has_beaker:
             raise exceptions.RuntimeException(
                 &quot;Can't initialize Beaker plugin; Beaker is not installed.&quot;
             )
</failure>
			<system-out>        if not has_beaker:</system-out>
		</testcase>
		<testcase name="Mutant #3341" file="mako/ext/beaker_cache.py" line="34">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -32,7 +32,7 @@
     def __init__(self, cache):
         if not has_beaker:
             raise exceptions.RuntimeException(
-                &quot;Can't initialize Beaker plugin; Beaker is not installed.&quot;
+                &quot;XXCan't initialize Beaker plugin; Beaker is not installed.XX&quot;
             )
         global _beaker_cache
         if _beaker_cache is None:
</failure>
			<system-out>                &quot;Can't initialize Beaker plugin; Beaker is not installed.&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3342" file="mako/ext/beaker_cache.py" line="37">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -35,7 +35,7 @@
                 &quot;Can't initialize Beaker plugin; Beaker is not installed.&quot;
             )
         global _beaker_cache
-        if _beaker_cache is None:
+        if _beaker_cache is not None:
             if &quot;manager&quot; in cache.template.cache_args:
                 _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
             else:
</failure>
			<system-out>        if _beaker_cache is None:</system-out>
		</testcase>
		<testcase name="Mutant #3343" file="mako/ext/beaker_cache.py" line="38">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -36,7 +36,7 @@
             )
         global _beaker_cache
         if _beaker_cache is None:
-            if &quot;manager&quot; in cache.template.cache_args:
+            if &quot;XXmanagerXX&quot; in cache.template.cache_args:
                 _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
             else:
                 _beaker_cache = beaker_cache.CacheManager()
</failure>
			<system-out>            if &quot;manager&quot; in cache.template.cache_args:</system-out>
		</testcase>
		<testcase name="Mutant #3344" file="mako/ext/beaker_cache.py" line="38">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -36,7 +36,7 @@
             )
         global _beaker_cache
         if _beaker_cache is None:
-            if &quot;manager&quot; in cache.template.cache_args:
+            if &quot;manager&quot; not in cache.template.cache_args:
                 _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
             else:
                 _beaker_cache = beaker_cache.CacheManager()
</failure>
			<system-out>            if &quot;manager&quot; in cache.template.cache_args:</system-out>
		</testcase>
		<testcase name="Mutant #3345" file="mako/ext/beaker_cache.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -37,7 +37,7 @@
         global _beaker_cache
         if _beaker_cache is None:
             if &quot;manager&quot; in cache.template.cache_args:
-                _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
+                _beaker_cache = cache.template.cache_args[&quot;XXmanagerXX&quot;]
             else:
                 _beaker_cache = beaker_cache.CacheManager()
         super(BeakerCacheImpl, self).__init__(cache)
</failure>
			<system-out>                _beaker_cache = cache.template.cache_args[&quot;manager&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3346" file="mako/ext/beaker_cache.py" line="39">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -37,7 +37,7 @@
         global _beaker_cache
         if _beaker_cache is None:
             if &quot;manager&quot; in cache.template.cache_args:
-                _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
+                _beaker_cache = None
             else:
                 _beaker_cache = beaker_cache.CacheManager()
         super(BeakerCacheImpl, self).__init__(cache)
</failure>
			<system-out>                _beaker_cache = cache.template.cache_args[&quot;manager&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3347" file="mako/ext/beaker_cache.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -39,7 +39,7 @@
             if &quot;manager&quot; in cache.template.cache_args:
                 _beaker_cache = cache.template.cache_args[&quot;manager&quot;]
             else:
-                _beaker_cache = beaker_cache.CacheManager()
+                _beaker_cache = None
         super(BeakerCacheImpl, self).__init__(cache)
 
     def _get_cache(self, **kw):
</failure>
			<system-out>                _beaker_cache = beaker_cache.CacheManager()</system-out>
		</testcase>
		<testcase name="Mutant #3348" file="mako/ext/beaker_cache.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -43,7 +43,7 @@
         super(BeakerCacheImpl, self).__init__(cache)
 
     def _get_cache(self, **kw):
-        expiretime = kw.pop(&quot;timeout&quot;, None)
+        expiretime = kw.pop(&quot;XXtimeoutXX&quot;, None)
         if &quot;dir&quot; in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
</failure>
			<system-out>        expiretime = kw.pop(&quot;timeout&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3349" file="mako/ext/beaker_cache.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -43,7 +43,7 @@
         super(BeakerCacheImpl, self).__init__(cache)
 
     def _get_cache(self, **kw):
-        expiretime = kw.pop(&quot;timeout&quot;, None)
+        expiretime = None
         if &quot;dir&quot; in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
</failure>
			<system-out>        expiretime = kw.pop(&quot;timeout&quot;, None)</system-out>
		</testcase>
		<testcase name="Mutant #3350" file="mako/ext/beaker_cache.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -44,7 +44,7 @@
 
     def _get_cache(self, **kw):
         expiretime = kw.pop(&quot;timeout&quot;, None)
-        if &quot;dir&quot; in kw:
+        if &quot;XXdirXX&quot; in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
</failure>
			<system-out>        if &quot;dir&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3351" file="mako/ext/beaker_cache.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -44,7 +44,7 @@
 
     def _get_cache(self, **kw):
         expiretime = kw.pop(&quot;timeout&quot;, None)
-        if &quot;dir&quot; in kw:
+        if &quot;dir&quot; not in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
</failure>
			<system-out>        if &quot;dir&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3352" file="mako/ext/beaker_cache.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -45,7 +45,7 @@
     def _get_cache(self, **kw):
         expiretime = kw.pop(&quot;timeout&quot;, None)
         if &quot;dir&quot; in kw:
-            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
+            kw[&quot;XXdata_dirXX&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
</failure>
			<system-out>            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3353" file="mako/ext/beaker_cache.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -45,7 +45,7 @@
     def _get_cache(self, **kw):
         expiretime = kw.pop(&quot;timeout&quot;, None)
         if &quot;dir&quot; in kw:
-            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
+            kw[&quot;data_dir&quot;] = kw.pop(&quot;XXdirXX&quot;)
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
</failure>
			<system-out>            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3354" file="mako/ext/beaker_cache.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -45,7 +45,7 @@
     def _get_cache(self, **kw):
         expiretime = kw.pop(&quot;timeout&quot;, None)
         if &quot;dir&quot; in kw:
-            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
+            kw[&quot;data_dir&quot;] = None
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
</failure>
			<system-out>            kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3355" file="mako/ext/beaker_cache.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -47,7 +47,7 @@
         if &quot;dir&quot; in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
-            kw[&quot;data_dir&quot;] = self.cache.template.module_directory
+            kw[&quot;XXdata_dirXX&quot;] = self.cache.template.module_directory
 
         if &quot;manager&quot; in kw:
             kw.pop(&quot;manager&quot;)
</failure>
			<system-out>            kw[&quot;data_dir&quot;] = self.cache.template.module_directory</system-out>
		</testcase>
		<testcase name="Mutant #3356" file="mako/ext/beaker_cache.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -47,7 +47,7 @@
         if &quot;dir&quot; in kw:
             kw[&quot;data_dir&quot;] = kw.pop(&quot;dir&quot;)
         elif self.cache.template.module_directory:
-            kw[&quot;data_dir&quot;] = self.cache.template.module_directory
+            kw[&quot;data_dir&quot;] = None
 
         if &quot;manager&quot; in kw:
             kw.pop(&quot;manager&quot;)
</failure>
			<system-out>            kw[&quot;data_dir&quot;] = self.cache.template.module_directory</system-out>
		</testcase>
		<testcase name="Mutant #3357" file="mako/ext/beaker_cache.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -49,7 +49,7 @@
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
-        if &quot;manager&quot; in kw:
+        if &quot;XXmanagerXX&quot; in kw:
             kw.pop(&quot;manager&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
</failure>
			<system-out>        if &quot;manager&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3358" file="mako/ext/beaker_cache.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -49,7 +49,7 @@
         elif self.cache.template.module_directory:
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
-        if &quot;manager&quot; in kw:
+        if &quot;manager&quot; not in kw:
             kw.pop(&quot;manager&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
</failure>
			<system-out>        if &quot;manager&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3359" file="mako/ext/beaker_cache.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -50,7 +50,7 @@
             kw[&quot;data_dir&quot;] = self.cache.template.module_directory
 
         if &quot;manager&quot; in kw:
-            kw.pop(&quot;manager&quot;)
+            kw.pop(&quot;XXmanagerXX&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
</failure>
			<system-out>            kw.pop(&quot;manager&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3360" file="mako/ext/beaker_cache.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -52,7 +52,7 @@
         if &quot;manager&quot; in kw:
             kw.pop(&quot;manager&quot;)
 
-        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
+        if kw.get(&quot;XXtypeXX&quot;) == &quot;memcached&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
</failure>
			<system-out>        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3361" file="mako/ext/beaker_cache.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -52,7 +52,7 @@
         if &quot;manager&quot; in kw:
             kw.pop(&quot;manager&quot;)
 
-        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
+        if kw.get(&quot;type&quot;) != &quot;memcached&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
</failure>
			<system-out>        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3362" file="mako/ext/beaker_cache.py" line="54">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -52,7 +52,7 @@
         if &quot;manager&quot; in kw:
             kw.pop(&quot;manager&quot;)
 
-        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
+        if kw.get(&quot;type&quot;) == &quot;XXmemcachedXX&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
</failure>
			<system-out>        if kw.get(&quot;type&quot;) == &quot;memcached&quot;:</system-out>
		</testcase>
		<testcase name="Mutant #3363" file="mako/ext/beaker_cache.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -53,7 +53,7 @@
             kw.pop(&quot;manager&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
-            kw[&quot;type&quot;] = &quot;ext:memcached&quot;
+            kw[&quot;XXtypeXX&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
             region = kw.pop(&quot;region&quot;)
</failure>
			<system-out>            kw[&quot;type&quot;] = &quot;ext:memcached&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3364" file="mako/ext/beaker_cache.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -53,7 +53,7 @@
             kw.pop(&quot;manager&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
-            kw[&quot;type&quot;] = &quot;ext:memcached&quot;
+            kw[&quot;type&quot;] = &quot;XXext:memcachedXX&quot;
 
         if &quot;region&quot; in kw:
             region = kw.pop(&quot;region&quot;)
</failure>
			<system-out>            kw[&quot;type&quot;] = &quot;ext:memcached&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3365" file="mako/ext/beaker_cache.py" line="55">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -53,7 +53,7 @@
             kw.pop(&quot;manager&quot;)
 
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
-            kw[&quot;type&quot;] = &quot;ext:memcached&quot;
+            kw[&quot;type&quot;] = None
 
         if &quot;region&quot; in kw:
             region = kw.pop(&quot;region&quot;)
</failure>
			<system-out>            kw[&quot;type&quot;] = &quot;ext:memcached&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3366" file="mako/ext/beaker_cache.py" line="57">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -55,7 +55,7 @@
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
-        if &quot;region&quot; in kw:
+        if &quot;XXregionXX&quot; in kw:
             region = kw.pop(&quot;region&quot;)
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
</failure>
			<system-out>        if &quot;region&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3367" file="mako/ext/beaker_cache.py" line="57">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -55,7 +55,7 @@
         if kw.get(&quot;type&quot;) == &quot;memcached&quot;:
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
-        if &quot;region&quot; in kw:
+        if &quot;region&quot; not in kw:
             region = kw.pop(&quot;region&quot;)
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
</failure>
			<system-out>        if &quot;region&quot; in kw:</system-out>
		</testcase>
		<testcase name="Mutant #3368" file="mako/ext/beaker_cache.py" line="58">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -56,7 +56,7 @@
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
-            region = kw.pop(&quot;region&quot;)
+            region = kw.pop(&quot;XXregionXX&quot;)
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
</failure>
			<system-out>            region = kw.pop(&quot;region&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3369" file="mako/ext/beaker_cache.py" line="58">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -56,7 +56,7 @@
             kw[&quot;type&quot;] = &quot;ext:memcached&quot;
 
         if &quot;region&quot; in kw:
-            region = kw.pop(&quot;region&quot;)
+            region = None
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
</failure>
			<system-out>            region = kw.pop(&quot;region&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3370" file="mako/ext/beaker_cache.py" line="59">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -57,7 +57,7 @@
 
         if &quot;region&quot; in kw:
             region = kw.pop(&quot;region&quot;)
-            cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
+            cache = None
         else:
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
         cache_args = {&quot;starttime&quot;: self.cache.starttime}
</failure>
			<system-out>            cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)</system-out>
		</testcase>
		<testcase name="Mutant #3371" file="mako/ext/beaker_cache.py" line="61">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -59,7 +59,7 @@
             region = kw.pop(&quot;region&quot;)
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
-            cache = _beaker_cache.get_cache(self.cache.id, **kw)
+            cache = None
         cache_args = {&quot;starttime&quot;: self.cache.starttime}
         if expiretime:
             cache_args[&quot;expiretime&quot;] = expiretime
</failure>
			<system-out>            cache = _beaker_cache.get_cache(self.cache.id, **kw)</system-out>
		</testcase>
		<testcase name="Mutant #3372" file="mako/ext/beaker_cache.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -60,7 +60,7 @@
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
-        cache_args = {&quot;starttime&quot;: self.cache.starttime}
+        cache_args = {&quot;XXstarttimeXX&quot;: self.cache.starttime}
         if expiretime:
             cache_args[&quot;expiretime&quot;] = expiretime
         return cache, cache_args
</failure>
			<system-out>        cache_args = {&quot;starttime&quot;: self.cache.starttime}</system-out>
		</testcase>
		<testcase name="Mutant #3373" file="mako/ext/beaker_cache.py" line="62">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -60,7 +60,7 @@
             cache = _beaker_cache.get_cache_region(self.cache.id, region, **kw)
         else:
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
-        cache_args = {&quot;starttime&quot;: self.cache.starttime}
+        cache_args = None
         if expiretime:
             cache_args[&quot;expiretime&quot;] = expiretime
         return cache, cache_args
</failure>
			<system-out>        cache_args = {&quot;starttime&quot;: self.cache.starttime}</system-out>
		</testcase>
		<testcase name="Mutant #3374" file="mako/ext/beaker_cache.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -62,7 +62,7 @@
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
         cache_args = {&quot;starttime&quot;: self.cache.starttime}
         if expiretime:
-            cache_args[&quot;expiretime&quot;] = expiretime
+            cache_args[&quot;XXexpiretimeXX&quot;] = expiretime
         return cache, cache_args
 
     def get_or_create(self, key, creation_function, **kw):
</failure>
			<system-out>            cache_args[&quot;expiretime&quot;] = expiretime</system-out>
		</testcase>
		<testcase name="Mutant #3375" file="mako/ext/beaker_cache.py" line="64">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -62,7 +62,7 @@
             cache = _beaker_cache.get_cache(self.cache.id, **kw)
         cache_args = {&quot;starttime&quot;: self.cache.starttime}
         if expiretime:
-            cache_args[&quot;expiretime&quot;] = expiretime
+            cache_args[&quot;expiretime&quot;] = None
         return cache, cache_args
 
     def get_or_create(self, key, creation_function, **kw):
</failure>
			<system-out>            cache_args[&quot;expiretime&quot;] = expiretime</system-out>
		</testcase>
		<testcase name="Mutant #3376" file="mako/ext/beaker_cache.py" line="68">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -66,7 +66,7 @@
         return cache, cache_args
 
     def get_or_create(self, key, creation_function, **kw):
-        cache, kw = self._get_cache(**kw)
+        cache, kw = None
         return cache.get(key, createfunc=creation_function, **kw)
 
     def put(self, key, value, **kw):
</failure>
			<system-out>        cache, kw = self._get_cache(**kw)</system-out>
		</testcase>
		<testcase name="Mutant #3377" file="mako/ext/beaker_cache.py" line="72">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -70,7 +70,7 @@
         return cache.get(key, createfunc=creation_function, **kw)
 
     def put(self, key, value, **kw):
-        cache, kw = self._get_cache(**kw)
+        cache, kw = None
         cache.put(key, value, **kw)
 
     def get(self, key, **kw):
</failure>
			<system-out>        cache, kw = self._get_cache(**kw)</system-out>
		</testcase>
		<testcase name="Mutant #3378" file="mako/ext/beaker_cache.py" line="76">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -74,7 +74,7 @@
         cache.put(key, value, **kw)
 
     def get(self, key, **kw):
-        cache, kw = self._get_cache(**kw)
+        cache, kw = None
         return cache.get(key, **kw)
 
     def invalidate(self, key, **kw):
</failure>
			<system-out>        cache, kw = self._get_cache(**kw)</system-out>
		</testcase>
		<testcase name="Mutant #3379" file="mako/ext/beaker_cache.py" line="80">
			<failure type="failure" message="bad_survived">--- mako/ext/beaker_cache.py
+++ mako/ext/beaker_cache.py
@@ -78,6 +78,6 @@
         return cache.get(key, **kw)
 
     def invalidate(self, key, **kw):
-        cache, kw = self._get_cache(**kw)
+        cache, kw = None
         cache.remove_value(key, **kw)
 
</failure>
			<system-out>        cache, kw = self._get_cache(**kw)</system-out>
		</testcase>
		<testcase name="Mutant #3380" file="mako/ext/linguaplugin.py" line="20">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -18,7 +18,7 @@
 
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
-    extensions = [&quot;.mako&quot;]
+    extensions = [&quot;XX.makoXX&quot;]
     default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
</failure>
			<system-out>    extensions = [&quot;.mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3381" file="mako/ext/linguaplugin.py" line="20">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -18,7 +18,7 @@
 
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
-    extensions = [&quot;.mako&quot;]
+    extensions = None
     default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
</failure>
			<system-out>    extensions = [&quot;.mako&quot;]</system-out>
		</testcase>
		<testcase name="Mutant #3382" file="mako/ext/linguaplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
     extensions = [&quot;.mako&quot;]
-    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
+    default_config = {&quot;XXencodingXX&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
</failure>
			<system-out>    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #3383" file="mako/ext/linguaplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
     extensions = [&quot;.mako&quot;]
-    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
+    default_config = {&quot;encoding&quot;: &quot;XXutf-8XX&quot;, &quot;comment-tags&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
</failure>
			<system-out>    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #3384" file="mako/ext/linguaplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
     extensions = [&quot;.mako&quot;]
-    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
+    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;XXcomment-tagsXX&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
</failure>
			<system-out>    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #3385" file="mako/ext/linguaplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
     extensions = [&quot;.mako&quot;]
-    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
+    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;XXXX&quot;}
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
</failure>
			<system-out>    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #3386" file="mako/ext/linguaplugin.py" line="21">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -19,7 +19,7 @@
     &quot;&quot;&quot;Mako templates&quot;&quot;&quot;
 
     extensions = [&quot;.mako&quot;]
-    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
+    default_config = None
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
</failure>
			<system-out>    default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}</system-out>
		</testcase>
		<testcase name="Mutant #3387" file="mako/ext/linguaplugin.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -22,7 +22,7 @@
     default_config = {&quot;encoding&quot;: &quot;utf-8&quot;, &quot;comment-tags&quot;: &quot;&quot;}
 
     def __call__(self, filename, options, fileobj=None):
-        self.options = options
+        self.options = None
         self.filename = filename
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
</failure>
			<system-out>        self.options = options</system-out>
		</testcase>
		<testcase name="Mutant #3388" file="mako/ext/linguaplugin.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -23,7 +23,7 @@
 
     def __call__(self, filename, options, fileobj=None):
         self.options = options
-        self.filename = filename
+        self.filename = None
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
             fileobj = open(filename, &quot;rb&quot;)
</failure>
			<system-out>        self.filename = filename</system-out>
		</testcase>
		<testcase name="Mutant #3389" file="mako/ext/linguaplugin.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -24,7 +24,7 @@
     def __call__(self, filename, options, fileobj=None):
         self.options = options
         self.filename = filename
-        self.python_extractor = get_extractor(&quot;x.py&quot;)
+        self.python_extractor = get_extractor(&quot;XXx.pyXX&quot;)
         if fileobj is None:
             fileobj = open(filename, &quot;rb&quot;)
             must_close = True
</failure>
			<system-out>        self.python_extractor = get_extractor(&quot;x.py&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3390" file="mako/ext/linguaplugin.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -24,7 +24,7 @@
     def __call__(self, filename, options, fileobj=None):
         self.options = options
         self.filename = filename
-        self.python_extractor = get_extractor(&quot;x.py&quot;)
+        self.python_extractor = None
         if fileobj is None:
             fileobj = open(filename, &quot;rb&quot;)
             must_close = True
</failure>
			<system-out>        self.python_extractor = get_extractor(&quot;x.py&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3391" file="mako/ext/linguaplugin.py" line="27">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -25,7 +25,7 @@
         self.options = options
         self.filename = filename
         self.python_extractor = get_extractor(&quot;x.py&quot;)
-        if fileobj is None:
+        if fileobj is not None:
             fileobj = open(filename, &quot;rb&quot;)
             must_close = True
         else:
</failure>
			<system-out>        if fileobj is None:</system-out>
		</testcase>
		<testcase name="Mutant #3392" file="mako/ext/linguaplugin.py" line="28">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -26,7 +26,7 @@
         self.filename = filename
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
-            fileobj = open(filename, &quot;rb&quot;)
+            fileobj = open(filename, &quot;XXrbXX&quot;)
             must_close = True
         else:
             must_close = False
</failure>
			<system-out>            fileobj = open(filename, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3393" file="mako/ext/linguaplugin.py" line="28">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -26,7 +26,7 @@
         self.filename = filename
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
-            fileobj = open(filename, &quot;rb&quot;)
+            fileobj = None
             must_close = True
         else:
             must_close = False
</failure>
			<system-out>            fileobj = open(filename, &quot;rb&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3394" file="mako/ext/linguaplugin.py" line="29">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -27,7 +27,7 @@
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
             fileobj = open(filename, &quot;rb&quot;)
-            must_close = True
+            must_close = False
         else:
             must_close = False
         try:
</failure>
			<system-out>            must_close = True</system-out>
		</testcase>
		<testcase name="Mutant #3395" file="mako/ext/linguaplugin.py" line="29">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -27,7 +27,7 @@
         self.python_extractor = get_extractor(&quot;x.py&quot;)
         if fileobj is None:
             fileobj = open(filename, &quot;rb&quot;)
-            must_close = True
+            must_close = None
         else:
             must_close = False
         try:
</failure>
			<system-out>            must_close = True</system-out>
		</testcase>
		<testcase name="Mutant #3396" file="mako/ext/linguaplugin.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -29,7 +29,7 @@
             fileobj = open(filename, &quot;rb&quot;)
             must_close = True
         else:
-            must_close = False
+            must_close = True
         try:
             for message in self.process_file(fileobj):
                 yield message
</failure>
			<system-out>            must_close = False</system-out>
		</testcase>
		<testcase name="Mutant #3397" file="mako/ext/linguaplugin.py" line="31">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -29,7 +29,7 @@
             fileobj = open(filename, &quot;rb&quot;)
             must_close = True
         else:
-            must_close = False
+            must_close = None
         try:
             for message in self.process_file(fileobj):
                 yield message
</failure>
			<system-out>            must_close = False</system-out>
		</testcase>
		<testcase name="Mutant #3398" file="mako/ext/linguaplugin.py" line="40">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -38,7 +38,7 @@
                 fileobj.close()
 
     def process_python(self, code, code_lineno, translator_strings):
-        source = code.getvalue().strip()
+        source = None
         if source.endswith(compat.b(&quot;:&quot;)):
             if source in (
                 compat.b(&quot;try:&quot;),
</failure>
			<system-out>        source = code.getvalue().strip()</system-out>
		</testcase>
		<testcase name="Mutant #3399" file="mako/ext/linguaplugin.py" line="41">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -39,7 +39,7 @@
 
     def process_python(self, code, code_lineno, translator_strings):
         source = code.getvalue().strip()
-        if source.endswith(compat.b(&quot;:&quot;)):
+        if source.endswith(compat.b(&quot;XX:XX&quot;)):
             if source in (
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
</failure>
			<system-out>        if source.endswith(compat.b(&quot;:&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #3400" file="mako/ext/linguaplugin.py" line="42">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -40,7 +40,7 @@
     def process_python(self, code, code_lineno, translator_strings):
         source = code.getvalue().strip()
         if source.endswith(compat.b(&quot;:&quot;)):
-            if source in (
+            if source not in (
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
</failure>
			<system-out>            if source in (</system-out>
		</testcase>
		<testcase name="Mutant #3401" file="mako/ext/linguaplugin.py" line="43">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -41,7 +41,7 @@
         source = code.getvalue().strip()
         if source.endswith(compat.b(&quot;:&quot;)):
             if source in (
-                compat.b(&quot;try:&quot;),
+                compat.b(&quot;XXtry:XX&quot;),
                 compat.b(&quot;else:&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
</failure>
			<system-out>                compat.b(&quot;try:&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3402" file="mako/ext/linguaplugin.py" line="44">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -42,7 +42,7 @@
         if source.endswith(compat.b(&quot;:&quot;)):
             if source in (
                 compat.b(&quot;try:&quot;),
-                compat.b(&quot;else:&quot;),
+                compat.b(&quot;XXelse:XX&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
</failure>
			<system-out>                compat.b(&quot;else:&quot;),</system-out>
		</testcase>
		<testcase name="Mutant #3403" file="mako/ext/linguaplugin.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -43,7 +43,7 @@
             if source in (
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
-            ) or source.startswith(compat.b(&quot;except&quot;)):
+            ) or source.startswith(compat.b(&quot;XXexceptXX&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
</failure>
			<system-out>            ) or source.startswith(compat.b(&quot;except&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #3404" file="mako/ext/linguaplugin.py" line="45">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -43,7 +43,7 @@
             if source in (
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
-            ) or source.startswith(compat.b(&quot;except&quot;)):
+            ) and source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
</failure>
			<system-out>            ) or source.startswith(compat.b(&quot;except&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #3405" file="mako/ext/linguaplugin.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -44,7 +44,7 @@
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
-                source = compat.b(&quot;&quot;)  # Ignore try/except and else
+                source = compat.b(&quot;XXXX&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
</failure>
			<system-out>                source = compat.b(&quot;&quot;)  # Ignore try/except and else</system-out>
		</testcase>
		<testcase name="Mutant #3406" file="mako/ext/linguaplugin.py" line="46">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -44,7 +44,7 @@
                 compat.b(&quot;try:&quot;),
                 compat.b(&quot;else:&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
-                source = compat.b(&quot;&quot;)  # Ignore try/except and else
+                source = None  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
</failure>
			<system-out>                source = compat.b(&quot;&quot;)  # Ignore try/except and else</system-out>
		</testcase>
		<testcase name="Mutant #3407" file="mako/ext/linguaplugin.py" line="47">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -45,7 +45,7 @@
                 compat.b(&quot;else:&quot;),
             ) or source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
-            elif source.startswith(compat.b(&quot;elif&quot;)):
+            elif source.startswith(compat.b(&quot;XXelifXX&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
</failure>
			<system-out>            elif source.startswith(compat.b(&quot;elif&quot;)):</system-out>
		</testcase>
		<testcase name="Mutant #3408" file="mako/ext/linguaplugin.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -46,7 +46,7 @@
             ) or source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
-                source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
+                source = source[3:]  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
</failure>
			<system-out>                source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3409" file="mako/ext/linguaplugin.py" line="48">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -46,7 +46,7 @@
             ) or source.startswith(compat.b(&quot;except&quot;)):
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
-                source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
+                source = None  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
</failure>
			<system-out>                source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;</system-out>
		</testcase>
		<testcase name="Mutant #3410" file="mako/ext/linguaplugin.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -47,7 +47,7 @@
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
-            source += compat.b(&quot;pass&quot;)
+            source = compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
             self.filename, self.options, code, code_lineno - 1
</failure>
			<system-out>            source += compat.b(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3411" file="mako/ext/linguaplugin.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -47,7 +47,7 @@
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
-            source += compat.b(&quot;pass&quot;)
+            source -= compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
             self.filename, self.options, code, code_lineno - 1
</failure>
			<system-out>            source += compat.b(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3412" file="mako/ext/linguaplugin.py" line="49">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -47,7 +47,7 @@
                 source = compat.b(&quot;&quot;)  # Ignore try/except and else
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
-            source += compat.b(&quot;pass&quot;)
+            source += compat.b(&quot;XXpassXX&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
             self.filename, self.options, code, code_lineno - 1
</failure>
			<system-out>            source += compat.b(&quot;pass&quot;)</system-out>
		</testcase>
		<testcase name="Mutant #3413" file="mako/ext/linguaplugin.py" line="50">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -48,7 +48,7 @@
             elif source.startswith(compat.b(&quot;elif&quot;)):
                 source = source[2:]  # Replace &quot;elif&quot; with &quot;if&quot;
             source += compat.b(&quot;pass&quot;)
-        code = io.BytesIO(source)
+        code = None
         for msg in self.python_extractor(
             self.filename, self.options, code, code_lineno - 1
         ):
</failure>
			<system-out>        code = io.BytesIO(source)</system-out>
		</testcase>
		<testcase name="Mutant #3414" file="mako/ext/linguaplugin.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -50,7 +50,7 @@
             source += compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
-            self.filename, self.options, code, code_lineno - 1
+            self.filename, self.options, code, code_lineno + 1
         ):
             if translator_strings:
                 msg = Message(
</failure>
			<system-out>            self.filename, self.options, code, code_lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3415" file="mako/ext/linguaplugin.py" line="52">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -50,7 +50,7 @@
             source += compat.b(&quot;pass&quot;)
         code = io.BytesIO(source)
         for msg in self.python_extractor(
-            self.filename, self.options, code, code_lineno - 1
+            self.filename, self.options, code, code_lineno - 2
         ):
             if translator_strings:
                 msg = Message(
</failure>
			<system-out>            self.filename, self.options, code, code_lineno - 1</system-out>
		</testcase>
		<testcase name="Mutant #3416" file="mako/ext/linguaplugin.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -58,7 +58,7 @@
                     msg.msgid,
                     msg.msgid_plural,
                     msg.flags,
-                    compat.u(&quot; &quot;).join(translator_strings + [msg.comment]),
+                    compat.u(&quot;XX XX&quot;).join(translator_strings + [msg.comment]),
                     msg.tcomment,
                     msg.location,
                 )
</failure>
			<system-out>                    compat.u(&quot; &quot;).join(translator_strings + [msg.comment]),</system-out>
		</testcase>
		<testcase name="Mutant #3417" file="mako/ext/linguaplugin.py" line="60">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -58,7 +58,7 @@
                     msg.msgid,
                     msg.msgid_plural,
                     msg.flags,
-                    compat.u(&quot; &quot;).join(translator_strings + [msg.comment]),
+                    compat.u(&quot; &quot;).join(translator_strings - [msg.comment]),
                     msg.tcomment,
                     msg.location,
                 )
</failure>
			<system-out>                    compat.u(&quot; &quot;).join(translator_strings + [msg.comment]),</system-out>
		</testcase>
		<testcase name="Mutant #3418" file="mako/ext/linguaplugin.py" line="63">
			<failure type="failure" message="bad_survived">--- mako/ext/linguaplugin.py
+++ mako/ext/linguaplugin.py
@@ -53,14 +53,6 @@
             self.filename, self.options, code, code_lineno - 1
         ):
             if translator_strings:
-                msg = Message(
-                    msg.msgctxt,
-                    msg.msgid,
-                    msg.msgid_plural,
-                    msg.flags,
-                    compat.u(&quot; &quot;).join(translator_strings + [msg.comment]),
-                    msg.tcomment,
-                    msg.location,
-                )
+                msg = None
             yield msg
 
</failure>
			<system-out>                )</system-out>
		</testcase>
		<testcase name="Mutant #3419" file="mako/ext/turbogears.py" line="15">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -13,7 +13,7 @@
 
     &quot;&quot;&quot;TurboGears compatible Template Plugin.&quot;&quot;&quot;
 
-    def __init__(self, extra_vars_func=None, options=None, extension=&quot;mak&quot;):
+    def __init__(self, extra_vars_func=None, options=None, extension=&quot;XXmakXX&quot;):
         self.extra_vars_func = extra_vars_func
         self.extension = extension
         if not options:
</failure>
			<system-out>    def __init__(self, extra_vars_func=None, options=None, extension=&quot;mak&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #3420" file="mako/ext/turbogears.py" line="16">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -14,7 +14,7 @@
     &quot;&quot;&quot;TurboGears compatible Template Plugin.&quot;&quot;&quot;
 
     def __init__(self, extra_vars_func=None, options=None, extension=&quot;mak&quot;):
-        self.extra_vars_func = extra_vars_func
+        self.extra_vars_func = None
         self.extension = extension
         if not options:
             options = {}
</failure>
			<system-out>        self.extra_vars_func = extra_vars_func</system-out>
		</testcase>
		<testcase name="Mutant #3421" file="mako/ext/turbogears.py" line="17">
			<system-out>        self.extension = extension</system-out>
		</testcase>
		<testcase name="Mutant #3422" file="mako/ext/turbogears.py" line="18">
			<system-out>        if not options:</system-out>
		</testcase>
		<testcase name="Mutant #3423" file="mako/ext/turbogears.py" line="19">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -17,7 +17,7 @@
         self.extra_vars_func = extra_vars_func
         self.extension = extension
         if not options:
-            options = {}
+            options = None
 
         # Pull the options out and initialize the lookup
         lookup_options = {}
</failure>
			<system-out>            options = {}</system-out>
		</testcase>
		<testcase name="Mutant #3424" file="mako/ext/turbogears.py" line="22">
			<system-out>        lookup_options = {}</system-out>
		</testcase>
		<testcase name="Mutant #3425" file="mako/ext/turbogears.py" line="24">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -22,7 +22,7 @@
         # Pull the options out and initialize the lookup
         lookup_options = {}
         for k, v in options.items():
-            if k.startswith(&quot;mako.&quot;):
+            if k.startswith(&quot;XXmako.XX&quot;):
                 lookup_options[k[5:]] = v
             elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:
                 lookup_options[k] = v
</failure>
			<system-out>            if k.startswith(&quot;mako.&quot;):</system-out>
		</testcase>
		<testcase name="Mutant #3426" file="mako/ext/turbogears.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -23,7 +23,7 @@
         lookup_options = {}
         for k, v in options.items():
             if k.startswith(&quot;mako.&quot;):
-                lookup_options[k[5:]] = v
+                lookup_options[k[6:]] = v
             elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:
                 lookup_options[k] = v
         self.lookup = TemplateLookup(**lookup_options)
</failure>
			<system-out>                lookup_options[k[5:]] = v</system-out>
		</testcase>
		<testcase name="Mutant #3427" file="mako/ext/turbogears.py" line="25">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -23,7 +23,7 @@
         lookup_options = {}
         for k, v in options.items():
             if k.startswith(&quot;mako.&quot;):
-                lookup_options[k[5:]] = v
+                lookup_options[k[5:]] = None
             elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:
                 lookup_options[k] = v
         self.lookup = TemplateLookup(**lookup_options)
</failure>
			<system-out>                lookup_options[k[5:]] = v</system-out>
		</testcase>
		<testcase name="Mutant #3428" file="mako/ext/turbogears.py" line="26">
			<system-out>            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #3429" file="mako/ext/turbogears.py" line="26">
			<system-out>            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #3430" file="mako/ext/turbogears.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -24,7 +24,7 @@
         for k, v in options.items():
             if k.startswith(&quot;mako.&quot;):
                 lookup_options[k[5:]] = v
-            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:
+            elif k in [&quot;directories&quot;, &quot;XXfilesystem_checksXX&quot;, &quot;module_directory&quot;]:
                 lookup_options[k] = v
         self.lookup = TemplateLookup(**lookup_options)
 
</failure>
			<system-out>            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #3431" file="mako/ext/turbogears.py" line="26">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -24,7 +24,7 @@
         for k, v in options.items():
             if k.startswith(&quot;mako.&quot;):
                 lookup_options[k[5:]] = v
-            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:
+            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;XXmodule_directoryXX&quot;]:
                 lookup_options[k] = v
         self.lookup = TemplateLookup(**lookup_options)
 
</failure>
			<system-out>            elif k in [&quot;directories&quot;, &quot;filesystem_checks&quot;, &quot;module_directory&quot;]:</system-out>
		</testcase>
		<testcase name="Mutant #3432" file="mako/ext/turbogears.py" line="27">
			<system-out>                lookup_options[k] = v</system-out>
		</testcase>
		<testcase name="Mutant #3433" file="mako/ext/turbogears.py" line="28">
			<system-out>        self.lookup = TemplateLookup(**lookup_options)</system-out>
		</testcase>
		<testcase name="Mutant #3434" file="mako/ext/turbogears.py" line="30">
			<system-out>        self.tmpl_options = {}</system-out>
		</testcase>
		<testcase name="Mutant #3435" file="mako/ext/turbogears.py" line="33">
			<system-out>        for kw in compat.inspect_getargspec(Template.__init__)[0]:</system-out>
		</testcase>
		<testcase name="Mutant #3436" file="mako/ext/turbogears.py" line="34">
			<system-out>            if kw in lookup_options:</system-out>
		</testcase>
		<testcase name="Mutant #3437" file="mako/ext/turbogears.py" line="35">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -33,7 +33,7 @@
         # in getargspec
         for kw in compat.inspect_getargspec(Template.__init__)[0]:
             if kw in lookup_options:
-                self.tmpl_options[kw] = lookup_options[kw]
+                self.tmpl_options[kw] = None
 
     def load_template(self, templatename, template_string=None):
         &quot;&quot;&quot;Loads a template from a file or a string&quot;&quot;&quot;
</failure>
			<system-out>                self.tmpl_options[kw] = lookup_options[kw]</system-out>
		</testcase>
		<testcase name="Mutant #3438" file="mako/ext/turbogears.py" line="39">
			<system-out>        if template_string is not None:</system-out>
		</testcase>
		<testcase name="Mutant #3439" file="mako/ext/turbogears.py" line="42">
			<system-out>        if &quot;/&quot; not in templatename:</system-out>
		</testcase>
		<testcase name="Mutant #3440" file="mako/ext/turbogears.py" line="42">
			<system-out>        if &quot;/&quot; not in templatename:</system-out>
		</testcase>
		<testcase name="Mutant #3441" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3442" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3443" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3444" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3445" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3446" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3447" file="mako/ext/turbogears.py" line="44">
			<system-out>                &quot;/&quot; + templatename.replace(&quot;.&quot;, &quot;/&quot;) + &quot;.&quot; + self.extension</system-out>
		</testcase>
		<testcase name="Mutant #3448" file="mako/ext/turbogears.py" line="45">
			<system-out>            )</system-out>
		</testcase>
		<testcase name="Mutant #3449" file="mako/ext/turbogears.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -49,7 +49,7 @@
         return self.lookup.get_template(templatename)
 
     def render(
-        self, info, format=&quot;html&quot;, fragment=False, template=None  # noqa
+        self, info, format=&quot;XXhtmlXX&quot;, fragment=False, template=None  # noqa
     ):
         if isinstance(template, compat.string_types):
             template = self.load_template(template)
</failure>
			<system-out>        self, info, format=&quot;html&quot;, fragment=False, template=None  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #3450" file="mako/ext/turbogears.py" line="51">
			<failure type="failure" message="bad_survived">--- mako/ext/turbogears.py
+++ mako/ext/turbogears.py
@@ -49,7 +49,7 @@
         return self.lookup.get_template(templatename)
 
     def render(
-        self, info, format=&quot;html&quot;, fragment=False, template=None  # noqa
+        self, info, format=&quot;html&quot;, fragment=True, template=None  # noqa
     ):
         if isinstance(template, compat.string_types):
             template = self.load_template(template)
</failure>
			<system-out>        self, info, format=&quot;html&quot;, fragment=False, template=None  # noqa</system-out>
		</testcase>
		<testcase name="Mutant #3451" file="mako/ext/turbogears.py" line="54">
			<system-out>            template = self.load_template(template)</system-out>
		</testcase>
		<testcase name="Mutant #3452" file="mako/ext/preprocessors.py" line="19">
			<system-out>    return re.sub(r&quot;(?&lt;=\n)\s*#[^#]&quot;, &quot;##&quot;, text)</system-out>
		</testcase>
		<testcase name="Mutant #3453" file="mako/ext/preprocessors.py" line="19">
			<system-out>    return re.sub(r&quot;(?&lt;=\n)\s*#[^#]&quot;, &quot;##&quot;, text)</system-out>
		</testcase>
	</testsuite>
</testsuites>

